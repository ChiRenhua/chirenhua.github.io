{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME.rtf","path":"CNAME.rtf","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME.rtf","hash":"0157bf4ab2668a0c20400d3e51342f34e5e51b96","modified":1512441945000},{"_id":"source/.DS_Store","hash":"600b42dc559a34408048ddf0b6533445717fc01a","modified":1492846156000},{"_id":"source/404.html","hash":"310fc37341c13586d09c4d1d82ca51ed082d6481","modified":1472120407000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1472116245000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1472116245000},{"_id":"themes/next/.DS_Store","hash":"78d0afe9d0275fe0e36f6ec97830d27239bf9542","modified":1474028364000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1472116245000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1472116245000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1472116245000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1472116245000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1472116245000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1472116245000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1472116245000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1472116245000},{"_id":"source/_posts/WWDC-2017笔记—Drag-and-Drop.md","hash":"acff95cd968f4e81b796a1f2f336d482e73cf7f3","modified":1500461670000},{"_id":"source/_posts/Instruments-Core-Animation下Debug-Options的介绍和优化方法.md","hash":"e5d0491cdebdcab4420cf610fb7149ffd9b8030f","modified":1494853092000},{"_id":"source/_posts/Xcode-真机编译iOS7方法.md","hash":"bfa737e3dba4fca425cb436eeafc37c6c0c16edb","modified":1494854342000},{"_id":"source/_posts/hello-world.md","hash":"3507c80fd2a8ad44c75f116b6ecbd026bae2b50a","modified":1472307625000},{"_id":"source/_posts/WWDC-2017笔记—Vision.md","hash":"22fb724d33e1b945c11514425f8df5e56089446c","modified":1505898947000},{"_id":"source/_posts/iOS-NSUserDefaults用法总结.md","hash":"513e021f8813fe4b52bda12586a0d29524273393","modified":1474035292000},{"_id":"source/_posts/hexo常用命令整理.md","hash":"78aba70644b955fc7527f2a7ae91ce77a76891bd","modified":1472308047000},{"_id":"source/_posts/iOS-使用UISearchController创建搜索框.md","hash":"0fdbc7507129cea5b8312303bc9d79d3adf80069","modified":1472463337000},{"_id":"source/_posts/iOS-自定义转场动画.md","hash":"9b9c4c4ccbc14ad22016855e875d591d75ffe4fa","modified":1494853524000},{"_id":"source/_posts/iOS-离屏渲染带来的性能问题和解决办法.md","hash":"32ad6db061b3a6d33f24772ad514b7c8156f13db","modified":1477124437000},{"_id":"source/_posts/安装CocoaPods过程以及踩过的坑.md","hash":"f326a2285e177c7c7982e39ba14207ea39e6fab8","modified":1472307964000},{"_id":"themes/next/_config.yml","hash":"cabb92e8e29e2c445927bfdbc18c3992245f7ce8","modified":1472193160000},{"_id":"source/about/index.md","hash":"9dbf7bf731d6c8c3224fb8c0a967cf00240f8b82","modified":1472131412000},{"_id":"source/categories/index.md","hash":"5851407bc39c5418001ca6f855bc8a7ec7c86989","modified":1472126864000},{"_id":"source/tags/index.md","hash":"2621dcbd54180fcdc100f449bfd2ceebe1676ca3","modified":1472126267000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1472116245000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1472116245000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1472116245000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1472116245000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1472116245000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1472116245000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1504774624000},{"_id":"themes/next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1472116245000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1472116245000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1472116245000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1472116245000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1472116245000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1472116245000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1472116245000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1472116245000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1472116245000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1472116245000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1472116245000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1472116245000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1472116245000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1472116245000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1472116245000},{"_id":"themes/next/layout/.DS_Store","hash":"d07a6724b48d212feaaec347ea3cf5908481532c","modified":1472131872000},{"_id":"themes/next/source/.DS_Store","hash":"d861043166281b37b7757591fecd7e1aca9068ac","modified":1472131877000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472116245000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1472116245000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1472116245000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1472116245000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1472116245000},{"_id":"themes/next/layout/_macro/post.swig","hash":"f3895bf44a9fb7c462f2e57b9a914703c2f152ba","modified":1472116245000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1472116245000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1472116245000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1472116245000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1472116245000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1472116245000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1472116245000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1472116245000},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1472116245000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1472116245000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1472116245000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1472116245000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1472116245000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1472116245000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1472116245000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1472116245000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1472116245000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1472116245000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1472116245000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1472116245000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1472116245000},{"_id":"themes/next/source/css/.DS_Store","hash":"9e6d6ac75667874d94dbfd09aa36135e2d4272aa","modified":1472131872000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1472116245000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1472116245000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1472116245000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1472116245000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1472116245000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1472116245000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1472116245000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1472116245000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1472116245000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1472116245000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1472116245000},{"_id":"themes/next/source/vendors/.DS_Store","hash":"15ea738f26fb680ed86ecd370d9e4b50276e39fb","modified":1472131872000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472116245000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472116245000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472116245000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472116245000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472116245000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472116245000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472116245000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1472116245000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1472116245000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1472116245000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1472116245000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1472116245000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1472116245000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1472116245000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1472116245000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1472116245000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1472116245000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1472116245000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1472116245000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1472116245000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1472116245000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1472116245000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1472116245000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1472116245000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1472116245000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1472116245000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1472116245000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1472116245000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1472116245000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1472116245000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1472116245000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1472116245000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1472116245000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1472116245000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1472116245000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1472116245000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1472116245000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1472116245000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1472116245000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1472116245000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1472116245000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1472116245000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1472116245000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1472116245000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1472116245000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1472116245000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1472116245000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1472116245000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1472116245000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1472116245000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1472116245000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1472116245000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1472116245000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1472116245000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1472116245000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1472116245000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1472116245000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1472116245000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1472116245000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1472116245000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1472116245000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1472116245000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1472116245000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1472116245000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"1e3e1c6231408e18e8485a8e0e59e8880349b210","modified":1472116245000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1472116245000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1472116245000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1472116245000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1472116245000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1472116245000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1472116245000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1472116245000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1472116245000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1472116245000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1472116245000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1472116245000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1472116245000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1472116245000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1472116245000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1472116245000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1472116245000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1472116245000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1472116245000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1472116245000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1472116245000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1472116245000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1472116245000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1472116245000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1472116245000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1472116245000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1472116245000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1472116245000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1472116245000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1472116245000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1472116245000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1472116245000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1472116245000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1472116245000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1472116245000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1472116245000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1472116245000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1472116245000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1472116245000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1472116245000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1472116245000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1472116245000},{"_id":"public/search.xml","hash":"a4c8af4299499bb3f9373201884c72bc18b6d9c8","modified":1512442014607},{"_id":"public/404.html","hash":"bfb4c9a143dcc25339a931d866b9097f6502bb34","modified":1512442014622},{"_id":"public/about/index.html","hash":"8f962344051b79277bcd404bf198860873e213bd","modified":1512442014622},{"_id":"public/tags/index.html","hash":"ba855f84a4c87c0ca4417493472f9a8fa1a13ab7","modified":1512442014622},{"_id":"public/categories/index.html","hash":"705dc964901078626d6d547917a814e7936edd84","modified":1512442014622},{"_id":"public/2017/07/19/WWDC-2017笔记—Drag-and-Drop/index.html","hash":"d06d32f2f25e39aff324496be48bf860afadd593","modified":1512442014622},{"_id":"public/2017/05/15/Xcode-真机编译iOS7方法/index.html","hash":"9ea728b4fdfa8f60d4d6a1f367f6adf4e6e1bf5f","modified":1512442014623},{"_id":"public/2017/04/22/iOS-自定义转场动画/index.html","hash":"15308ce8d891364584d6262c06998acd1f2de882","modified":1512442014623},{"_id":"public/2017/09/07/WWDC-2017笔记—Vision/index.html","hash":"66dbcf157b57045aafa55d957b6c38e392917fe8","modified":1512442014624},{"_id":"public/2017/02/12/Instruments-Core-Animation下Debug-Options的介绍和优化方法/index.html","hash":"6a1e755f84480ded6b7c49728ea6f585083d27d7","modified":1512442014624},{"_id":"public/2016/10/22/iOS-离屏渲染带来的性能问题和解决办法/index.html","hash":"32a7755725fcac41716ee1f72245f0ba1179fbde","modified":1512442014624},{"_id":"public/2016/09/16/iOS-NSUserDefaults用法总结/index.html","hash":"c31eb0d5278780ae5f333cf948af258762d21b5b","modified":1512442014624},{"_id":"public/2016/08/29/iOS-使用UISearchController创建搜索框/index.html","hash":"d1b9550eedf87c511cffc78a1ca0c280b4004dfb","modified":1512442014624},{"_id":"public/2016/08/27/安装CocoaPods过程以及踩过的坑/index.html","hash":"288263c6e54c3eaaf32bfbf5e0ca11da371eaf73","modified":1512442014624},{"_id":"public/2016/08/27/hexo常用命令整理/index.html","hash":"6c9c94ef5f91fea72e26d1bf0d0b725af3f670ac","modified":1512442014624},{"_id":"public/2016/08/24/hello-world/index.html","hash":"532db46128e549fe52c4a9d35a5e453e8c3caeb8","modified":1512442014624},{"_id":"public/archives/index.html","hash":"6185e6244794bfdb02b5037681925bffbf3e4e84","modified":1512442014624},{"_id":"public/archives/page/2/index.html","hash":"8fc762d3b2694ba4cf94596069717e235f149b6a","modified":1512442014624},{"_id":"public/archives/2016/index.html","hash":"4d856f11dc109f6d66a1af7570b7cfd62bee52a1","modified":1512442014624},{"_id":"public/archives/2016/08/index.html","hash":"044ddaa8b93627cd83f777450606c2be155c71b7","modified":1512442014624},{"_id":"public/archives/2016/09/index.html","hash":"c4b70187a5d22e7d568efa5b645191a440b992ad","modified":1512442014624},{"_id":"public/archives/2016/10/index.html","hash":"5b53a331d72bb6eb2091bbfc6f24248bbc6a6d5c","modified":1512442014624},{"_id":"public/archives/2017/index.html","hash":"bd9d74f72d0a85933e1042ad4e1d7706c8340e5f","modified":1512442014624},{"_id":"public/archives/2017/02/index.html","hash":"8a6fe52edc82a464a3226e678a17cedcb634e6df","modified":1512442014624},{"_id":"public/archives/2017/04/index.html","hash":"322aca52a8a9e413373ff32f3bf748213705abe3","modified":1512442014624},{"_id":"public/archives/2017/05/index.html","hash":"4345f87e5e68afea3d00cb88d150403f896beba6","modified":1512442014624},{"_id":"public/archives/2017/07/index.html","hash":"57e63dd8ba9f0781ebba7ea35b11efb6674ce93b","modified":1512442014624},{"_id":"public/categories/Xcode工具/index.html","hash":"7fc09f892b42feefaa990abe0f2c616a1db7e0ea","modified":1512442014624},{"_id":"public/categories/iOS开发总结/index.html","hash":"c29999c7fb325f8d5b3e48002150741dfd280863","modified":1512442014624},{"_id":"public/archives/2017/09/index.html","hash":"9534efbf6c73931519c910db90bfb1e2aef7afa2","modified":1512442014624},{"_id":"public/categories/随笔/index.html","hash":"9a7f8a040c436b5654cdcd366b919cbf6d775c5d","modified":1512442014624},{"_id":"public/categories/网站搭建/index.html","hash":"8e438672ef520cedac5e030d04d6ed1e554dc251","modified":1512442014624},{"_id":"public/index.html","hash":"78a80ad5b86c10cff20fb8115018f65cf7f7c299","modified":1512442014624},{"_id":"public/page/2/index.html","hash":"5f1c981b78ac099bd7bb90d12c2090cc85315511","modified":1512442014624},{"_id":"public/tags/工具/index.html","hash":"834f0f7a19e997e08a731387ea53aec1f6a46b83","modified":1512442014625},{"_id":"public/tags/Xcode/index.html","hash":"3798d9ae6f6a928fb4dba0486b09a2d66b99d8ab","modified":1512442014625},{"_id":"public/tags/Instruments/index.html","hash":"bd4a3a18c6afc1d6e4cb4012b9edc8cd77dce7f3","modified":1512442014625},{"_id":"public/tags/iOS/index.html","hash":"a5bbeae5ab6b8c304d0e10af49fdd5c80a6e59da","modified":1512442014625},{"_id":"public/tags/WWDC/index.html","hash":"be50c4ae2c3d6e1fafd832d957544b16b4981e94","modified":1512442014625},{"_id":"public/tags/iOS7/index.html","hash":"a37038b4f06230942cb73e1ead8262c7654273e2","modified":1512442014625},{"_id":"public/tags/命令/index.html","hash":"7a8dd51167b0402e91b0017c6993addb1879db85","modified":1512442014625},{"_id":"public/tags/类库管理/index.html","hash":"29c51ae9f834cd2049cce8a698b96b0ee4136ae4","modified":1512442014625},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1512442014634},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1512442014635},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1512442014635},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1512442014635},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1512442014635},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1512442014635},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1512442014635},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1512442014635},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1512442014635},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1512442014635},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1512442014635},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1512442014635},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1512442014635},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1512442014635},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1512442014635},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1512442014635},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1512442014635},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1512442014635},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1512442014635},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1512442014635},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1512442014635},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1512442014635},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1512442014635},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1512442014635},{"_id":"public/CNAME.rtf","hash":"0157bf4ab2668a0c20400d3e51342f34e5e51b96","modified":1512442014635},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1512442016670},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1512442016675},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1512442016676},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1512442016684},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1512442016684},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1512442016684},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1512442016684},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1512442016684},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1512442016684},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1512442016684},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1512442016684},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1512442016684},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1512442016684},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1512442016684},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1512442016684},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1512442016684},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1512442016684},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1512442016684},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1512442016684},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1512442016685},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1512442016685},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1512442016685},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1512442016685},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1512442016685},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1512442016685},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1512442016685},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1512442016685},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1512442016685},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1512442016685},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1512442016685},{"_id":"public/css/main.css","hash":"d0d74d322d17fdd8dc8eaf0718b917102f8977ed","modified":1512442016685},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1512442016685},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1512442016685},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1512442016685},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1512442016685},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1512442016685},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1512442016685},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1512442016685},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1512442016685},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1512442016685},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1512442016685},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1512442016688}],"Category":[{"name":"Xcode工具","_id":"cjat0x9ua0004clqddsv9aoss"},{"name":"iOS开发总结","_id":"cjat0x9ud0009clqdtuseazoi"},{"name":"随笔","_id":"cjat0x9uu000gclqdtvwq0qy0"},{"name":"网站搭建","_id":"cjat0x9uw000qclqdjlo2bcef"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","date":"2016-08-25T10:20:07.000Z","updated":"2016-08-25T10:20:07.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjat0x9sf0000clqdxwr20o16","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"your site url \" homepagename=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n"},{"_content":"![about](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/about-bg.jpg)\n\n&emsp;&emsp;我写博客的习惯是从大学开始的，那时候只是觉得有一个自己的博客很酷，于是花了很多时间做了一个很花哨的网站，为了避免太空洞，还拷贝了很多别人的文章到自己的博客...现在想想真是好好笑。正好最近我的服务器和域名都快到期了，于是重新考虑了一下我是否还需要一个博客。\n\n&emsp;&emsp;最终我还是决定继续写我的博客，但这次跟以往有很大的不同。如果说我写博客是因为需要的话，那么这次我不仅要做到我自己需要，我还要让大家都需要。我要把我所学的知识都写在博客里，不仅为自己做个备份，也是希望能帮助一些人，因为我也是看大神的博客，一步一步的学习，所以我知道一个好的博客对于一个菜鸟来说是多么的珍贵。所以我决定重新设计我的博客，完全抛弃了以前花哨的界面和拷贝过来的文章，这次，要完完全全的重新开始。\n\n&emsp;&emsp;以前的博客是利用worldpress搭建在云服务器上的，现在改为github pages ＋ hexo ＋ markdown，坏处是只能创建静态网页，但这也是好处，因为这样可以把注意力更多的放到文章上，还有一个好处，就是后者完全免费，省了不少银子。\n\n&emsp;&emsp;这个博客的搭建也是废了我好大劲，死了好多脑细胞，掉了好多头发，但是也学到了好多新的知识，所以在最后我会分享一些我在搭建博客过程中看到的好文章，希望看到的人能少走弯路。\n\n## 分享\n[windows版博客搭建教程](https://xuanwo.org/2015/03/26/hexo-intor/)\n\n[Mac版博客搭建教程](http://www.jianshu.com/p/13e64c9e2295)\n\n[博主推荐的Hexo模版nexT](https://github.com/iissnan/hexo-theme-next)\n\n[markdown新手指南](http://www.jianshu.com/p/q81RER)\n\n[windows版markdown客户端推荐—markdownPad](http://markdownpad.com)\n\n[Mac版markdown客户端推荐—Mou](http://25.io/mou/)","source":"about/index.md","raw":"![about](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/about-bg.jpg)\n\n&emsp;&emsp;我写博客的习惯是从大学开始的，那时候只是觉得有一个自己的博客很酷，于是花了很多时间做了一个很花哨的网站，为了避免太空洞，还拷贝了很多别人的文章到自己的博客...现在想想真是好好笑。正好最近我的服务器和域名都快到期了，于是重新考虑了一下我是否还需要一个博客。\n\n&emsp;&emsp;最终我还是决定继续写我的博客，但这次跟以往有很大的不同。如果说我写博客是因为需要的话，那么这次我不仅要做到我自己需要，我还要让大家都需要。我要把我所学的知识都写在博客里，不仅为自己做个备份，也是希望能帮助一些人，因为我也是看大神的博客，一步一步的学习，所以我知道一个好的博客对于一个菜鸟来说是多么的珍贵。所以我决定重新设计我的博客，完全抛弃了以前花哨的界面和拷贝过来的文章，这次，要完完全全的重新开始。\n\n&emsp;&emsp;以前的博客是利用worldpress搭建在云服务器上的，现在改为github pages ＋ hexo ＋ markdown，坏处是只能创建静态网页，但这也是好处，因为这样可以把注意力更多的放到文章上，还有一个好处，就是后者完全免费，省了不少银子。\n\n&emsp;&emsp;这个博客的搭建也是废了我好大劲，死了好多脑细胞，掉了好多头发，但是也学到了好多新的知识，所以在最后我会分享一些我在搭建博客过程中看到的好文章，希望看到的人能少走弯路。\n\n## 分享\n[windows版博客搭建教程](https://xuanwo.org/2015/03/26/hexo-intor/)\n\n[Mac版博客搭建教程](http://www.jianshu.com/p/13e64c9e2295)\n\n[博主推荐的Hexo模版nexT](https://github.com/iissnan/hexo-theme-next)\n\n[markdown新手指南](http://www.jianshu.com/p/q81RER)\n\n[windows版markdown客户端推荐—markdownPad](http://markdownpad.com)\n\n[Mac版markdown客户端推荐—Mou](http://25.io/mou/)","date":"2016-08-25T13:23:32.000Z","updated":"2016-08-25T13:23:32.000Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cjat0x9ya001aclqdcdjackta","content":"<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/about-bg.jpg\" alt=\"about\"></p>\n<p>&emsp;&emsp;我写博客的习惯是从大学开始的，那时候只是觉得有一个自己的博客很酷，于是花了很多时间做了一个很花哨的网站，为了避免太空洞，还拷贝了很多别人的文章到自己的博客…现在想想真是好好笑。正好最近我的服务器和域名都快到期了，于是重新考虑了一下我是否还需要一个博客。</p>\n<p>&emsp;&emsp;最终我还是决定继续写我的博客，但这次跟以往有很大的不同。如果说我写博客是因为需要的话，那么这次我不仅要做到我自己需要，我还要让大家都需要。我要把我所学的知识都写在博客里，不仅为自己做个备份，也是希望能帮助一些人，因为我也是看大神的博客，一步一步的学习，所以我知道一个好的博客对于一个菜鸟来说是多么的珍贵。所以我决定重新设计我的博客，完全抛弃了以前花哨的界面和拷贝过来的文章，这次，要完完全全的重新开始。</p>\n<p>&emsp;&emsp;以前的博客是利用worldpress搭建在云服务器上的，现在改为github pages ＋ hexo ＋ markdown，坏处是只能创建静态网页，但这也是好处，因为这样可以把注意力更多的放到文章上，还有一个好处，就是后者完全免费，省了不少银子。</p>\n<p>&emsp;&emsp;这个博客的搭建也是废了我好大劲，死了好多脑细胞，掉了好多头发，但是也学到了好多新的知识，所以在最后我会分享一些我在搭建博客过程中看到的好文章，希望看到的人能少走弯路。</p>\n<h2 id=\"分享\"><a href=\"#分享\" class=\"headerlink\" title=\"分享\"></a>分享</h2><p><a href=\"https://xuanwo.org/2015/03/26/hexo-intor/\" target=\"_blank\" rel=\"external\">windows版博客搭建教程</a></p>\n<p><a href=\"http://www.jianshu.com/p/13e64c9e2295\" target=\"_blank\" rel=\"external\">Mac版博客搭建教程</a></p>\n<p><a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"external\">博主推荐的Hexo模版nexT</a></p>\n<p><a href=\"http://www.jianshu.com/p/q81RER\" target=\"_blank\" rel=\"external\">markdown新手指南</a></p>\n<p><a href=\"http://markdownpad.com\" target=\"_blank\" rel=\"external\">windows版markdown客户端推荐—markdownPad</a></p>\n<p><a href=\"http://25.io/mou/\" target=\"_blank\" rel=\"external\">Mac版markdown客户端推荐—Mou</a></p>\n","excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/about-bg.jpg\" alt=\"about\"></p>\n<p>&emsp;&emsp;我写博客的习惯是从大学开始的，那时候只是觉得有一个自己的博客很酷，于是花了很多时间做了一个很花哨的网站，为了避免太空洞，还拷贝了很多别人的文章到自己的博客…现在想想真是好好笑。正好最近我的服务器和域名都快到期了，于是重新考虑了一下我是否还需要一个博客。</p>\n<p>&emsp;&emsp;最终我还是决定继续写我的博客，但这次跟以往有很大的不同。如果说我写博客是因为需要的话，那么这次我不仅要做到我自己需要，我还要让大家都需要。我要把我所学的知识都写在博客里，不仅为自己做个备份，也是希望能帮助一些人，因为我也是看大神的博客，一步一步的学习，所以我知道一个好的博客对于一个菜鸟来说是多么的珍贵。所以我决定重新设计我的博客，完全抛弃了以前花哨的界面和拷贝过来的文章，这次，要完完全全的重新开始。</p>\n<p>&emsp;&emsp;以前的博客是利用worldpress搭建在云服务器上的，现在改为github pages ＋ hexo ＋ markdown，坏处是只能创建静态网页，但这也是好处，因为这样可以把注意力更多的放到文章上，还有一个好处，就是后者完全免费，省了不少银子。</p>\n<p>&emsp;&emsp;这个博客的搭建也是废了我好大劲，死了好多脑细胞，掉了好多头发，但是也学到了好多新的知识，所以在最后我会分享一些我在搭建博客过程中看到的好文章，希望看到的人能少走弯路。</p>\n<h2 id=\"分享\"><a href=\"#分享\" class=\"headerlink\" title=\"分享\"></a>分享</h2><p><a href=\"https://xuanwo.org/2015/03/26/hexo-intor/\">windows版博客搭建教程</a></p>\n<p><a href=\"http://www.jianshu.com/p/13e64c9e2295\">Mac版博客搭建教程</a></p>\n<p><a href=\"https://github.com/iissnan/hexo-theme-next\">博主推荐的Hexo模版nexT</a></p>\n<p><a href=\"http://www.jianshu.com/p/q81RER\">markdown新手指南</a></p>\n<p><a href=\"http://markdownpad.com\">windows版markdown客户端推荐—markdownPad</a></p>\n<p><a href=\"http://25.io/mou/\">Mac版markdown客户端推荐—Mou</a></p>\n"},{"title":"tags","date":"2016-08-25T11:53:33.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-08-25 19:53:33\ntype: \"tags\"\n---","updated":"2016-08-25T11:57:47.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjat0x9yq001cclqdkm3g49v8","content":"","excerpt":"","more":""},{"title":"categories","date":"2016-08-25T11:53:01.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-08-25 19:53:01\ntype: \"categories\"\n---","updated":"2016-08-25T12:07:44.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjat0x9yt001fclqdsn1esb65","content":"","excerpt":"","more":""}],"Post":[{"title":"Instruments--Core Animation下Debug Options的介绍和优化方法","date":"2017-02-12T15:16:52.000Z","_content":"![Instruments_Logo](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Instruments--Core%20Animation下Debug%20Options的介绍和优化方法/Instruments_Logo.png)  \n## 关于视图的优化\n&emsp;&emsp;在开发一个产品的过程中，我们不仅仅要实现功能，其实使用的体验也是很重要的一部分，那么使用过程中非常影响用户体验的就是流畅度，所以如何提高流畅度，避免卡顿是一个必须要重视的问题。好在强大的苹果为开发者提供了一个工具--Instruments，通过它我们可以轻松的找出拖慢我们产品的元凶。\n&emsp;&emsp;\n首先打开Instruments，选择Core Animation，然后打开一个目标程序，点击Record，此时Instruments就开始监控你的程序，并且实时展示帧数。在屏幕右下侧部分点击设置按钮，会展开一个页面，上面有Debug Options各个选项，下面介绍各个选项所展示的性能问题和优化方法。  \n![Instruments_01](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Instruments--Core%20Animation下Debug%20Options的介绍和优化方法/Instruments_DebugOptions.png)  \n## Color Blended Layers（混合图层）\n&emsp;&emsp;混合图层的概念其实就是多个图层盖在了一起，我们知道屏幕是一个一个像素点组合在一起的，而像素点展示什么颜色是由R、G、B、alpha四个部分组成，所以如果多个图层盖在一起，那么其最终的颜色，会受到每个图层的影响。而在计算最终颜色的过程中，会消耗GPU的资源，所以如果你只想显示最上层图层的颜色，那么可以将它设置为不透明，这样的话GPU会自动忽略下面的所有View，从而减少GPU的压力。  \n### UILable避免混合图层的办法：\n&emsp;&emsp;为UILable设置非透明背景色：\n&emsp;&emsp;``lable.backgroundColor = [UIColor whiteColor];``\n&emsp;&emsp;如果UILable展示的是中文，设置  &emsp;&emsp;``layer.masksToBounds = YES;``  \n&emsp;&emsp;不要慌，这里不会触发离屏渲染，在iOS8以后，展示中文时，UILable外围会有一圈透明的边，所以才要加这个，看下图）  \n![Instruments_03](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Instruments--Core%20Animation下Debug%20Options的介绍和优化方法/Instruments_03.png)\n### UIImageVIew避免混合图层的办法：\n&emsp;&emsp;很简单，只要图片本身没有透明的地方就可以啦，然后代码保证没有设置alpha值一类的属性就没问题。  \n## Color Hits Green and Misses Red (光栅化)  \n&emsp;&emsp;如果shouldRasterize被设置成YES，对应的渲染结果会被缓存，如果图层是绿色，就表示这些缓存被复用；如果是红色就表示缓存会被重复创建，这就表示该处存在性能问题了。  \n&emsp;&emsp;所以一般在图像内容不变的情况下才使用光栅化，例如设置阴影耗费资源比较多的静态内容，如果使用光栅化对性能的提升有一定帮助。反之如果图像内容总会变就不要设置这个属性。  \n&emsp;&emsp;如果你在一个界面中使用了光栅化，刚进去这个页面的所有使用了光栅化的控件layer都会是红色，因为还没有缓存成功，如果上下滑动你会发现，layer变成了绿色。但是如果你滑动幅度较大会发现，新出现的控件会是红色然后变成绿色，因为刚开始这些控件的layer还没有缓存。  \n&emsp;&emsp;注意点：  \n&emsp;&emsp;（1）系统给光栅化缓存分配了一个固定的大小，因此不能过度使用，如果超出了缓存也会造成离屏渲染。  \n&emsp;&emsp;（2）缓存的时间为100ms，因此如果在100ms内没有使用缓存的对象，则会从缓存中清除。  \n## color copied images（图片颜色格式）\n苹果给出的官网解释：  \n”If an image is in a color format that the GPU can not directly work with, it will be converted in the CPU.”  \n&emsp;&emsp;翻译过来就是：苹果的GPU只解析 32bit 的颜色格式。  \n&emsp;&emsp;如果你放一张图片，而它的颜色格式不是 32bit ，CPU会先进行颜色格式转换，再让GPU渲染。这样无形中就消耗了CPU部分性能。  \n&emsp;&emsp;解决办法：  \n&emsp;&emsp;1. 让设计师给图的时候注意要是32bit的。  \n&emsp;&emsp;2. 再开一个异步线程去处理颜色格式的转换。  \n&emsp;&emsp;（还是第一个办法好）  \n## Color Non-Standard Surface Formats（颜色非标准表面格式）\n&emsp;&emsp;没查到时嘎哈的，只知道大概跟文本的显示有关。\n## Color Immediately（立即执行颜色刷新）\n&emsp;&emsp;默认的颜色刷新有10ms延迟，这个选项可以去掉这个延迟，某些情况下调试可能会用到。\n## Color Misaligned Images(图片大小不符)\n&emsp;&emsp;当展示的图片和容器的大小不匹配时image会被标黄，尽量用大小符合的图片，不然会消耗资源对图片进行压缩或放大。  \n## Color Offscreen-Rendered Yellow（离屏渲染）\n&emsp;&emsp;参考文章：[iOS-离屏渲染带来的性能问题和解决办法](https://chirenhua.github.io/2016/10/22/iOS-离屏渲染带来的性能问题和解决办法/)\n## Color Compositing Fast-Path Blue (快速路径)\n&emsp;&emsp;标记由硬件绘制的路径为蓝色，蓝色越多越好.\n## Flash Updated Regions (重绘区域)\n&emsp;&emsp;这个选项会对重绘的内容高亮成黄色,重绘就是指使用Core Graphics绘制，绘制会损耗一定的性能，因此重绘区域应该越小越好，对于未发生变化的内容则不应该重绘。","source":"_posts/Instruments-Core-Animation下Debug-Options的介绍和优化方法.md","raw":"---\ntitle: Instruments--Core Animation下Debug Options的介绍和优化方法\ndate: 2017-02-12 23:16:52  \n\ncategories:\n- Xcode工具\ntags:\n- 工具\n- Xcode\n- Instruments\n---\n![Instruments_Logo](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Instruments--Core%20Animation下Debug%20Options的介绍和优化方法/Instruments_Logo.png)  \n## 关于视图的优化\n&emsp;&emsp;在开发一个产品的过程中，我们不仅仅要实现功能，其实使用的体验也是很重要的一部分，那么使用过程中非常影响用户体验的就是流畅度，所以如何提高流畅度，避免卡顿是一个必须要重视的问题。好在强大的苹果为开发者提供了一个工具--Instruments，通过它我们可以轻松的找出拖慢我们产品的元凶。\n&emsp;&emsp;\n首先打开Instruments，选择Core Animation，然后打开一个目标程序，点击Record，此时Instruments就开始监控你的程序，并且实时展示帧数。在屏幕右下侧部分点击设置按钮，会展开一个页面，上面有Debug Options各个选项，下面介绍各个选项所展示的性能问题和优化方法。  \n![Instruments_01](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Instruments--Core%20Animation下Debug%20Options的介绍和优化方法/Instruments_DebugOptions.png)  \n## Color Blended Layers（混合图层）\n&emsp;&emsp;混合图层的概念其实就是多个图层盖在了一起，我们知道屏幕是一个一个像素点组合在一起的，而像素点展示什么颜色是由R、G、B、alpha四个部分组成，所以如果多个图层盖在一起，那么其最终的颜色，会受到每个图层的影响。而在计算最终颜色的过程中，会消耗GPU的资源，所以如果你只想显示最上层图层的颜色，那么可以将它设置为不透明，这样的话GPU会自动忽略下面的所有View，从而减少GPU的压力。  \n### UILable避免混合图层的办法：\n&emsp;&emsp;为UILable设置非透明背景色：\n&emsp;&emsp;``lable.backgroundColor = [UIColor whiteColor];``\n&emsp;&emsp;如果UILable展示的是中文，设置  &emsp;&emsp;``layer.masksToBounds = YES;``  \n&emsp;&emsp;不要慌，这里不会触发离屏渲染，在iOS8以后，展示中文时，UILable外围会有一圈透明的边，所以才要加这个，看下图）  \n![Instruments_03](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Instruments--Core%20Animation下Debug%20Options的介绍和优化方法/Instruments_03.png)\n### UIImageVIew避免混合图层的办法：\n&emsp;&emsp;很简单，只要图片本身没有透明的地方就可以啦，然后代码保证没有设置alpha值一类的属性就没问题。  \n## Color Hits Green and Misses Red (光栅化)  \n&emsp;&emsp;如果shouldRasterize被设置成YES，对应的渲染结果会被缓存，如果图层是绿色，就表示这些缓存被复用；如果是红色就表示缓存会被重复创建，这就表示该处存在性能问题了。  \n&emsp;&emsp;所以一般在图像内容不变的情况下才使用光栅化，例如设置阴影耗费资源比较多的静态内容，如果使用光栅化对性能的提升有一定帮助。反之如果图像内容总会变就不要设置这个属性。  \n&emsp;&emsp;如果你在一个界面中使用了光栅化，刚进去这个页面的所有使用了光栅化的控件layer都会是红色，因为还没有缓存成功，如果上下滑动你会发现，layer变成了绿色。但是如果你滑动幅度较大会发现，新出现的控件会是红色然后变成绿色，因为刚开始这些控件的layer还没有缓存。  \n&emsp;&emsp;注意点：  \n&emsp;&emsp;（1）系统给光栅化缓存分配了一个固定的大小，因此不能过度使用，如果超出了缓存也会造成离屏渲染。  \n&emsp;&emsp;（2）缓存的时间为100ms，因此如果在100ms内没有使用缓存的对象，则会从缓存中清除。  \n## color copied images（图片颜色格式）\n苹果给出的官网解释：  \n”If an image is in a color format that the GPU can not directly work with, it will be converted in the CPU.”  \n&emsp;&emsp;翻译过来就是：苹果的GPU只解析 32bit 的颜色格式。  \n&emsp;&emsp;如果你放一张图片，而它的颜色格式不是 32bit ，CPU会先进行颜色格式转换，再让GPU渲染。这样无形中就消耗了CPU部分性能。  \n&emsp;&emsp;解决办法：  \n&emsp;&emsp;1. 让设计师给图的时候注意要是32bit的。  \n&emsp;&emsp;2. 再开一个异步线程去处理颜色格式的转换。  \n&emsp;&emsp;（还是第一个办法好）  \n## Color Non-Standard Surface Formats（颜色非标准表面格式）\n&emsp;&emsp;没查到时嘎哈的，只知道大概跟文本的显示有关。\n## Color Immediately（立即执行颜色刷新）\n&emsp;&emsp;默认的颜色刷新有10ms延迟，这个选项可以去掉这个延迟，某些情况下调试可能会用到。\n## Color Misaligned Images(图片大小不符)\n&emsp;&emsp;当展示的图片和容器的大小不匹配时image会被标黄，尽量用大小符合的图片，不然会消耗资源对图片进行压缩或放大。  \n## Color Offscreen-Rendered Yellow（离屏渲染）\n&emsp;&emsp;参考文章：[iOS-离屏渲染带来的性能问题和解决办法](https://chirenhua.github.io/2016/10/22/iOS-离屏渲染带来的性能问题和解决办法/)\n## Color Compositing Fast-Path Blue (快速路径)\n&emsp;&emsp;标记由硬件绘制的路径为蓝色，蓝色越多越好.\n## Flash Updated Regions (重绘区域)\n&emsp;&emsp;这个选项会对重绘的内容高亮成黄色,重绘就是指使用Core Graphics绘制，绘制会损耗一定的性能，因此重绘区域应该越小越好，对于未发生变化的内容则不应该重绘。","slug":"Instruments-Core-Animation下Debug-Options的介绍和优化方法","published":1,"updated":"2017-05-15T12:58:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjat0x9tc0001clqdiwgvgxna","content":"<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Instruments--Core%20Animation下Debug%20Options的介绍和优化方法/Instruments_Logo.png\" alt=\"Instruments_Logo\">  </p>\n<h2 id=\"关于视图的优化\"><a href=\"#关于视图的优化\" class=\"headerlink\" title=\"关于视图的优化\"></a>关于视图的优化</h2><p>&emsp;&emsp;在开发一个产品的过程中，我们不仅仅要实现功能，其实使用的体验也是很重要的一部分，那么使用过程中非常影响用户体验的就是流畅度，所以如何提高流畅度，避免卡顿是一个必须要重视的问题。好在强大的苹果为开发者提供了一个工具–Instruments，通过它我们可以轻松的找出拖慢我们产品的元凶。<br>&emsp;&emsp;<br>首先打开Instruments，选择Core Animation，然后打开一个目标程序，点击Record，此时Instruments就开始监控你的程序，并且实时展示帧数。在屏幕右下侧部分点击设置按钮，会展开一个页面，上面有Debug Options各个选项，下面介绍各个选项所展示的性能问题和优化方法。<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Instruments--Core%20Animation下Debug%20Options的介绍和优化方法/Instruments_DebugOptions.png\" alt=\"Instruments_01\">  </p>\n<h2 id=\"Color-Blended-Layers（混合图层）\"><a href=\"#Color-Blended-Layers（混合图层）\" class=\"headerlink\" title=\"Color Blended Layers（混合图层）\"></a>Color Blended Layers（混合图层）</h2><p>&emsp;&emsp;混合图层的概念其实就是多个图层盖在了一起，我们知道屏幕是一个一个像素点组合在一起的，而像素点展示什么颜色是由R、G、B、alpha四个部分组成，所以如果多个图层盖在一起，那么其最终的颜色，会受到每个图层的影响。而在计算最终颜色的过程中，会消耗GPU的资源，所以如果你只想显示最上层图层的颜色，那么可以将它设置为不透明，这样的话GPU会自动忽略下面的所有View，从而减少GPU的压力。  </p>\n<h3 id=\"UILable避免混合图层的办法：\"><a href=\"#UILable避免混合图层的办法：\" class=\"headerlink\" title=\"UILable避免混合图层的办法：\"></a>UILable避免混合图层的办法：</h3><p>&emsp;&emsp;为UILable设置非透明背景色：<br>&emsp;&emsp;<code>lable.backgroundColor = [UIColor whiteColor];</code><br>&emsp;&emsp;如果UILable展示的是中文，设置  &emsp;&emsp;<code>layer.masksToBounds = YES;</code><br>&emsp;&emsp;不要慌，这里不会触发离屏渲染，在iOS8以后，展示中文时，UILable外围会有一圈透明的边，所以才要加这个，看下图）<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Instruments--Core%20Animation下Debug%20Options的介绍和优化方法/Instruments_03.png\" alt=\"Instruments_03\"></p>\n<h3 id=\"UIImageVIew避免混合图层的办法：\"><a href=\"#UIImageVIew避免混合图层的办法：\" class=\"headerlink\" title=\"UIImageVIew避免混合图层的办法：\"></a>UIImageVIew避免混合图层的办法：</h3><p>&emsp;&emsp;很简单，只要图片本身没有透明的地方就可以啦，然后代码保证没有设置alpha值一类的属性就没问题。  </p>\n<h2 id=\"Color-Hits-Green-and-Misses-Red-光栅化\"><a href=\"#Color-Hits-Green-and-Misses-Red-光栅化\" class=\"headerlink\" title=\"Color Hits Green and Misses Red (光栅化)\"></a>Color Hits Green and Misses Red (光栅化)</h2><p>&emsp;&emsp;如果shouldRasterize被设置成YES，对应的渲染结果会被缓存，如果图层是绿色，就表示这些缓存被复用；如果是红色就表示缓存会被重复创建，这就表示该处存在性能问题了。<br>&emsp;&emsp;所以一般在图像内容不变的情况下才使用光栅化，例如设置阴影耗费资源比较多的静态内容，如果使用光栅化对性能的提升有一定帮助。反之如果图像内容总会变就不要设置这个属性。<br>&emsp;&emsp;如果你在一个界面中使用了光栅化，刚进去这个页面的所有使用了光栅化的控件layer都会是红色，因为还没有缓存成功，如果上下滑动你会发现，layer变成了绿色。但是如果你滑动幅度较大会发现，新出现的控件会是红色然后变成绿色，因为刚开始这些控件的layer还没有缓存。<br>&emsp;&emsp;注意点：<br>&emsp;&emsp;（1）系统给光栅化缓存分配了一个固定的大小，因此不能过度使用，如果超出了缓存也会造成离屏渲染。<br>&emsp;&emsp;（2）缓存的时间为100ms，因此如果在100ms内没有使用缓存的对象，则会从缓存中清除。  </p>\n<h2 id=\"color-copied-images（图片颜色格式）\"><a href=\"#color-copied-images（图片颜色格式）\" class=\"headerlink\" title=\"color copied images（图片颜色格式）\"></a>color copied images（图片颜色格式）</h2><p>苹果给出的官网解释：<br>”If an image is in a color format that the GPU can not directly work with, it will be converted in the CPU.”<br>&emsp;&emsp;翻译过来就是：苹果的GPU只解析 32bit 的颜色格式。<br>&emsp;&emsp;如果你放一张图片，而它的颜色格式不是 32bit ，CPU会先进行颜色格式转换，再让GPU渲染。这样无形中就消耗了CPU部分性能。<br>&emsp;&emsp;解决办法：<br>&emsp;&emsp;1. 让设计师给图的时候注意要是32bit的。<br>&emsp;&emsp;2. 再开一个异步线程去处理颜色格式的转换。<br>&emsp;&emsp;（还是第一个办法好）  </p>\n<h2 id=\"Color-Non-Standard-Surface-Formats（颜色非标准表面格式）\"><a href=\"#Color-Non-Standard-Surface-Formats（颜色非标准表面格式）\" class=\"headerlink\" title=\"Color Non-Standard Surface Formats（颜色非标准表面格式）\"></a>Color Non-Standard Surface Formats（颜色非标准表面格式）</h2><p>&emsp;&emsp;没查到时嘎哈的，只知道大概跟文本的显示有关。</p>\n<h2 id=\"Color-Immediately（立即执行颜色刷新）\"><a href=\"#Color-Immediately（立即执行颜色刷新）\" class=\"headerlink\" title=\"Color Immediately（立即执行颜色刷新）\"></a>Color Immediately（立即执行颜色刷新）</h2><p>&emsp;&emsp;默认的颜色刷新有10ms延迟，这个选项可以去掉这个延迟，某些情况下调试可能会用到。</p>\n<h2 id=\"Color-Misaligned-Images-图片大小不符\"><a href=\"#Color-Misaligned-Images-图片大小不符\" class=\"headerlink\" title=\"Color Misaligned Images(图片大小不符)\"></a>Color Misaligned Images(图片大小不符)</h2><p>&emsp;&emsp;当展示的图片和容器的大小不匹配时image会被标黄，尽量用大小符合的图片，不然会消耗资源对图片进行压缩或放大。  </p>\n<h2 id=\"Color-Offscreen-Rendered-Yellow（离屏渲染）\"><a href=\"#Color-Offscreen-Rendered-Yellow（离屏渲染）\" class=\"headerlink\" title=\"Color Offscreen-Rendered Yellow（离屏渲染）\"></a>Color Offscreen-Rendered Yellow（离屏渲染）</h2><p>&emsp;&emsp;参考文章：<a href=\"https://chirenhua.github.io/2016/10/22/iOS-离屏渲染带来的性能问题和解决办法/\">iOS-离屏渲染带来的性能问题和解决办法</a></p>\n<h2 id=\"Color-Compositing-Fast-Path-Blue-快速路径\"><a href=\"#Color-Compositing-Fast-Path-Blue-快速路径\" class=\"headerlink\" title=\"Color Compositing Fast-Path Blue (快速路径)\"></a>Color Compositing Fast-Path Blue (快速路径)</h2><p>&emsp;&emsp;标记由硬件绘制的路径为蓝色，蓝色越多越好.</p>\n<h2 id=\"Flash-Updated-Regions-重绘区域\"><a href=\"#Flash-Updated-Regions-重绘区域\" class=\"headerlink\" title=\"Flash Updated Regions (重绘区域)\"></a>Flash Updated Regions (重绘区域)</h2><p>&emsp;&emsp;这个选项会对重绘的内容高亮成黄色,重绘就是指使用Core Graphics绘制，绘制会损耗一定的性能，因此重绘区域应该越小越好，对于未发生变化的内容则不应该重绘。</p>\n","excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Instruments--Core%20Animation下Debug%20Options的介绍和优化方法/Instruments_Logo.png\" alt=\"Instruments_Logo\">  </p>\n<h2 id=\"关于视图的优化\"><a href=\"#关于视图的优化\" class=\"headerlink\" title=\"关于视图的优化\"></a>关于视图的优化</h2><p>&emsp;&emsp;在开发一个产品的过程中，我们不仅仅要实现功能，其实使用的体验也是很重要的一部分，那么使用过程中非常影响用户体验的就是流畅度，所以如何提高流畅度，避免卡顿是一个必须要重视的问题。好在强大的苹果为开发者提供了一个工具–Instruments，通过它我们可以轻松的找出拖慢我们产品的元凶。<br>&emsp;&emsp;<br>首先打开Instruments，选择Core Animation，然后打开一个目标程序，点击Record，此时Instruments就开始监控你的程序，并且实时展示帧数。在屏幕右下侧部分点击设置按钮，会展开一个页面，上面有Debug Options各个选项，下面介绍各个选项所展示的性能问题和优化方法。<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Instruments--Core%20Animation下Debug%20Options的介绍和优化方法/Instruments_DebugOptions.png\" alt=\"Instruments_01\">  </p>\n<h2 id=\"Color-Blended-Layers（混合图层）\"><a href=\"#Color-Blended-Layers（混合图层）\" class=\"headerlink\" title=\"Color Blended Layers（混合图层）\"></a>Color Blended Layers（混合图层）</h2><p>&emsp;&emsp;混合图层的概念其实就是多个图层盖在了一起，我们知道屏幕是一个一个像素点组合在一起的，而像素点展示什么颜色是由R、G、B、alpha四个部分组成，所以如果多个图层盖在一起，那么其最终的颜色，会受到每个图层的影响。而在计算最终颜色的过程中，会消耗GPU的资源，所以如果你只想显示最上层图层的颜色，那么可以将它设置为不透明，这样的话GPU会自动忽略下面的所有View，从而减少GPU的压力。  </p>\n<h3 id=\"UILable避免混合图层的办法：\"><a href=\"#UILable避免混合图层的办法：\" class=\"headerlink\" title=\"UILable避免混合图层的办法：\"></a>UILable避免混合图层的办法：</h3><p>&emsp;&emsp;为UILable设置非透明背景色：<br>&emsp;&emsp;<code>lable.backgroundColor = [UIColor whiteColor];</code><br>&emsp;&emsp;如果UILable展示的是中文，设置  &emsp;&emsp;<code>layer.masksToBounds = YES;</code><br>&emsp;&emsp;不要慌，这里不会触发离屏渲染，在iOS8以后，展示中文时，UILable外围会有一圈透明的边，所以才要加这个，看下图）<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Instruments--Core%20Animation下Debug%20Options的介绍和优化方法/Instruments_03.png\" alt=\"Instruments_03\"></p>\n<h3 id=\"UIImageVIew避免混合图层的办法：\"><a href=\"#UIImageVIew避免混合图层的办法：\" class=\"headerlink\" title=\"UIImageVIew避免混合图层的办法：\"></a>UIImageVIew避免混合图层的办法：</h3><p>&emsp;&emsp;很简单，只要图片本身没有透明的地方就可以啦，然后代码保证没有设置alpha值一类的属性就没问题。  </p>\n<h2 id=\"Color-Hits-Green-and-Misses-Red-光栅化\"><a href=\"#Color-Hits-Green-and-Misses-Red-光栅化\" class=\"headerlink\" title=\"Color Hits Green and Misses Red (光栅化)\"></a>Color Hits Green and Misses Red (光栅化)</h2><p>&emsp;&emsp;如果shouldRasterize被设置成YES，对应的渲染结果会被缓存，如果图层是绿色，就表示这些缓存被复用；如果是红色就表示缓存会被重复创建，这就表示该处存在性能问题了。<br>&emsp;&emsp;所以一般在图像内容不变的情况下才使用光栅化，例如设置阴影耗费资源比较多的静态内容，如果使用光栅化对性能的提升有一定帮助。反之如果图像内容总会变就不要设置这个属性。<br>&emsp;&emsp;如果你在一个界面中使用了光栅化，刚进去这个页面的所有使用了光栅化的控件layer都会是红色，因为还没有缓存成功，如果上下滑动你会发现，layer变成了绿色。但是如果你滑动幅度较大会发现，新出现的控件会是红色然后变成绿色，因为刚开始这些控件的layer还没有缓存。<br>&emsp;&emsp;注意点：<br>&emsp;&emsp;（1）系统给光栅化缓存分配了一个固定的大小，因此不能过度使用，如果超出了缓存也会造成离屏渲染。<br>&emsp;&emsp;（2）缓存的时间为100ms，因此如果在100ms内没有使用缓存的对象，则会从缓存中清除。  </p>\n<h2 id=\"color-copied-images（图片颜色格式）\"><a href=\"#color-copied-images（图片颜色格式）\" class=\"headerlink\" title=\"color copied images（图片颜色格式）\"></a>color copied images（图片颜色格式）</h2><p>苹果给出的官网解释：<br>”If an image is in a color format that the GPU can not directly work with, it will be converted in the CPU.”<br>&emsp;&emsp;翻译过来就是：苹果的GPU只解析 32bit 的颜色格式。<br>&emsp;&emsp;如果你放一张图片，而它的颜色格式不是 32bit ，CPU会先进行颜色格式转换，再让GPU渲染。这样无形中就消耗了CPU部分性能。<br>&emsp;&emsp;解决办法：<br>&emsp;&emsp;1. 让设计师给图的时候注意要是32bit的。<br>&emsp;&emsp;2. 再开一个异步线程去处理颜色格式的转换。<br>&emsp;&emsp;（还是第一个办法好）  </p>\n<h2 id=\"Color-Non-Standard-Surface-Formats（颜色非标准表面格式）\"><a href=\"#Color-Non-Standard-Surface-Formats（颜色非标准表面格式）\" class=\"headerlink\" title=\"Color Non-Standard Surface Formats（颜色非标准表面格式）\"></a>Color Non-Standard Surface Formats（颜色非标准表面格式）</h2><p>&emsp;&emsp;没查到时嘎哈的，只知道大概跟文本的显示有关。</p>\n<h2 id=\"Color-Immediately（立即执行颜色刷新）\"><a href=\"#Color-Immediately（立即执行颜色刷新）\" class=\"headerlink\" title=\"Color Immediately（立即执行颜色刷新）\"></a>Color Immediately（立即执行颜色刷新）</h2><p>&emsp;&emsp;默认的颜色刷新有10ms延迟，这个选项可以去掉这个延迟，某些情况下调试可能会用到。</p>\n<h2 id=\"Color-Misaligned-Images-图片大小不符\"><a href=\"#Color-Misaligned-Images-图片大小不符\" class=\"headerlink\" title=\"Color Misaligned Images(图片大小不符)\"></a>Color Misaligned Images(图片大小不符)</h2><p>&emsp;&emsp;当展示的图片和容器的大小不匹配时image会被标黄，尽量用大小符合的图片，不然会消耗资源对图片进行压缩或放大。  </p>\n<h2 id=\"Color-Offscreen-Rendered-Yellow（离屏渲染）\"><a href=\"#Color-Offscreen-Rendered-Yellow（离屏渲染）\" class=\"headerlink\" title=\"Color Offscreen-Rendered Yellow（离屏渲染）\"></a>Color Offscreen-Rendered Yellow（离屏渲染）</h2><p>&emsp;&emsp;参考文章：<a href=\"https://chirenhua.github.io/2016/10/22/iOS-离屏渲染带来的性能问题和解决办法/\">iOS-离屏渲染带来的性能问题和解决办法</a></p>\n<h2 id=\"Color-Compositing-Fast-Path-Blue-快速路径\"><a href=\"#Color-Compositing-Fast-Path-Blue-快速路径\" class=\"headerlink\" title=\"Color Compositing Fast-Path Blue (快速路径)\"></a>Color Compositing Fast-Path Blue (快速路径)</h2><p>&emsp;&emsp;标记由硬件绘制的路径为蓝色，蓝色越多越好.</p>\n<h2 id=\"Flash-Updated-Regions-重绘区域\"><a href=\"#Flash-Updated-Regions-重绘区域\" class=\"headerlink\" title=\"Flash Updated Regions (重绘区域)\"></a>Flash Updated Regions (重绘区域)</h2><p>&emsp;&emsp;这个选项会对重绘的内容高亮成黄色,重绘就是指使用Core Graphics绘制，绘制会损耗一定的性能，因此重绘区域应该越小越好，对于未发生变化的内容则不应该重绘。</p>\n"},{"title":"WWDC 2017笔记—Drag and Drop","date":"2017-07-19T10:52:40.000Z","_content":"![Drag and Drop Logo](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%20Logo.png)  \n# Drag and Drop\n&emsp;&emsp;今年的WWDC，苹果推出了一个新的功能—Drag and Drop，通过这个功能，用户可以将数据（一张图片或者一段文字）从一个地方拖拽到另一个地方，这个操作可以在同一个APP里，也可以跨APP，非常方便。但是目前只有iPad能够完美支持，iPhone上暂时还不支持跨应用的拖拽，所有操作都被限制在同一个APP内。  \n&emsp;&emsp;看名字可以知道，Drag and Drop主要分为两部分，这两部分是相对独立的，APP可以只实现Drag或者只实现Drop，可以了两者都实现。那么接下我会分别介绍Drag、Drop以及在TableView和CollectionView下Drag and Drop实现上的差异。  \n## 一. Drag\n&emsp;&emsp;Drag and Drop的整个流程是基于用户与View之间的交互。我们知道，如果想要为一个View添加点击事件，需要为View添加一个UITapGestureRecognizer。与之类似，如果想要让View支持Drag，需要为View添加UIDragInteraction。那么这个UIDragInteraction是什么？  \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2001.png)  \n\n&emsp;&emsp;通过上面这张图我们可以看出，UIDragInteraction其实就是用户和Drag操作之间的中介，我们可以通过实现其代理方法，为Drag提供数据，或者接收整个Drag流程中各种状态的信息。因为UIDragInteraction中集成了手势，所以在实现Drag的过程中需要打开View的userInteractionEnabled属性。  \n&emsp;&emsp;下面这段代码展示了如何为一个imageView添加UIDragInteraction：  \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2002.png)  \n\n&emsp;&emsp;现在这个imageView已经可以支持Drag了，但是这并不表明它可以相应Drag，因为还没有实现相应的代理方法。下面我会列出所有的代理方法，分别说明都是做什么的。  \n\n``` objc\n- (NSArray<UIDragItem *> *)dragInteraction:(UIDragInteraction *)interaction itemsForBeginningSession:(id<UIDragSession>)session;\n\n```\n&emsp;&emsp;这个是Drag里最重要的一个方法，这个方法会为Drag提供数据，如果返回nil，那么Drag会被终止掉。 \n \n``` objc\n- (nullable UITargetedDragPreview *)dragInteraction:(UIDragInteraction *)interaction previewForLiftingItem:(UIDragItem *)item session:(id<UIDragSession>)session;\n\n```\n&emsp;&emsp;在Drag执行过程中，我们会看到一个View被我们拖着走，这个View是可以通过此方法进行替换的。\n\n``` objc\n- (void)dragInteraction:(UIDragInteraction *)interaction willAnimateLiftWithAnimator:(id<UIDragAnimating>)animator session:(id<UIDragSession>)session;\n\n```\n&emsp;&emsp;在触发Drag时，我们需要长按View，此时我们会看到View有一个抬起的状态，在这个抬起的动画将要执行时，会触发此方法。\n \n``` objc\n- (void)dragInteraction:(UIDragInteraction *)interaction sessionWillBegin:(id<UIDragSession>)session;\n\n```\n&emsp;&emsp;Drag已经被触发，准备开始拖动View的时候会触发此方法。\n \n``` objc\n- (BOOL)dragInteraction:(UIDragInteraction *)interaction sessionAllowsMoveOperation:(id<UIDragSession>)session;\n\n```\n&emsp;&emsp;是否允许Drop以Move的方式响应次方法，这个方法只有在同一个APP里进行操作才会生效，因为在不同的APP里Drop只能以copy的方式来响应。这个方法默认返回YES。 \n \n``` objc\n- (BOOL)dragInteraction:(UIDragInteraction *)interaction sessionIsRestrictedToDraggingApplication:(id<UIDragSession>)session;\n\n```\n&emsp;&emsp;决定当前的Drag是否受限于只能被当前APP响应，默认返回NO。 \n \n``` objc\n- (BOOL)dragInteraction:(UIDragInteraction *)interaction prefersFullSizePreviewsForSession:(id<UIDragSession>)session;\n\n```\n&emsp;&emsp;这个方法用来告诉Drag是否需要展示全尺寸的预览图，默认返回NO，如果预览图如果太大系统会替我们进行缩放。 \n \n``` objc\n- (void)dragInteraction:(UIDragInteraction *)interaction sessionDidMove:(id<UIDragSession>)session;\n\n```\n&emsp;&emsp;用户的手指开始移动时会触发此方法，此时可以通过[UIDragSession locationInView:]来获取当前手指的位置。 \n \n``` objc\n- (void)dragInteraction:(UIDragInteraction *)interaction session:(id<UIDragSession>)session willEndWithOperation:(UIDropOperation)operation;\n\n```\n&emsp;&emsp;Drag将要执行完毕时会触发此方法。 \n \n``` objc\n- (void)dragInteraction:(UIDragInteraction *)interaction session:(id<UIDragSession>)session didEndWithOperation:(UIDropOperation)operation;\n\n```\n&emsp;&emsp;Drag已经执行完毕，并且结束动画已经展示完后会触发此方法。 \n \n``` objc\n- (void)dragInteraction:(UIDragInteraction *)interaction sessionDidTransferItems:(id<UIDragSession>)session;\n\n```\n&emsp;&emsp;Drop端如果以copy或者move来响应当前Drag时，会对数据进行转移，当转移操作完成时会触发此方法。 \n \n``` objc\n- (NSArray<UIDragItem *> *)dragInteraction:(UIDragInteraction *)interaction itemsForAddingToSession:(id<UIDragSession>)session withTouchAtPoint:(CGPoint)point;\n\n```\n&emsp;&emsp;这个方法允许用户继续点击View，为现有的Drag添加新的数据。 \n  \n``` objc\n- (nullable id<UIDragSession>)dragInteraction:(UIDragInteraction *)interaction sessionForAddingItems:(NSArray<id<UIDragSession>> *)sessions withTouchAtPoint:(CGPoint)point;\n\n```\n&emsp;&emsp;因为我们可以一次拖动多个Drag出来，所以这个方法可以决定你选中的数据需要添加到哪个Drag 上。 \n  \n``` objc\n- (void)dragInteraction:(UIDragInteraction *)interaction session:(id<UIDragSession>)session willAddItems:(NSArray<UIDragItem *> *)items forInteraction:(UIDragInteraction *)addingInteraction;\n\n```\n&emsp;&emsp;这个方法会在你点击View添加新的数据之前触发。 \n  \n``` objc\n- (nullable UITargetedDragPreview *)dragInteraction:(UIDragInteraction *)interaction previewForCancellingItem:(UIDragItem *)item withDefault:(UITargetedDragPreview *)defaultPreview;\n\n```\n&emsp;&emsp;当一个Drag操作被取消时，我们可以通过这个方法来更改取消时的View。 \n  \n``` objc\n- (void)dragInteraction:(UIDragInteraction *)interaction item:(UIDragItem *)item willAnimateCancelWithAnimator:(id<UIDragAnimating>)animator;\n\n```\n&emsp;&emsp;当一个Drag操作被取消时，会在执行取消动画前触发此方法。 \n \n## 二. Drop\n&emsp;&emsp;Drop是在手指松开后执行的操作，通过下面的图我们可以发现它的结构跟Drag如出一辙。同样都是为View添加Interaction，然后通过Delegate来管理整个流程。  \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2003.png)  \n\n&emsp;&emsp;先看下Drop的生命周期：  \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2004.png)  \n\n&emsp;&emsp;首先当数据被拖动到Drop的区域时，会通过“canHandleSession”方法询问Drop是否想响应这次Drag，如果Drop对数据不感兴趣或者不打算响应，那么这次Drag会在手指松开的时候被取消掉。如果可以响应会触发“sessionDidEnter”方法通知用户的手指已经拖动到Drop的可响应区域内。  \n&emsp;&emsp;当用户手指在Drop区域移动时会不停的触发“sessionDidUpdate”方法来询问打算通过何种方法响应Drag，如果“sessionDidUpdate”返回的是cancel，那么在松开手指时，此次Drag会被取消掉，如果返回copy或者move，那么在手指松开时会触发“performDrop”方法，这时才开始真正的对数据进行处理。  \n&emsp;&emsp;当用户手指移动到Drop区域外时会触发“sessionDidExit”方法，此时松开手指Drop是无法被响应的，当手指重新移动回Drop区域时会重新触发“sessionDidEnter”方法，继续后面的流程。  \n&emsp;&emsp;接下来我们看下UIDropInteractionDelegate下的所有方法：  \n  \n``` objc\n- (BOOL)dropInteraction:(UIDropInteraction *)interaction canHandleSession:(id<UIDropSession>)session;\n\n```\n&emsp;&emsp;这个方法就是Drop生命周期中的第一步，返回一个BOOL值来说明对传递过来的数据是否感兴趣，如果这个方法没有被实现，那么这个方法默认返回YES。但是返回YES并不代表Drop一定会接受这个数据。 \n    \n``` objc\n- (void)dropInteraction:(UIDropInteraction *)interaction sessionDidEnter:(id<UIDropSession>)session;\n\n```\n&emsp;&emsp;手指移动到Drop的响应区域时会触发此方法。 \n    \n``` objc\n- (UIDropProposal *)dropInteraction:(UIDropInteraction *)interaction sessionDidUpdate:(id<UIDropSession>)session;\n\n```\n&emsp;&emsp;这个方法必须实现，它会在“sessionDidEnter”之后触发，我们需要指定其返回值“UIDropProposal”下的“operation”属性，operation有四个值，分别是：“UIDropOperationCancel”、 “UIDropOperationForbidden”、 “UIDropOperationCopy”、 “UIDropOperationMove”我们可以通过下面的图看到其对应的效果。 \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2005.png)  \n    \n**· UIDropOperationCancel：**Drag会被取消掉，不会触发后续的“performDrop”方法。  \n**· UIDropOperationCopy：**数据会进行拷贝操作，但是一般用于不同APP之间的Drag and Drop，如果用户在当前位置松开手指，会触发“performDrop”方法。  \n**· UIDropOperationMove：**只有当“allowsMoveOperation”方法返回YES时，此Operation才会生效，并且按照苹果在注释中的说法，系统并没有对这个Operation赋予特殊的含义，开发者需要自己对数据源进行删除操作，同时在新的位置添加数据，好让数据看起来是移动（Move）了。- -！  \n**· UIDropOperationForbidden：**Drag会被取消掉，同时在Drop Session的右上角会有一个禁止的提示，来提醒用户当前Drop在这个位置是被禁止的。具体什么时候返回“Forbidden”由开发者自行判断，比如当一个“String”类型的数据被拖拽到一个“ImageView”里时，就可以返回“Forbidden”。\n    \n``` objc\n- (void)dropInteraction:(UIDropInteraction *)interaction performDrop:(id<UIDropSession>)session;\n\n```\n&emsp;&emsp;当用户在Drop的响应区域松开手指时会触发此方法，此时才开始真正的处理数据，开发者需要从“session”中通过“loadObjectsOfClass”方法解析出需要的数据，再进行展示。 \n    \n``` objc\n- (void)dropInteraction:(UIDropInteraction *)interaction concludeDrop:(id<UIDropSession>)session;\n\n```\n&emsp;&emsp;这个方法会在Drop执行完成（包括Drop的动画）之后触发，代表Drop操作已经完成。 \n    \n``` objc\n- (void)dropInteraction:(UIDropInteraction *)interaction sessionDidExit:(id<UIDropSession>)session;\n\n```\n&emsp;&emsp;当用户手指移出Drop的响应区域时会触发此方法。 \n    \n``` objc\n- (void)dropInteraction:(UIDropInteraction *)interaction sessionDidEnd:(id<UIDropSession>)session;\n\n```\n&emsp;&emsp;当Drop操作彻底结束时会触发此方法，无论是成功还是失败。 \n    \n``` objc\n- (nullable UITargetedDragPreview *)dropInteraction:(UIDropInteraction *)interaction previewForDroppingItem:(UIDragItem *)item withDefault:(UITargetedDragPreview *)defaultPreview;\n\n```\n&emsp;&emsp;当用户松开手指时，并且Drop已经被成功响应，此时会执行一段Drop的动画，这个动画的View是可以通过这个方法替换的。 \n    \n``` objc\n- (void)dropInteraction:(UIDropInteraction *)interaction item:(UIDragItem *)item willAnimateDropWithAnimator:(id<UIDragAnimating>)animator;\n\n```\n&emsp;&emsp;当用户松开手指时，并且Drop已经被成功响应，此时会执行一段Drop的动画，在这个动画将要执行的时候会触发此方法。  \n\n##  三. Drag and Drop in TableView & CollectionView\n&emsp;&emsp;在TableView和CollectionView中，Drag and Drop的使用跟刚才介绍的大致相同，但是多了一些特有的功能，那么接下来就介绍下TableView和CollectionView独有的一些功能。  \n**1.DropIntent**  \n&emsp;&emsp;DropIntent是Drop过程中在“sessionDidUpdate”方法里跟随“Operation”属性一起返回的一个属性。这个命名很不苹果，看名字根本不知道这个是用来做什么的。其实这个属性是用来确定在用户Drag数据到TableView或者CollectionView中时，cell需要做出什么动作来提示用户。  \n&emsp;&emsp;在TableView中，DropIntent有四个值：  \n**· UITableViewDropIntentUnspecified**  \n**· UITableViewDropIntentInsertAtDestinationIndexPath**  \n**· UITableViewDropIntentInsertIntoDestinationIndexPath**  \n**· UITableViewDropIntentAutomatic**  \n&emsp;&emsp;“Unspecified”表示当前手指所在的位置是不明确的，系统稍后会决定这个数据该放在哪里。\n&emsp;&emsp;“InsertAtDestinationIndexPath”在手指移动过程中会在两个cell之间打开一个空隙，提示用户数据将要插入的位置。效果见下图：  \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2008.gif)  \n\n&emsp;&emsp;“InsertIntoDestinationIndexPath”不会在cell间打开间隙，但是会高亮显示当前手指所在的cell，提示用户当前数据会插入到哪个cell里。效果见下图：  \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2009.gif)  \n\n&emsp;&emsp;“Automatic”会在“InsertAtDestinationIndexPath”和“InsertIntoDestinationIndexPath” 间自己进行选择，当手指在两个cell之间时会打开一个空隙，当手指在cell里时会高亮当前cell。效果见下图：  \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2010.gif)  \n\n&emsp;&emsp;在CollectionView中，DropIntent有三个值：  \n**· UICollectionViewDropIntentUnspecified**  \n**· UICollectionViewDropIntentInsertAtDestinationIndexPath**  \n**· UICollectionViewDropIntentInsertIntoDestinationIndexPath**  \n&emsp;&emsp;CollectionView和TableView的唯一区别就在于CollectionView没有“Automatic”这个效果，其余效果参考TableView。\n\n**2.DropPlaceholder**  \n&emsp;&emsp;TableView和CollectionView另外一个特有的功能是Placeholder。当数据过大时，数据的传输需要一定的时间，当这个时间过长时我们需要给用户一个提示，系统默认会给我们展示一个提示，如下图：  \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2007.png)  \n\n&emsp;&emsp;我们可以看出这个提示是以对话框形式展示的，虽然会给出进度但是这个提示太强了，用户此时只能等待，不能操作界面。所以系统给我们提供了其它方法可以替代这个弹框，这个就是Placeholder。在“performDrop”方法里，系统为我们提供了一个参数：DropCoordinator，它就是实现placeHolder的关键，在”loadObjectOfClass”前，我们先调用“DropCoordinator”下面的方法为collectionView插入一个临时的cell： \n\n    \n``` objc\n- (id<UICollectionViewDropPlaceholderContext>)dropItem:(UIDragItem *)dragItem toPlaceholderInsertedAtIndexPath:(NSIndexPath *)indexPath withReuseIdentifier:(NSString *)reuseIdentifier cellUpdateHandler:(void (^)(__kindof UICollectionViewCell *))cellUpdateHandler;  \n\n```\n \n&emsp;&emsp;在这个cell上我们可以展示进度条或者一个loadingView。当数据加载完毕后，我们再调用“commitInsertionWithDataSourceUpdates:”方法将数据插入到数据源中，替换临时的cell。效果如下图：  \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2006.png)\n\n&emsp;&emsp;最后附上Demo：[Drag and Drop](https://github.com/ChiRenhua/Drag-and-drop)\n","source":"_posts/WWDC-2017笔记—Drag-and-Drop.md","raw":"---\ntitle: WWDC 2017笔记—Drag and Drop\ndate: 2017-07-19 18:52:40\ncategories:\n- iOS开发总结\ntags:\n- iOS\n- WWDC\n---\n![Drag and Drop Logo](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%20Logo.png)  \n# Drag and Drop\n&emsp;&emsp;今年的WWDC，苹果推出了一个新的功能—Drag and Drop，通过这个功能，用户可以将数据（一张图片或者一段文字）从一个地方拖拽到另一个地方，这个操作可以在同一个APP里，也可以跨APP，非常方便。但是目前只有iPad能够完美支持，iPhone上暂时还不支持跨应用的拖拽，所有操作都被限制在同一个APP内。  \n&emsp;&emsp;看名字可以知道，Drag and Drop主要分为两部分，这两部分是相对独立的，APP可以只实现Drag或者只实现Drop，可以了两者都实现。那么接下我会分别介绍Drag、Drop以及在TableView和CollectionView下Drag and Drop实现上的差异。  \n## 一. Drag\n&emsp;&emsp;Drag and Drop的整个流程是基于用户与View之间的交互。我们知道，如果想要为一个View添加点击事件，需要为View添加一个UITapGestureRecognizer。与之类似，如果想要让View支持Drag，需要为View添加UIDragInteraction。那么这个UIDragInteraction是什么？  \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2001.png)  \n\n&emsp;&emsp;通过上面这张图我们可以看出，UIDragInteraction其实就是用户和Drag操作之间的中介，我们可以通过实现其代理方法，为Drag提供数据，或者接收整个Drag流程中各种状态的信息。因为UIDragInteraction中集成了手势，所以在实现Drag的过程中需要打开View的userInteractionEnabled属性。  \n&emsp;&emsp;下面这段代码展示了如何为一个imageView添加UIDragInteraction：  \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2002.png)  \n\n&emsp;&emsp;现在这个imageView已经可以支持Drag了，但是这并不表明它可以相应Drag，因为还没有实现相应的代理方法。下面我会列出所有的代理方法，分别说明都是做什么的。  \n\n``` objc\n- (NSArray<UIDragItem *> *)dragInteraction:(UIDragInteraction *)interaction itemsForBeginningSession:(id<UIDragSession>)session;\n\n```\n&emsp;&emsp;这个是Drag里最重要的一个方法，这个方法会为Drag提供数据，如果返回nil，那么Drag会被终止掉。 \n \n``` objc\n- (nullable UITargetedDragPreview *)dragInteraction:(UIDragInteraction *)interaction previewForLiftingItem:(UIDragItem *)item session:(id<UIDragSession>)session;\n\n```\n&emsp;&emsp;在Drag执行过程中，我们会看到一个View被我们拖着走，这个View是可以通过此方法进行替换的。\n\n``` objc\n- (void)dragInteraction:(UIDragInteraction *)interaction willAnimateLiftWithAnimator:(id<UIDragAnimating>)animator session:(id<UIDragSession>)session;\n\n```\n&emsp;&emsp;在触发Drag时，我们需要长按View，此时我们会看到View有一个抬起的状态，在这个抬起的动画将要执行时，会触发此方法。\n \n``` objc\n- (void)dragInteraction:(UIDragInteraction *)interaction sessionWillBegin:(id<UIDragSession>)session;\n\n```\n&emsp;&emsp;Drag已经被触发，准备开始拖动View的时候会触发此方法。\n \n``` objc\n- (BOOL)dragInteraction:(UIDragInteraction *)interaction sessionAllowsMoveOperation:(id<UIDragSession>)session;\n\n```\n&emsp;&emsp;是否允许Drop以Move的方式响应次方法，这个方法只有在同一个APP里进行操作才会生效，因为在不同的APP里Drop只能以copy的方式来响应。这个方法默认返回YES。 \n \n``` objc\n- (BOOL)dragInteraction:(UIDragInteraction *)interaction sessionIsRestrictedToDraggingApplication:(id<UIDragSession>)session;\n\n```\n&emsp;&emsp;决定当前的Drag是否受限于只能被当前APP响应，默认返回NO。 \n \n``` objc\n- (BOOL)dragInteraction:(UIDragInteraction *)interaction prefersFullSizePreviewsForSession:(id<UIDragSession>)session;\n\n```\n&emsp;&emsp;这个方法用来告诉Drag是否需要展示全尺寸的预览图，默认返回NO，如果预览图如果太大系统会替我们进行缩放。 \n \n``` objc\n- (void)dragInteraction:(UIDragInteraction *)interaction sessionDidMove:(id<UIDragSession>)session;\n\n```\n&emsp;&emsp;用户的手指开始移动时会触发此方法，此时可以通过[UIDragSession locationInView:]来获取当前手指的位置。 \n \n``` objc\n- (void)dragInteraction:(UIDragInteraction *)interaction session:(id<UIDragSession>)session willEndWithOperation:(UIDropOperation)operation;\n\n```\n&emsp;&emsp;Drag将要执行完毕时会触发此方法。 \n \n``` objc\n- (void)dragInteraction:(UIDragInteraction *)interaction session:(id<UIDragSession>)session didEndWithOperation:(UIDropOperation)operation;\n\n```\n&emsp;&emsp;Drag已经执行完毕，并且结束动画已经展示完后会触发此方法。 \n \n``` objc\n- (void)dragInteraction:(UIDragInteraction *)interaction sessionDidTransferItems:(id<UIDragSession>)session;\n\n```\n&emsp;&emsp;Drop端如果以copy或者move来响应当前Drag时，会对数据进行转移，当转移操作完成时会触发此方法。 \n \n``` objc\n- (NSArray<UIDragItem *> *)dragInteraction:(UIDragInteraction *)interaction itemsForAddingToSession:(id<UIDragSession>)session withTouchAtPoint:(CGPoint)point;\n\n```\n&emsp;&emsp;这个方法允许用户继续点击View，为现有的Drag添加新的数据。 \n  \n``` objc\n- (nullable id<UIDragSession>)dragInteraction:(UIDragInteraction *)interaction sessionForAddingItems:(NSArray<id<UIDragSession>> *)sessions withTouchAtPoint:(CGPoint)point;\n\n```\n&emsp;&emsp;因为我们可以一次拖动多个Drag出来，所以这个方法可以决定你选中的数据需要添加到哪个Drag 上。 \n  \n``` objc\n- (void)dragInteraction:(UIDragInteraction *)interaction session:(id<UIDragSession>)session willAddItems:(NSArray<UIDragItem *> *)items forInteraction:(UIDragInteraction *)addingInteraction;\n\n```\n&emsp;&emsp;这个方法会在你点击View添加新的数据之前触发。 \n  \n``` objc\n- (nullable UITargetedDragPreview *)dragInteraction:(UIDragInteraction *)interaction previewForCancellingItem:(UIDragItem *)item withDefault:(UITargetedDragPreview *)defaultPreview;\n\n```\n&emsp;&emsp;当一个Drag操作被取消时，我们可以通过这个方法来更改取消时的View。 \n  \n``` objc\n- (void)dragInteraction:(UIDragInteraction *)interaction item:(UIDragItem *)item willAnimateCancelWithAnimator:(id<UIDragAnimating>)animator;\n\n```\n&emsp;&emsp;当一个Drag操作被取消时，会在执行取消动画前触发此方法。 \n \n## 二. Drop\n&emsp;&emsp;Drop是在手指松开后执行的操作，通过下面的图我们可以发现它的结构跟Drag如出一辙。同样都是为View添加Interaction，然后通过Delegate来管理整个流程。  \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2003.png)  \n\n&emsp;&emsp;先看下Drop的生命周期：  \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2004.png)  \n\n&emsp;&emsp;首先当数据被拖动到Drop的区域时，会通过“canHandleSession”方法询问Drop是否想响应这次Drag，如果Drop对数据不感兴趣或者不打算响应，那么这次Drag会在手指松开的时候被取消掉。如果可以响应会触发“sessionDidEnter”方法通知用户的手指已经拖动到Drop的可响应区域内。  \n&emsp;&emsp;当用户手指在Drop区域移动时会不停的触发“sessionDidUpdate”方法来询问打算通过何种方法响应Drag，如果“sessionDidUpdate”返回的是cancel，那么在松开手指时，此次Drag会被取消掉，如果返回copy或者move，那么在手指松开时会触发“performDrop”方法，这时才开始真正的对数据进行处理。  \n&emsp;&emsp;当用户手指移动到Drop区域外时会触发“sessionDidExit”方法，此时松开手指Drop是无法被响应的，当手指重新移动回Drop区域时会重新触发“sessionDidEnter”方法，继续后面的流程。  \n&emsp;&emsp;接下来我们看下UIDropInteractionDelegate下的所有方法：  \n  \n``` objc\n- (BOOL)dropInteraction:(UIDropInteraction *)interaction canHandleSession:(id<UIDropSession>)session;\n\n```\n&emsp;&emsp;这个方法就是Drop生命周期中的第一步，返回一个BOOL值来说明对传递过来的数据是否感兴趣，如果这个方法没有被实现，那么这个方法默认返回YES。但是返回YES并不代表Drop一定会接受这个数据。 \n    \n``` objc\n- (void)dropInteraction:(UIDropInteraction *)interaction sessionDidEnter:(id<UIDropSession>)session;\n\n```\n&emsp;&emsp;手指移动到Drop的响应区域时会触发此方法。 \n    \n``` objc\n- (UIDropProposal *)dropInteraction:(UIDropInteraction *)interaction sessionDidUpdate:(id<UIDropSession>)session;\n\n```\n&emsp;&emsp;这个方法必须实现，它会在“sessionDidEnter”之后触发，我们需要指定其返回值“UIDropProposal”下的“operation”属性，operation有四个值，分别是：“UIDropOperationCancel”、 “UIDropOperationForbidden”、 “UIDropOperationCopy”、 “UIDropOperationMove”我们可以通过下面的图看到其对应的效果。 \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2005.png)  \n    \n**· UIDropOperationCancel：**Drag会被取消掉，不会触发后续的“performDrop”方法。  \n**· UIDropOperationCopy：**数据会进行拷贝操作，但是一般用于不同APP之间的Drag and Drop，如果用户在当前位置松开手指，会触发“performDrop”方法。  \n**· UIDropOperationMove：**只有当“allowsMoveOperation”方法返回YES时，此Operation才会生效，并且按照苹果在注释中的说法，系统并没有对这个Operation赋予特殊的含义，开发者需要自己对数据源进行删除操作，同时在新的位置添加数据，好让数据看起来是移动（Move）了。- -！  \n**· UIDropOperationForbidden：**Drag会被取消掉，同时在Drop Session的右上角会有一个禁止的提示，来提醒用户当前Drop在这个位置是被禁止的。具体什么时候返回“Forbidden”由开发者自行判断，比如当一个“String”类型的数据被拖拽到一个“ImageView”里时，就可以返回“Forbidden”。\n    \n``` objc\n- (void)dropInteraction:(UIDropInteraction *)interaction performDrop:(id<UIDropSession>)session;\n\n```\n&emsp;&emsp;当用户在Drop的响应区域松开手指时会触发此方法，此时才开始真正的处理数据，开发者需要从“session”中通过“loadObjectsOfClass”方法解析出需要的数据，再进行展示。 \n    \n``` objc\n- (void)dropInteraction:(UIDropInteraction *)interaction concludeDrop:(id<UIDropSession>)session;\n\n```\n&emsp;&emsp;这个方法会在Drop执行完成（包括Drop的动画）之后触发，代表Drop操作已经完成。 \n    \n``` objc\n- (void)dropInteraction:(UIDropInteraction *)interaction sessionDidExit:(id<UIDropSession>)session;\n\n```\n&emsp;&emsp;当用户手指移出Drop的响应区域时会触发此方法。 \n    \n``` objc\n- (void)dropInteraction:(UIDropInteraction *)interaction sessionDidEnd:(id<UIDropSession>)session;\n\n```\n&emsp;&emsp;当Drop操作彻底结束时会触发此方法，无论是成功还是失败。 \n    \n``` objc\n- (nullable UITargetedDragPreview *)dropInteraction:(UIDropInteraction *)interaction previewForDroppingItem:(UIDragItem *)item withDefault:(UITargetedDragPreview *)defaultPreview;\n\n```\n&emsp;&emsp;当用户松开手指时，并且Drop已经被成功响应，此时会执行一段Drop的动画，这个动画的View是可以通过这个方法替换的。 \n    \n``` objc\n- (void)dropInteraction:(UIDropInteraction *)interaction item:(UIDragItem *)item willAnimateDropWithAnimator:(id<UIDragAnimating>)animator;\n\n```\n&emsp;&emsp;当用户松开手指时，并且Drop已经被成功响应，此时会执行一段Drop的动画，在这个动画将要执行的时候会触发此方法。  \n\n##  三. Drag and Drop in TableView & CollectionView\n&emsp;&emsp;在TableView和CollectionView中，Drag and Drop的使用跟刚才介绍的大致相同，但是多了一些特有的功能，那么接下来就介绍下TableView和CollectionView独有的一些功能。  \n**1.DropIntent**  \n&emsp;&emsp;DropIntent是Drop过程中在“sessionDidUpdate”方法里跟随“Operation”属性一起返回的一个属性。这个命名很不苹果，看名字根本不知道这个是用来做什么的。其实这个属性是用来确定在用户Drag数据到TableView或者CollectionView中时，cell需要做出什么动作来提示用户。  \n&emsp;&emsp;在TableView中，DropIntent有四个值：  \n**· UITableViewDropIntentUnspecified**  \n**· UITableViewDropIntentInsertAtDestinationIndexPath**  \n**· UITableViewDropIntentInsertIntoDestinationIndexPath**  \n**· UITableViewDropIntentAutomatic**  \n&emsp;&emsp;“Unspecified”表示当前手指所在的位置是不明确的，系统稍后会决定这个数据该放在哪里。\n&emsp;&emsp;“InsertAtDestinationIndexPath”在手指移动过程中会在两个cell之间打开一个空隙，提示用户数据将要插入的位置。效果见下图：  \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2008.gif)  \n\n&emsp;&emsp;“InsertIntoDestinationIndexPath”不会在cell间打开间隙，但是会高亮显示当前手指所在的cell，提示用户当前数据会插入到哪个cell里。效果见下图：  \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2009.gif)  \n\n&emsp;&emsp;“Automatic”会在“InsertAtDestinationIndexPath”和“InsertIntoDestinationIndexPath” 间自己进行选择，当手指在两个cell之间时会打开一个空隙，当手指在cell里时会高亮当前cell。效果见下图：  \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2010.gif)  \n\n&emsp;&emsp;在CollectionView中，DropIntent有三个值：  \n**· UICollectionViewDropIntentUnspecified**  \n**· UICollectionViewDropIntentInsertAtDestinationIndexPath**  \n**· UICollectionViewDropIntentInsertIntoDestinationIndexPath**  \n&emsp;&emsp;CollectionView和TableView的唯一区别就在于CollectionView没有“Automatic”这个效果，其余效果参考TableView。\n\n**2.DropPlaceholder**  \n&emsp;&emsp;TableView和CollectionView另外一个特有的功能是Placeholder。当数据过大时，数据的传输需要一定的时间，当这个时间过长时我们需要给用户一个提示，系统默认会给我们展示一个提示，如下图：  \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2007.png)  \n\n&emsp;&emsp;我们可以看出这个提示是以对话框形式展示的，虽然会给出进度但是这个提示太强了，用户此时只能等待，不能操作界面。所以系统给我们提供了其它方法可以替代这个弹框，这个就是Placeholder。在“performDrop”方法里，系统为我们提供了一个参数：DropCoordinator，它就是实现placeHolder的关键，在”loadObjectOfClass”前，我们先调用“DropCoordinator”下面的方法为collectionView插入一个临时的cell： \n\n    \n``` objc\n- (id<UICollectionViewDropPlaceholderContext>)dropItem:(UIDragItem *)dragItem toPlaceholderInsertedAtIndexPath:(NSIndexPath *)indexPath withReuseIdentifier:(NSString *)reuseIdentifier cellUpdateHandler:(void (^)(__kindof UICollectionViewCell *))cellUpdateHandler;  \n\n```\n \n&emsp;&emsp;在这个cell上我们可以展示进度条或者一个loadingView。当数据加载完毕后，我们再调用“commitInsertionWithDataSourceUpdates:”方法将数据插入到数据源中，替换临时的cell。效果如下图：  \n\n![Drag and Drop](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2006.png)\n\n&emsp;&emsp;最后附上Demo：[Drag and Drop](https://github.com/ChiRenhua/Drag-and-drop)\n","slug":"WWDC-2017笔记—Drag-and-Drop","published":1,"updated":"2017-07-19T10:54:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjat0x9tg0002clqdf3n02fa4","content":"<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%20Logo.png\" alt=\"Drag and Drop Logo\">  </p>\n<h1 id=\"Drag-and-Drop\"><a href=\"#Drag-and-Drop\" class=\"headerlink\" title=\"Drag and Drop\"></a>Drag and Drop</h1><p>&emsp;&emsp;今年的WWDC，苹果推出了一个新的功能—Drag and Drop，通过这个功能，用户可以将数据（一张图片或者一段文字）从一个地方拖拽到另一个地方，这个操作可以在同一个APP里，也可以跨APP，非常方便。但是目前只有iPad能够完美支持，iPhone上暂时还不支持跨应用的拖拽，所有操作都被限制在同一个APP内。<br>&emsp;&emsp;看名字可以知道，Drag and Drop主要分为两部分，这两部分是相对独立的，APP可以只实现Drag或者只实现Drop，可以了两者都实现。那么接下我会分别介绍Drag、Drop以及在TableView和CollectionView下Drag and Drop实现上的差异。  </p>\n<h2 id=\"一-Drag\"><a href=\"#一-Drag\" class=\"headerlink\" title=\"一. Drag\"></a>一. Drag</h2><p>&emsp;&emsp;Drag and Drop的整个流程是基于用户与View之间的交互。我们知道，如果想要为一个View添加点击事件，需要为View添加一个UITapGestureRecognizer。与之类似，如果想要让View支持Drag，需要为View添加UIDragInteraction。那么这个UIDragInteraction是什么？  </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2001.png\" alt=\"Drag and Drop\">  </p>\n<p>&emsp;&emsp;通过上面这张图我们可以看出，UIDragInteraction其实就是用户和Drag操作之间的中介，我们可以通过实现其代理方法，为Drag提供数据，或者接收整个Drag流程中各种状态的信息。因为UIDragInteraction中集成了手势，所以在实现Drag的过程中需要打开View的userInteractionEnabled属性。<br>&emsp;&emsp;下面这段代码展示了如何为一个imageView添加UIDragInteraction：  </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2002.png\" alt=\"Drag and Drop\">  </p>\n<p>&emsp;&emsp;现在这个imageView已经可以支持Drag了，但是这并不表明它可以相应Drag，因为还没有实现相应的代理方法。下面我会列出所有的代理方法，分别说明都是做什么的。  </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">UIDragItem</span> *&gt; *)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction itemsForBeginningSession:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这个是Drag里最重要的一个方法，这个方法会为Drag提供数据，如果返回nil，那么Drag会被终止掉。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">UITargetedDragPreview</span> *)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction previewForLiftingItem:(<span class=\"built_in\">UIDragItem</span> *)item session:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;在Drag执行过程中，我们会看到一个View被我们拖着走，这个View是可以通过此方法进行替换的。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction willAnimateLiftWithAnimator:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragAnimating</span>&gt;)animator session:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;在触发Drag时，我们需要长按View，此时我们会看到View有一个抬起的状态，在这个抬起的动画将要执行时，会触发此方法。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction sessionWillBegin:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;Drag已经被触发，准备开始拖动View的时候会触发此方法。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction sessionAllowsMoveOperation:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;是否允许Drop以Move的方式响应次方法，这个方法只有在同一个APP里进行操作才会生效，因为在不同的APP里Drop只能以copy的方式来响应。这个方法默认返回YES。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction sessionIsRestrictedToDraggingApplication:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;决定当前的Drag是否受限于只能被当前APP响应，默认返回NO。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction prefersFullSizePreviewsForSession:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这个方法用来告诉Drag是否需要展示全尺寸的预览图，默认返回NO，如果预览图如果太大系统会替我们进行缩放。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction sessionDidMove:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;用户的手指开始移动时会触发此方法，此时可以通过[UIDragSession locationInView:]来获取当前手指的位置。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction session:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session willEndWithOperation:(<span class=\"built_in\">UIDropOperation</span>)operation;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;Drag将要执行完毕时会触发此方法。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction session:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session didEndWithOperation:(<span class=\"built_in\">UIDropOperation</span>)operation;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;Drag已经执行完毕，并且结束动画已经展示完后会触发此方法。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction sessionDidTransferItems:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;Drop端如果以copy或者move来响应当前Drag时，会对数据进行转移，当转移操作完成时会触发此方法。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">UIDragItem</span> *&gt; *)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction itemsForAddingToSession:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session withTouchAtPoint:(<span class=\"built_in\">CGPoint</span>)point;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这个方法允许用户继续点击View，为现有的Drag添加新的数据。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction sessionForAddingItems:(<span class=\"built_in\">NSArray</span>&lt;<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;&gt; *)sessions withTouchAtPoint:(<span class=\"built_in\">CGPoint</span>)point;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;因为我们可以一次拖动多个Drag出来，所以这个方法可以决定你选中的数据需要添加到哪个Drag 上。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction session:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session willAddItems:(<span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">UIDragItem</span> *&gt; *)items forInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)addingInteraction;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这个方法会在你点击View添加新的数据之前触发。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">UITargetedDragPreview</span> *)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction previewForCancellingItem:(<span class=\"built_in\">UIDragItem</span> *)item withDefault:(<span class=\"built_in\">UITargetedDragPreview</span> *)defaultPreview;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;当一个Drag操作被取消时，我们可以通过这个方法来更改取消时的View。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction item:(<span class=\"built_in\">UIDragItem</span> *)item willAnimateCancelWithAnimator:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragAnimating</span>&gt;)animator;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;当一个Drag操作被取消时，会在执行取消动画前触发此方法。 </p>\n<h2 id=\"二-Drop\"><a href=\"#二-Drop\" class=\"headerlink\" title=\"二. Drop\"></a>二. Drop</h2><p>&emsp;&emsp;Drop是在手指松开后执行的操作，通过下面的图我们可以发现它的结构跟Drag如出一辙。同样都是为View添加Interaction，然后通过Delegate来管理整个流程。  </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2003.png\" alt=\"Drag and Drop\">  </p>\n<p>&emsp;&emsp;先看下Drop的生命周期：  </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2004.png\" alt=\"Drag and Drop\">  </p>\n<p>&emsp;&emsp;首先当数据被拖动到Drop的区域时，会通过“canHandleSession”方法询问Drop是否想响应这次Drag，如果Drop对数据不感兴趣或者不打算响应，那么这次Drag会在手指松开的时候被取消掉。如果可以响应会触发“sessionDidEnter”方法通知用户的手指已经拖动到Drop的可响应区域内。<br>&emsp;&emsp;当用户手指在Drop区域移动时会不停的触发“sessionDidUpdate”方法来询问打算通过何种方法响应Drag，如果“sessionDidUpdate”返回的是cancel，那么在松开手指时，此次Drag会被取消掉，如果返回copy或者move，那么在手指松开时会触发“performDrop”方法，这时才开始真正的对数据进行处理。<br>&emsp;&emsp;当用户手指移动到Drop区域外时会触发“sessionDidExit”方法，此时松开手指Drop是无法被响应的，当手指重新移动回Drop区域时会重新触发“sessionDidEnter”方法，继续后面的流程。<br>&emsp;&emsp;接下来我们看下UIDropInteractionDelegate下的所有方法：  </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)dropInteraction:(<span class=\"built_in\">UIDropInteraction</span> *)interaction canHandleSession:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDropSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这个方法就是Drop生命周期中的第一步，返回一个BOOL值来说明对传递过来的数据是否感兴趣，如果这个方法没有被实现，那么这个方法默认返回YES。但是返回YES并不代表Drop一定会接受这个数据。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dropInteraction:(<span class=\"built_in\">UIDropInteraction</span> *)interaction sessionDidEnter:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDropSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;手指移动到Drop的响应区域时会触发此方法。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">UIDropProposal</span> *)dropInteraction:(<span class=\"built_in\">UIDropInteraction</span> *)interaction sessionDidUpdate:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDropSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这个方法必须实现，它会在“sessionDidEnter”之后触发，我们需要指定其返回值“UIDropProposal”下的“operation”属性，operation有四个值，分别是：“UIDropOperationCancel”、 “UIDropOperationForbidden”、 “UIDropOperationCopy”、 “UIDropOperationMove”我们可以通过下面的图看到其对应的效果。 </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2005.png\" alt=\"Drag and Drop\">  </p>\n<p><strong>· UIDropOperationCancel：</strong>Drag会被取消掉，不会触发后续的“performDrop”方法。<br><strong>· UIDropOperationCopy：</strong>数据会进行拷贝操作，但是一般用于不同APP之间的Drag and Drop，如果用户在当前位置松开手指，会触发“performDrop”方法。<br><strong>· UIDropOperationMove：</strong>只有当“allowsMoveOperation”方法返回YES时，此Operation才会生效，并且按照苹果在注释中的说法，系统并没有对这个Operation赋予特殊的含义，开发者需要自己对数据源进行删除操作，同时在新的位置添加数据，好让数据看起来是移动（Move）了。- -！<br><strong>· UIDropOperationForbidden：</strong>Drag会被取消掉，同时在Drop Session的右上角会有一个禁止的提示，来提醒用户当前Drop在这个位置是被禁止的。具体什么时候返回“Forbidden”由开发者自行判断，比如当一个“String”类型的数据被拖拽到一个“ImageView”里时，就可以返回“Forbidden”。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dropInteraction:(<span class=\"built_in\">UIDropInteraction</span> *)interaction performDrop:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDropSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;当用户在Drop的响应区域松开手指时会触发此方法，此时才开始真正的处理数据，开发者需要从“session”中通过“loadObjectsOfClass”方法解析出需要的数据，再进行展示。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dropInteraction:(<span class=\"built_in\">UIDropInteraction</span> *)interaction concludeDrop:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDropSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这个方法会在Drop执行完成（包括Drop的动画）之后触发，代表Drop操作已经完成。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dropInteraction:(<span class=\"built_in\">UIDropInteraction</span> *)interaction sessionDidExit:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDropSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;当用户手指移出Drop的响应区域时会触发此方法。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dropInteraction:(<span class=\"built_in\">UIDropInteraction</span> *)interaction sessionDidEnd:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDropSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;当Drop操作彻底结束时会触发此方法，无论是成功还是失败。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">UITargetedDragPreview</span> *)dropInteraction:(<span class=\"built_in\">UIDropInteraction</span> *)interaction previewForDroppingItem:(<span class=\"built_in\">UIDragItem</span> *)item withDefault:(<span class=\"built_in\">UITargetedDragPreview</span> *)defaultPreview;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;当用户松开手指时，并且Drop已经被成功响应，此时会执行一段Drop的动画，这个动画的View是可以通过这个方法替换的。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dropInteraction:(<span class=\"built_in\">UIDropInteraction</span> *)interaction item:(<span class=\"built_in\">UIDragItem</span> *)item willAnimateDropWithAnimator:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragAnimating</span>&gt;)animator;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;当用户松开手指时，并且Drop已经被成功响应，此时会执行一段Drop的动画，在这个动画将要执行的时候会触发此方法。  </p>\n<h2 id=\"三-Drag-and-Drop-in-TableView-amp-CollectionView\"><a href=\"#三-Drag-and-Drop-in-TableView-amp-CollectionView\" class=\"headerlink\" title=\"三. Drag and Drop in TableView &amp; CollectionView\"></a>三. Drag and Drop in TableView &amp; CollectionView</h2><p>&emsp;&emsp;在TableView和CollectionView中，Drag and Drop的使用跟刚才介绍的大致相同，但是多了一些特有的功能，那么接下来就介绍下TableView和CollectionView独有的一些功能。<br><strong>1.DropIntent</strong><br>&emsp;&emsp;DropIntent是Drop过程中在“sessionDidUpdate”方法里跟随“Operation”属性一起返回的一个属性。这个命名很不苹果，看名字根本不知道这个是用来做什么的。其实这个属性是用来确定在用户Drag数据到TableView或者CollectionView中时，cell需要做出什么动作来提示用户。<br>&emsp;&emsp;在TableView中，DropIntent有四个值：<br><strong>· UITableViewDropIntentUnspecified</strong><br><strong>· UITableViewDropIntentInsertAtDestinationIndexPath</strong><br><strong>· UITableViewDropIntentInsertIntoDestinationIndexPath</strong><br><strong>· UITableViewDropIntentAutomatic</strong><br>&emsp;&emsp;“Unspecified”表示当前手指所在的位置是不明确的，系统稍后会决定这个数据该放在哪里。<br>&emsp;&emsp;“InsertAtDestinationIndexPath”在手指移动过程中会在两个cell之间打开一个空隙，提示用户数据将要插入的位置。效果见下图：  </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2008.gif\" alt=\"Drag and Drop\">  </p>\n<p>&emsp;&emsp;“InsertIntoDestinationIndexPath”不会在cell间打开间隙，但是会高亮显示当前手指所在的cell，提示用户当前数据会插入到哪个cell里。效果见下图：  </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2009.gif\" alt=\"Drag and Drop\">  </p>\n<p>&emsp;&emsp;“Automatic”会在“InsertAtDestinationIndexPath”和“InsertIntoDestinationIndexPath” 间自己进行选择，当手指在两个cell之间时会打开一个空隙，当手指在cell里时会高亮当前cell。效果见下图：  </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2010.gif\" alt=\"Drag and Drop\">  </p>\n<p>&emsp;&emsp;在CollectionView中，DropIntent有三个值：<br><strong>· UICollectionViewDropIntentUnspecified</strong><br><strong>· UICollectionViewDropIntentInsertAtDestinationIndexPath</strong><br><strong>· UICollectionViewDropIntentInsertIntoDestinationIndexPath</strong><br>&emsp;&emsp;CollectionView和TableView的唯一区别就在于CollectionView没有“Automatic”这个效果，其余效果参考TableView。</p>\n<p><strong>2.DropPlaceholder</strong><br>&emsp;&emsp;TableView和CollectionView另外一个特有的功能是Placeholder。当数据过大时，数据的传输需要一定的时间，当这个时间过长时我们需要给用户一个提示，系统默认会给我们展示一个提示，如下图：  </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2007.png\" alt=\"Drag and Drop\">  </p>\n<p>&emsp;&emsp;我们可以看出这个提示是以对话框形式展示的，虽然会给出进度但是这个提示太强了，用户此时只能等待，不能操作界面。所以系统给我们提供了其它方法可以替代这个弹框，这个就是Placeholder。在“performDrop”方法里，系统为我们提供了一个参数：DropCoordinator，它就是实现placeHolder的关键，在”loadObjectOfClass”前，我们先调用“DropCoordinator”下面的方法为collectionView插入一个临时的cell： </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UICollectionViewDropPlaceholderContext</span>&gt;)dropItem:(<span class=\"built_in\">UIDragItem</span> *)dragItem toPlaceholderInsertedAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath withReuseIdentifier:(<span class=\"built_in\">NSString</span> *)reuseIdentifier cellUpdateHandler:(<span class=\"keyword\">void</span> (^)(__kindof <span class=\"built_in\">UICollectionViewCell</span> *))cellUpdateHandler;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;在这个cell上我们可以展示进度条或者一个loadingView。当数据加载完毕后，我们再调用“commitInsertionWithDataSourceUpdates:”方法将数据插入到数据源中，替换临时的cell。效果如下图：  </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2006.png\" alt=\"Drag and Drop\"></p>\n<p>&emsp;&emsp;最后附上Demo：<a href=\"https://github.com/ChiRenhua/Drag-and-drop\" target=\"_blank\" rel=\"external\">Drag and Drop</a></p>\n","excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%20Logo.png\" alt=\"Drag and Drop Logo\">  </p>\n<h1 id=\"Drag-and-Drop\"><a href=\"#Drag-and-Drop\" class=\"headerlink\" title=\"Drag and Drop\"></a>Drag and Drop</h1><p>&emsp;&emsp;今年的WWDC，苹果推出了一个新的功能—Drag and Drop，通过这个功能，用户可以将数据（一张图片或者一段文字）从一个地方拖拽到另一个地方，这个操作可以在同一个APP里，也可以跨APP，非常方便。但是目前只有iPad能够完美支持，iPhone上暂时还不支持跨应用的拖拽，所有操作都被限制在同一个APP内。<br>&emsp;&emsp;看名字可以知道，Drag and Drop主要分为两部分，这两部分是相对独立的，APP可以只实现Drag或者只实现Drop，可以了两者都实现。那么接下我会分别介绍Drag、Drop以及在TableView和CollectionView下Drag and Drop实现上的差异。  </p>\n<h2 id=\"一-Drag\"><a href=\"#一-Drag\" class=\"headerlink\" title=\"一. Drag\"></a>一. Drag</h2><p>&emsp;&emsp;Drag and Drop的整个流程是基于用户与View之间的交互。我们知道，如果想要为一个View添加点击事件，需要为View添加一个UITapGestureRecognizer。与之类似，如果想要让View支持Drag，需要为View添加UIDragInteraction。那么这个UIDragInteraction是什么？  </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2001.png\" alt=\"Drag and Drop\">  </p>\n<p>&emsp;&emsp;通过上面这张图我们可以看出，UIDragInteraction其实就是用户和Drag操作之间的中介，我们可以通过实现其代理方法，为Drag提供数据，或者接收整个Drag流程中各种状态的信息。因为UIDragInteraction中集成了手势，所以在实现Drag的过程中需要打开View的userInteractionEnabled属性。<br>&emsp;&emsp;下面这段代码展示了如何为一个imageView添加UIDragInteraction：  </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2002.png\" alt=\"Drag and Drop\">  </p>\n<p>&emsp;&emsp;现在这个imageView已经可以支持Drag了，但是这并不表明它可以相应Drag，因为还没有实现相应的代理方法。下面我会列出所有的代理方法，分别说明都是做什么的。  </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">UIDragItem</span> *&gt; *)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction itemsForBeginningSession:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这个是Drag里最重要的一个方法，这个方法会为Drag提供数据，如果返回nil，那么Drag会被终止掉。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">UITargetedDragPreview</span> *)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction previewForLiftingItem:(<span class=\"built_in\">UIDragItem</span> *)item session:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;在Drag执行过程中，我们会看到一个View被我们拖着走，这个View是可以通过此方法进行替换的。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction willAnimateLiftWithAnimator:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragAnimating</span>&gt;)animator session:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;在触发Drag时，我们需要长按View，此时我们会看到View有一个抬起的状态，在这个抬起的动画将要执行时，会触发此方法。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction sessionWillBegin:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;Drag已经被触发，准备开始拖动View的时候会触发此方法。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction sessionAllowsMoveOperation:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;是否允许Drop以Move的方式响应次方法，这个方法只有在同一个APP里进行操作才会生效，因为在不同的APP里Drop只能以copy的方式来响应。这个方法默认返回YES。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction sessionIsRestrictedToDraggingApplication:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;决定当前的Drag是否受限于只能被当前APP响应，默认返回NO。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction prefersFullSizePreviewsForSession:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这个方法用来告诉Drag是否需要展示全尺寸的预览图，默认返回NO，如果预览图如果太大系统会替我们进行缩放。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction sessionDidMove:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;用户的手指开始移动时会触发此方法，此时可以通过[UIDragSession locationInView:]来获取当前手指的位置。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction session:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session willEndWithOperation:(<span class=\"built_in\">UIDropOperation</span>)operation;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;Drag将要执行完毕时会触发此方法。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction session:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session didEndWithOperation:(<span class=\"built_in\">UIDropOperation</span>)operation;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;Drag已经执行完毕，并且结束动画已经展示完后会触发此方法。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction sessionDidTransferItems:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;Drop端如果以copy或者move来响应当前Drag时，会对数据进行转移，当转移操作完成时会触发此方法。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">UIDragItem</span> *&gt; *)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction itemsForAddingToSession:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session withTouchAtPoint:(<span class=\"built_in\">CGPoint</span>)point;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这个方法允许用户继续点击View，为现有的Drag添加新的数据。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction sessionForAddingItems:(<span class=\"built_in\">NSArray</span>&lt;<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;&gt; *)sessions withTouchAtPoint:(<span class=\"built_in\">CGPoint</span>)point;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;因为我们可以一次拖动多个Drag出来，所以这个方法可以决定你选中的数据需要添加到哪个Drag 上。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction session:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragSession</span>&gt;)session willAddItems:(<span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">UIDragItem</span> *&gt; *)items forInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)addingInteraction;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这个方法会在你点击View添加新的数据之前触发。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">UITargetedDragPreview</span> *)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction previewForCancellingItem:(<span class=\"built_in\">UIDragItem</span> *)item withDefault:(<span class=\"built_in\">UITargetedDragPreview</span> *)defaultPreview;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;当一个Drag操作被取消时，我们可以通过这个方法来更改取消时的View。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dragInteraction:(<span class=\"built_in\">UIDragInteraction</span> *)interaction item:(<span class=\"built_in\">UIDragItem</span> *)item willAnimateCancelWithAnimator:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragAnimating</span>&gt;)animator;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;当一个Drag操作被取消时，会在执行取消动画前触发此方法。 </p>\n<h2 id=\"二-Drop\"><a href=\"#二-Drop\" class=\"headerlink\" title=\"二. Drop\"></a>二. Drop</h2><p>&emsp;&emsp;Drop是在手指松开后执行的操作，通过下面的图我们可以发现它的结构跟Drag如出一辙。同样都是为View添加Interaction，然后通过Delegate来管理整个流程。  </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2003.png\" alt=\"Drag and Drop\">  </p>\n<p>&emsp;&emsp;先看下Drop的生命周期：  </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2004.png\" alt=\"Drag and Drop\">  </p>\n<p>&emsp;&emsp;首先当数据被拖动到Drop的区域时，会通过“canHandleSession”方法询问Drop是否想响应这次Drag，如果Drop对数据不感兴趣或者不打算响应，那么这次Drag会在手指松开的时候被取消掉。如果可以响应会触发“sessionDidEnter”方法通知用户的手指已经拖动到Drop的可响应区域内。<br>&emsp;&emsp;当用户手指在Drop区域移动时会不停的触发“sessionDidUpdate”方法来询问打算通过何种方法响应Drag，如果“sessionDidUpdate”返回的是cancel，那么在松开手指时，此次Drag会被取消掉，如果返回copy或者move，那么在手指松开时会触发“performDrop”方法，这时才开始真正的对数据进行处理。<br>&emsp;&emsp;当用户手指移动到Drop区域外时会触发“sessionDidExit”方法，此时松开手指Drop是无法被响应的，当手指重新移动回Drop区域时会重新触发“sessionDidEnter”方法，继续后面的流程。<br>&emsp;&emsp;接下来我们看下UIDropInteractionDelegate下的所有方法：  </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)dropInteraction:(<span class=\"built_in\">UIDropInteraction</span> *)interaction canHandleSession:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDropSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这个方法就是Drop生命周期中的第一步，返回一个BOOL值来说明对传递过来的数据是否感兴趣，如果这个方法没有被实现，那么这个方法默认返回YES。但是返回YES并不代表Drop一定会接受这个数据。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dropInteraction:(<span class=\"built_in\">UIDropInteraction</span> *)interaction sessionDidEnter:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDropSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;手指移动到Drop的响应区域时会触发此方法。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">UIDropProposal</span> *)dropInteraction:(<span class=\"built_in\">UIDropInteraction</span> *)interaction sessionDidUpdate:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDropSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这个方法必须实现，它会在“sessionDidEnter”之后触发，我们需要指定其返回值“UIDropProposal”下的“operation”属性，operation有四个值，分别是：“UIDropOperationCancel”、 “UIDropOperationForbidden”、 “UIDropOperationCopy”、 “UIDropOperationMove”我们可以通过下面的图看到其对应的效果。 </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2005.png\" alt=\"Drag and Drop\">  </p>\n<p><strong>· UIDropOperationCancel：</strong>Drag会被取消掉，不会触发后续的“performDrop”方法。<br><strong>· UIDropOperationCopy：</strong>数据会进行拷贝操作，但是一般用于不同APP之间的Drag and Drop，如果用户在当前位置松开手指，会触发“performDrop”方法。<br><strong>· UIDropOperationMove：</strong>只有当“allowsMoveOperation”方法返回YES时，此Operation才会生效，并且按照苹果在注释中的说法，系统并没有对这个Operation赋予特殊的含义，开发者需要自己对数据源进行删除操作，同时在新的位置添加数据，好让数据看起来是移动（Move）了。- -！<br><strong>· UIDropOperationForbidden：</strong>Drag会被取消掉，同时在Drop Session的右上角会有一个禁止的提示，来提醒用户当前Drop在这个位置是被禁止的。具体什么时候返回“Forbidden”由开发者自行判断，比如当一个“String”类型的数据被拖拽到一个“ImageView”里时，就可以返回“Forbidden”。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dropInteraction:(<span class=\"built_in\">UIDropInteraction</span> *)interaction performDrop:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDropSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;当用户在Drop的响应区域松开手指时会触发此方法，此时才开始真正的处理数据，开发者需要从“session”中通过“loadObjectsOfClass”方法解析出需要的数据，再进行展示。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dropInteraction:(<span class=\"built_in\">UIDropInteraction</span> *)interaction concludeDrop:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDropSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这个方法会在Drop执行完成（包括Drop的动画）之后触发，代表Drop操作已经完成。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dropInteraction:(<span class=\"built_in\">UIDropInteraction</span> *)interaction sessionDidExit:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDropSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;当用户手指移出Drop的响应区域时会触发此方法。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dropInteraction:(<span class=\"built_in\">UIDropInteraction</span> *)interaction sessionDidEnd:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDropSession</span>&gt;)session;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;当Drop操作彻底结束时会触发此方法，无论是成功还是失败。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">UITargetedDragPreview</span> *)dropInteraction:(<span class=\"built_in\">UIDropInteraction</span> *)interaction previewForDroppingItem:(<span class=\"built_in\">UIDragItem</span> *)item withDefault:(<span class=\"built_in\">UITargetedDragPreview</span> *)defaultPreview;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;当用户松开手指时，并且Drop已经被成功响应，此时会执行一段Drop的动画，这个动画的View是可以通过这个方法替换的。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dropInteraction:(<span class=\"built_in\">UIDropInteraction</span> *)interaction item:(<span class=\"built_in\">UIDragItem</span> *)item willAnimateDropWithAnimator:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIDragAnimating</span>&gt;)animator;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;当用户松开手指时，并且Drop已经被成功响应，此时会执行一段Drop的动画，在这个动画将要执行的时候会触发此方法。  </p>\n<h2 id=\"三-Drag-and-Drop-in-TableView-amp-CollectionView\"><a href=\"#三-Drag-and-Drop-in-TableView-amp-CollectionView\" class=\"headerlink\" title=\"三. Drag and Drop in TableView &amp; CollectionView\"></a>三. Drag and Drop in TableView &amp; CollectionView</h2><p>&emsp;&emsp;在TableView和CollectionView中，Drag and Drop的使用跟刚才介绍的大致相同，但是多了一些特有的功能，那么接下来就介绍下TableView和CollectionView独有的一些功能。<br><strong>1.DropIntent</strong><br>&emsp;&emsp;DropIntent是Drop过程中在“sessionDidUpdate”方法里跟随“Operation”属性一起返回的一个属性。这个命名很不苹果，看名字根本不知道这个是用来做什么的。其实这个属性是用来确定在用户Drag数据到TableView或者CollectionView中时，cell需要做出什么动作来提示用户。<br>&emsp;&emsp;在TableView中，DropIntent有四个值：<br><strong>· UITableViewDropIntentUnspecified</strong><br><strong>· UITableViewDropIntentInsertAtDestinationIndexPath</strong><br><strong>· UITableViewDropIntentInsertIntoDestinationIndexPath</strong><br><strong>· UITableViewDropIntentAutomatic</strong><br>&emsp;&emsp;“Unspecified”表示当前手指所在的位置是不明确的，系统稍后会决定这个数据该放在哪里。<br>&emsp;&emsp;“InsertAtDestinationIndexPath”在手指移动过程中会在两个cell之间打开一个空隙，提示用户数据将要插入的位置。效果见下图：  </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2008.gif\" alt=\"Drag and Drop\">  </p>\n<p>&emsp;&emsp;“InsertIntoDestinationIndexPath”不会在cell间打开间隙，但是会高亮显示当前手指所在的cell，提示用户当前数据会插入到哪个cell里。效果见下图：  </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2009.gif\" alt=\"Drag and Drop\">  </p>\n<p>&emsp;&emsp;“Automatic”会在“InsertAtDestinationIndexPath”和“InsertIntoDestinationIndexPath” 间自己进行选择，当手指在两个cell之间时会打开一个空隙，当手指在cell里时会高亮当前cell。效果见下图：  </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2010.gif\" alt=\"Drag and Drop\">  </p>\n<p>&emsp;&emsp;在CollectionView中，DropIntent有三个值：<br><strong>· UICollectionViewDropIntentUnspecified</strong><br><strong>· UICollectionViewDropIntentInsertAtDestinationIndexPath</strong><br><strong>· UICollectionViewDropIntentInsertIntoDestinationIndexPath</strong><br>&emsp;&emsp;CollectionView和TableView的唯一区别就在于CollectionView没有“Automatic”这个效果，其余效果参考TableView。</p>\n<p><strong>2.DropPlaceholder</strong><br>&emsp;&emsp;TableView和CollectionView另外一个特有的功能是Placeholder。当数据过大时，数据的传输需要一定的时间，当这个时间过长时我们需要给用户一个提示，系统默认会给我们展示一个提示，如下图：  </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2007.png\" alt=\"Drag and Drop\">  </p>\n<p>&emsp;&emsp;我们可以看出这个提示是以对话框形式展示的，虽然会给出进度但是这个提示太强了，用户此时只能等待，不能操作界面。所以系统给我们提供了其它方法可以替代这个弹框，这个就是Placeholder。在“performDrop”方法里，系统为我们提供了一个参数：DropCoordinator，它就是实现placeHolder的关键，在”loadObjectOfClass”前，我们先调用“DropCoordinator”下面的方法为collectionView插入一个临时的cell： </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UICollectionViewDropPlaceholderContext</span>&gt;)dropItem:(<span class=\"built_in\">UIDragItem</span> *)dragItem toPlaceholderInsertedAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath withReuseIdentifier:(<span class=\"built_in\">NSString</span> *)reuseIdentifier cellUpdateHandler:(<span class=\"keyword\">void</span> (^)(__kindof <span class=\"built_in\">UICollectionViewCell</span> *))cellUpdateHandler;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;在这个cell上我们可以展示进度条或者一个loadingView。当数据加载完毕后，我们再调用“commitInsertionWithDataSourceUpdates:”方法将数据插入到数据源中，替换临时的cell。效果如下图：  </p>\n<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Drag%20and%20Drop/Drag%20and%20Drop%2006.png\" alt=\"Drag and Drop\"></p>\n<p>&emsp;&emsp;最后附上Demo：<a href=\"https://github.com/ChiRenhua/Drag-and-drop\">Drag and Drop</a></p>\n"},{"title":"Xcode-真机编译iOS7方法","date":"2017-05-15T13:00:30.000Z","_content":"![iOS7_Logo](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Xcode-%E7%9C%9F%E6%9C%BA%E7%BC%96%E8%AF%91iOS7%E6%96%B9%E6%B3%95/ios-7-logo.png)  \n## 真机编译iOS7的方法  \n步骤炒鸡简单：   \n1. 将iOS7.0/iOS7.1的SDK放到Xcode这个目录下(iOS7 SDK请百度自行下载)：  \n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport；\n2. 进入目录：  \n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk  打开“iPhoneOS.sdk”文件夹和“SDKSettings.plist”文件的读写权限；  \n3. 打开“SDKSettings.plist”文件，按图添加7.0/7.1（⚠️一定要按照从小到大的顺序添加）然后重启Xcode就可以了。  \n![iOS7_Debug](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Xcode-%E7%9C%9F%E6%9C%BA%E7%BC%96%E8%AF%91iOS7%E6%96%B9%E6%B3%95/iOS7_debug.png)\n","source":"_posts/Xcode-真机编译iOS7方法.md","raw":"---\ntitle: Xcode-真机编译iOS7方法\ndate: 2017-05-15 21:00:30  \n\ncategories:\n- Xcode工具\ntags:\n- 工具\n- Xcode\n- iOS7\n---\n![iOS7_Logo](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Xcode-%E7%9C%9F%E6%9C%BA%E7%BC%96%E8%AF%91iOS7%E6%96%B9%E6%B3%95/ios-7-logo.png)  \n## 真机编译iOS7的方法  \n步骤炒鸡简单：   \n1. 将iOS7.0/iOS7.1的SDK放到Xcode这个目录下(iOS7 SDK请百度自行下载)：  \n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport；\n2. 进入目录：  \n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk  打开“iPhoneOS.sdk”文件夹和“SDKSettings.plist”文件的读写权限；  \n3. 打开“SDKSettings.plist”文件，按图添加7.0/7.1（⚠️一定要按照从小到大的顺序添加）然后重启Xcode就可以了。  \n![iOS7_Debug](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Xcode-%E7%9C%9F%E6%9C%BA%E7%BC%96%E8%AF%91iOS7%E6%96%B9%E6%B3%95/iOS7_debug.png)\n","slug":"Xcode-真机编译iOS7方法","published":1,"updated":"2017-05-15T13:19:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjat0x9ua0005clqdb8aljw2b","content":"<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Xcode-%E7%9C%9F%E6%9C%BA%E7%BC%96%E8%AF%91iOS7%E6%96%B9%E6%B3%95/ios-7-logo.png\" alt=\"iOS7_Logo\">  </p>\n<h2 id=\"真机编译iOS7的方法\"><a href=\"#真机编译iOS7的方法\" class=\"headerlink\" title=\"真机编译iOS7的方法\"></a>真机编译iOS7的方法</h2><p>步骤炒鸡简单：   </p>\n<ol>\n<li>将iOS7.0/iOS7.1的SDK放到Xcode这个目录下(iOS7 SDK请百度自行下载)：<br>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport；</li>\n<li>进入目录：<br>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk  打开“iPhoneOS.sdk”文件夹和“SDKSettings.plist”文件的读写权限；  </li>\n<li>打开“SDKSettings.plist”文件，按图添加7.0/7.1（⚠️一定要按照从小到大的顺序添加）然后重启Xcode就可以了。<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Xcode-%E7%9C%9F%E6%9C%BA%E7%BC%96%E8%AF%91iOS7%E6%96%B9%E6%B3%95/iOS7_debug.png\" alt=\"iOS7_Debug\"></li>\n</ol>\n","excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Xcode-%E7%9C%9F%E6%9C%BA%E7%BC%96%E8%AF%91iOS7%E6%96%B9%E6%B3%95/ios-7-logo.png\" alt=\"iOS7_Logo\">  </p>\n<h2 id=\"真机编译iOS7的方法\"><a href=\"#真机编译iOS7的方法\" class=\"headerlink\" title=\"真机编译iOS7的方法\"></a>真机编译iOS7的方法</h2><p>步骤炒鸡简单：   </p>\n<ol>\n<li>将iOS7.0/iOS7.1的SDK放到Xcode这个目录下(iOS7 SDK请百度自行下载)：<br>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport；</li>\n<li>进入目录：<br>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk  打开“iPhoneOS.sdk”文件夹和“SDKSettings.plist”文件的读写权限；  </li>\n<li>打开“SDKSettings.plist”文件，按图添加7.0/7.1（⚠️一定要按照从小到大的顺序添加）然后重启Xcode就可以了。<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Xcode-%E7%9C%9F%E6%9C%BA%E7%BC%96%E8%AF%91iOS7%E6%96%B9%E6%B3%95/iOS7_debug.png\" alt=\"iOS7_Debug\"></li>\n</ol>\n"},{"title":"Hello World","_content":"![hello world](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Hello%20world/home-bg-o.jpg)  \n&emsp;&emsp;作为一个程序员，“Hello World”可以说为我打开了新世界的大门。第一个程序，第一个网站，第一个脚本...都是从“Hello World”开始的。因为我已经决定要重新开启我的博客生涯，所以我的第一篇博文就叫“Hello World”！\n\n&emsp;&emsp;人这一辈子最开心的事莫过于做自己喜欢的事情，很幸运，我的工作也是我的爱好，这也是支撑着我在周末来公司加班写博客的动力哈哈哈。\n\n&emsp;&emsp;我觉得编程就像画画一样，键盘是画笔，代码是墨，编译器是画纸。我们在键盘上敲敲敲，就像拿着笔在纸上挥毫一样，最终我们都会创造出一个个无法复刻的作品。所以说编程是门艺术，一点都没错。\n\n&emsp;&emsp;第一篇博客就不写太多，我要去创造我的艺术品啦～\n\n&emsp;&emsp;“Hello World”！","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n\ncategories:\n- 随笔\n---\n![hello world](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Hello%20world/home-bg-o.jpg)  \n&emsp;&emsp;作为一个程序员，“Hello World”可以说为我打开了新世界的大门。第一个程序，第一个网站，第一个脚本...都是从“Hello World”开始的。因为我已经决定要重新开启我的博客生涯，所以我的第一篇博文就叫“Hello World”！\n\n&emsp;&emsp;人这一辈子最开心的事莫过于做自己喜欢的事情，很幸运，我的工作也是我的爱好，这也是支撑着我在周末来公司加班写博客的动力哈哈哈。\n\n&emsp;&emsp;我觉得编程就像画画一样，键盘是画笔，代码是墨，编译器是画纸。我们在键盘上敲敲敲，就像拿着笔在纸上挥毫一样，最终我们都会创造出一个个无法复刻的作品。所以说编程是门艺术，一点都没错。\n\n&emsp;&emsp;第一篇博客就不写太多，我要去创造我的艺术品啦～\n\n&emsp;&emsp;“Hello World”！","slug":"hello-world","published":1,"date":"2016-08-24T13:58:57.000Z","updated":"2016-08-27T14:20:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjat0x9ub0006clqdrcsfdkh3","content":"<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Hello%20world/home-bg-o.jpg\" alt=\"hello world\"><br>&emsp;&emsp;作为一个程序员，“Hello World”可以说为我打开了新世界的大门。第一个程序，第一个网站，第一个脚本…都是从“Hello World”开始的。因为我已经决定要重新开启我的博客生涯，所以我的第一篇博文就叫“Hello World”！</p>\n<p>&emsp;&emsp;人这一辈子最开心的事莫过于做自己喜欢的事情，很幸运，我的工作也是我的爱好，这也是支撑着我在周末来公司加班写博客的动力哈哈哈。</p>\n<p>&emsp;&emsp;我觉得编程就像画画一样，键盘是画笔，代码是墨，编译器是画纸。我们在键盘上敲敲敲，就像拿着笔在纸上挥毫一样，最终我们都会创造出一个个无法复刻的作品。所以说编程是门艺术，一点都没错。</p>\n<p>&emsp;&emsp;第一篇博客就不写太多，我要去创造我的艺术品啦～</p>\n<p>&emsp;&emsp;“Hello World”！</p>\n","excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Hello%20world/home-bg-o.jpg\" alt=\"hello world\"><br>&emsp;&emsp;作为一个程序员，“Hello World”可以说为我打开了新世界的大门。第一个程序，第一个网站，第一个脚本…都是从“Hello World”开始的。因为我已经决定要重新开启我的博客生涯，所以我的第一篇博文就叫“Hello World”！</p>\n<p>&emsp;&emsp;人这一辈子最开心的事莫过于做自己喜欢的事情，很幸运，我的工作也是我的爱好，这也是支撑着我在周末来公司加班写博客的动力哈哈哈。</p>\n<p>&emsp;&emsp;我觉得编程就像画画一样，键盘是画笔，代码是墨，编译器是画纸。我们在键盘上敲敲敲，就像拿着笔在纸上挥毫一样，最终我们都会创造出一个个无法复刻的作品。所以说编程是门艺术，一点都没错。</p>\n<p>&emsp;&emsp;第一篇博客就不写太多，我要去创造我的艺术品啦～</p>\n<p>&emsp;&emsp;“Hello World”！</p>\n"},{"title":"iOS--NSUserDefaults用法总结","date":"2016-09-16T13:00:41.000Z","_content":"## NSUserDefaults原理  \n&emsp;&emsp;NSUserDefaults是iOS为我们提供的一种轻量级的本地存储方式，其工作原理非常简单，就是将数据存储到本地的plist文件中。其实建立plist文件我们自己也可以完成，只不过自己去操作文件的创建、读取等会比较麻烦，使用“NSUserDefaults”则可以完全省略掉这些步骤，只需要进行简单的读写就可以了。\n## NSUserDefaults支持的数据类型\n&emsp;&emsp;因为NSUserDefaults是创建的plist类型的文件，所以它支持的数据类型也必须是plist文件能够存储的数据类型，分别是：**NSNumber（NSInteger、float、double），NSString，NSDate，NSArray，NSDictionary，BOOL**。需要注意的是，就算是存储的对象是“NSArray”类型的，那也要保证“NSArray”中存储的数据必须是plist文件支持的类型。如果需要存储plist不支持的数据类型，比如说一张图片或者一个自定义对象（下文会提到），可以先将其归档为“NSDate”类型，在存储到plist文件中。\n## NSUserDefaults用法  \n&emsp;&emsp;NSUserDefaults是一个单例，我们可以在程序的任何地方获取到它的唯一实例化对象：\n<pre>NSUserDefaults *userDefault = [NSUserDefaults standardUserDefaults];</pre>  \n&emsp;&emsp;存储一个数据：  \n<pre>[userDefault setObject:@\"测试\" forKey:@\"test\"];</pre>  \n&emsp;&emsp;由于NSUserDefaults是隔一段时间将数据写到本地，所以为了保险起见，建议加上下面的代码，确保数据及时的存储。  \n<pre>[userDefault synchronize];</pre>  \n&emsp;&emsp;取出一个数据也是非常的简单：  \n<pre>NSString *str = [userDefault objectForKey:@\"test\"];</pre>\n\n## 使用NSUserDefaults存储自定义对象  \n\n### 1.将自定义类型转换为NSDate类型\n&emsp;&emsp;其实不建议将数据这样存储，多数据复杂类型还是建议存到数据库中，如果非要这样存储的话，可以先将自定义类型归档为NSDate类型，因为plist文件是支持存储NSDate类型数据的，然后再通过NSUserDefaults进行存储。下面举个例子：  \n&emsp;&emsp;假如我们要把书籍的对象存储起来。首先要在“.h”文件中声明“NSCoding”协议，并在“.m”文件中实现“encodeWithCoder”和“initWithCoder”两个方法。  \n&emsp;&emsp;.h文件：\n<pre>//\n//  Book.h\n//  Book\n//\n//  Created by Renhuachi on 16/3/22.\n//  Copyright © 2016年 software. All rights reserved.\n//\n\n＃import < Foundation/Foundation.h >\n\n@interface Book : NSObject <NSCoding>\n＃pragma mark - 属性\n@property (nonatomic,copy) NSString *authorName;\n@property (nonatomic,copy) NSString *bookName;\n\n@end</pre>  \n&emsp;&emsp;.m文件  \n<pre>//\n//  Book.m\n//  Book\n//\n//  Created by Renhuachi on 16/3/22.\n//  Copyright © 2016年 software. All rights reserved.\n//\n\n＃import \"Book.h\"\n\n@implementation Book\n\n- (id)initWithCoder:(NSCoder *)aDecoder {\n    if (self = [super init]) {\n        _authorName = [aDecoder decodeObjectForKey:@\"authorName\"];\n        _bookName = [aDecoder decodeObjectForKey:@\"bookName\"];\n    }\n    return self;\n}\n\n- (void)encodeWithCoder:(NSCoder *)aCoder {\n    [aCoder encodeObject:_authorName forKey:@\"authorName\"];\n    [aCoder encodeObject:_bookName forKey:@\"bookName\"];\n}\n@end</pre>\n\n### 2.利用NSUserDefaults存储自定义类  \n&emsp;&emsp;首先创建一个Book类型的对象，并将其归档为NSDate类型，然后存储到NSUserDefaults中。  \n<pre>Book *book = [[Book alloc]init];\nbook.authorName = @\"书名\";\nbook.bookName = @\"作者\";\n\nNSData *data = [NSKeyedArchiver archivedDataWithRootObject:book];\nNSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];\n[userDefaults setObject:data forKey:@\"book\"];</pre>  \n&emsp;&emsp;从NSUserDefaults中还原数据也很简单。  \n<pre>NSUserDefaults *user = [NSUserDefaults standardUserDefaults];\nNSdData *data = [user objectForKey:@\"book\"];  \nBook *book = [NSKeyedUnarchiver unarchiveObjectWithData:data];</pre>","source":"_posts/iOS-NSUserDefaults用法总结.md","raw":"---\ntitle: iOS--NSUserDefaults用法总结\ndate: 2016-09-16 21:00:41  \ncategories:\n- iOS开发总结\ntags:\n- iOS\n---\n## NSUserDefaults原理  \n&emsp;&emsp;NSUserDefaults是iOS为我们提供的一种轻量级的本地存储方式，其工作原理非常简单，就是将数据存储到本地的plist文件中。其实建立plist文件我们自己也可以完成，只不过自己去操作文件的创建、读取等会比较麻烦，使用“NSUserDefaults”则可以完全省略掉这些步骤，只需要进行简单的读写就可以了。\n## NSUserDefaults支持的数据类型\n&emsp;&emsp;因为NSUserDefaults是创建的plist类型的文件，所以它支持的数据类型也必须是plist文件能够存储的数据类型，分别是：**NSNumber（NSInteger、float、double），NSString，NSDate，NSArray，NSDictionary，BOOL**。需要注意的是，就算是存储的对象是“NSArray”类型的，那也要保证“NSArray”中存储的数据必须是plist文件支持的类型。如果需要存储plist不支持的数据类型，比如说一张图片或者一个自定义对象（下文会提到），可以先将其归档为“NSDate”类型，在存储到plist文件中。\n## NSUserDefaults用法  \n&emsp;&emsp;NSUserDefaults是一个单例，我们可以在程序的任何地方获取到它的唯一实例化对象：\n<pre>NSUserDefaults *userDefault = [NSUserDefaults standardUserDefaults];</pre>  \n&emsp;&emsp;存储一个数据：  \n<pre>[userDefault setObject:@\"测试\" forKey:@\"test\"];</pre>  \n&emsp;&emsp;由于NSUserDefaults是隔一段时间将数据写到本地，所以为了保险起见，建议加上下面的代码，确保数据及时的存储。  \n<pre>[userDefault synchronize];</pre>  \n&emsp;&emsp;取出一个数据也是非常的简单：  \n<pre>NSString *str = [userDefault objectForKey:@\"test\"];</pre>\n\n## 使用NSUserDefaults存储自定义对象  \n\n### 1.将自定义类型转换为NSDate类型\n&emsp;&emsp;其实不建议将数据这样存储，多数据复杂类型还是建议存到数据库中，如果非要这样存储的话，可以先将自定义类型归档为NSDate类型，因为plist文件是支持存储NSDate类型数据的，然后再通过NSUserDefaults进行存储。下面举个例子：  \n&emsp;&emsp;假如我们要把书籍的对象存储起来。首先要在“.h”文件中声明“NSCoding”协议，并在“.m”文件中实现“encodeWithCoder”和“initWithCoder”两个方法。  \n&emsp;&emsp;.h文件：\n<pre>//\n//  Book.h\n//  Book\n//\n//  Created by Renhuachi on 16/3/22.\n//  Copyright © 2016年 software. All rights reserved.\n//\n\n＃import < Foundation/Foundation.h >\n\n@interface Book : NSObject <NSCoding>\n＃pragma mark - 属性\n@property (nonatomic,copy) NSString *authorName;\n@property (nonatomic,copy) NSString *bookName;\n\n@end</pre>  \n&emsp;&emsp;.m文件  \n<pre>//\n//  Book.m\n//  Book\n//\n//  Created by Renhuachi on 16/3/22.\n//  Copyright © 2016年 software. All rights reserved.\n//\n\n＃import \"Book.h\"\n\n@implementation Book\n\n- (id)initWithCoder:(NSCoder *)aDecoder {\n    if (self = [super init]) {\n        _authorName = [aDecoder decodeObjectForKey:@\"authorName\"];\n        _bookName = [aDecoder decodeObjectForKey:@\"bookName\"];\n    }\n    return self;\n}\n\n- (void)encodeWithCoder:(NSCoder *)aCoder {\n    [aCoder encodeObject:_authorName forKey:@\"authorName\"];\n    [aCoder encodeObject:_bookName forKey:@\"bookName\"];\n}\n@end</pre>\n\n### 2.利用NSUserDefaults存储自定义类  \n&emsp;&emsp;首先创建一个Book类型的对象，并将其归档为NSDate类型，然后存储到NSUserDefaults中。  \n<pre>Book *book = [[Book alloc]init];\nbook.authorName = @\"书名\";\nbook.bookName = @\"作者\";\n\nNSData *data = [NSKeyedArchiver archivedDataWithRootObject:book];\nNSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];\n[userDefaults setObject:data forKey:@\"book\"];</pre>  \n&emsp;&emsp;从NSUserDefaults中还原数据也很简单。  \n<pre>NSUserDefaults *user = [NSUserDefaults standardUserDefaults];\nNSdData *data = [user objectForKey:@\"book\"];  \nBook *book = [NSKeyedUnarchiver unarchiveObjectWithData:data];</pre>","slug":"iOS-NSUserDefaults用法总结","published":1,"updated":"2016-09-16T14:14:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjat0x9ud0008clqd23f53m5u","content":"<h2 id=\"NSUserDefaults原理\"><a href=\"#NSUserDefaults原理\" class=\"headerlink\" title=\"NSUserDefaults原理\"></a>NSUserDefaults原理</h2><p>&emsp;&emsp;NSUserDefaults是iOS为我们提供的一种轻量级的本地存储方式，其工作原理非常简单，就是将数据存储到本地的plist文件中。其实建立plist文件我们自己也可以完成，只不过自己去操作文件的创建、读取等会比较麻烦，使用“NSUserDefaults”则可以完全省略掉这些步骤，只需要进行简单的读写就可以了。</p>\n<h2 id=\"NSUserDefaults支持的数据类型\"><a href=\"#NSUserDefaults支持的数据类型\" class=\"headerlink\" title=\"NSUserDefaults支持的数据类型\"></a>NSUserDefaults支持的数据类型</h2><p>&emsp;&emsp;因为NSUserDefaults是创建的plist类型的文件，所以它支持的数据类型也必须是plist文件能够存储的数据类型，分别是：<strong>NSNumber（NSInteger、float、double），NSString，NSDate，NSArray，NSDictionary，BOOL</strong>。需要注意的是，就算是存储的对象是“NSArray”类型的，那也要保证“NSArray”中存储的数据必须是plist文件支持的类型。如果需要存储plist不支持的数据类型，比如说一张图片或者一个自定义对象（下文会提到），可以先将其归档为“NSDate”类型，在存储到plist文件中。</p>\n<h2 id=\"NSUserDefaults用法\"><a href=\"#NSUserDefaults用法\" class=\"headerlink\" title=\"NSUserDefaults用法\"></a>NSUserDefaults用法</h2><p>&emsp;&emsp;NSUserDefaults是一个单例，我们可以在程序的任何地方获取到它的唯一实例化对象：</p>\n<pre>NSUserDefaults *userDefault = [NSUserDefaults standardUserDefaults];</pre>  \n&emsp;&emsp;存储一个数据：  \n<pre>[userDefault setObject:@\"测试\" forKey:@\"test\"];</pre>  \n&emsp;&emsp;由于NSUserDefaults是隔一段时间将数据写到本地，所以为了保险起见，建议加上下面的代码，确保数据及时的存储。  \n<pre>[userDefault synchronize];</pre>  \n&emsp;&emsp;取出一个数据也是非常的简单：  \n<pre>NSString *str = [userDefault objectForKey:@\"test\"];</pre>\n\n<h2 id=\"使用NSUserDefaults存储自定义对象\"><a href=\"#使用NSUserDefaults存储自定义对象\" class=\"headerlink\" title=\"使用NSUserDefaults存储自定义对象\"></a>使用NSUserDefaults存储自定义对象</h2><h3 id=\"1-将自定义类型转换为NSDate类型\"><a href=\"#1-将自定义类型转换为NSDate类型\" class=\"headerlink\" title=\"1.将自定义类型转换为NSDate类型\"></a>1.将自定义类型转换为NSDate类型</h3><p>&emsp;&emsp;其实不建议将数据这样存储，多数据复杂类型还是建议存到数据库中，如果非要这样存储的话，可以先将自定义类型归档为NSDate类型，因为plist文件是支持存储NSDate类型数据的，然后再通过NSUserDefaults进行存储。下面举个例子：<br>&emsp;&emsp;假如我们要把书籍的对象存储起来。首先要在“.h”文件中声明“NSCoding”协议，并在“.m”文件中实现“encodeWithCoder”和“initWithCoder”两个方法。<br>&emsp;&emsp;.h文件：</p>\n<pre>//\n//  Book.h\n//  Book\n//\n//  Created by Renhuachi on 16/3/22.\n//  Copyright © 2016年 software. All rights reserved.\n//\n\n＃import < Foundation/Foundation.h >\n\n@interface Book : NSObject <nscoding>\n＃pragma mark - 属性\n@property (nonatomic,copy) NSString *authorName;\n@property (nonatomic,copy) NSString *bookName;\n\n@end</nscoding></pre>  \n&emsp;&emsp;.m文件  \n<pre>//\n//  Book.m\n//  Book\n//\n//  Created by Renhuachi on 16/3/22.\n//  Copyright © 2016年 software. All rights reserved.\n//\n\n＃import \"Book.h\"\n\n@implementation Book\n\n- (id)initWithCoder:(NSCoder *)aDecoder {\n    if (self = [super init]) {\n        _authorName = [aDecoder decodeObjectForKey:@\"authorName\"];\n        _bookName = [aDecoder decodeObjectForKey:@\"bookName\"];\n    }\n    return self;\n}\n\n- (void)encodeWithCoder:(NSCoder *)aCoder {\n    [aCoder encodeObject:_authorName forKey:@\"authorName\"];\n    [aCoder encodeObject:_bookName forKey:@\"bookName\"];\n}\n@end</pre>\n\n<h3 id=\"2-利用NSUserDefaults存储自定义类\"><a href=\"#2-利用NSUserDefaults存储自定义类\" class=\"headerlink\" title=\"2.利用NSUserDefaults存储自定义类\"></a>2.利用NSUserDefaults存储自定义类</h3><p>&emsp;&emsp;首先创建一个Book类型的对象，并将其归档为NSDate类型，然后存储到NSUserDefaults中。  </p>\n<pre>Book *book = [[Book alloc]init];\nbook.authorName = @\"书名\";\nbook.bookName = @\"作者\";\n\nNSData *data = [NSKeyedArchiver archivedDataWithRootObject:book];\nNSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];\n[userDefaults setObject:data forKey:@\"book\"];</pre>  \n&emsp;&emsp;从NSUserDefaults中还原数据也很简单。  \n<pre>NSUserDefaults *user = [NSUserDefaults standardUserDefaults];\nNSdData *data = [user objectForKey:@\"book\"];  \nBook *book = [NSKeyedUnarchiver unarchiveObjectWithData:data];</pre>","excerpt":"","more":"<h2 id=\"NSUserDefaults原理\"><a href=\"#NSUserDefaults原理\" class=\"headerlink\" title=\"NSUserDefaults原理\"></a>NSUserDefaults原理</h2><p>&emsp;&emsp;NSUserDefaults是iOS为我们提供的一种轻量级的本地存储方式，其工作原理非常简单，就是将数据存储到本地的plist文件中。其实建立plist文件我们自己也可以完成，只不过自己去操作文件的创建、读取等会比较麻烦，使用“NSUserDefaults”则可以完全省略掉这些步骤，只需要进行简单的读写就可以了。</p>\n<h2 id=\"NSUserDefaults支持的数据类型\"><a href=\"#NSUserDefaults支持的数据类型\" class=\"headerlink\" title=\"NSUserDefaults支持的数据类型\"></a>NSUserDefaults支持的数据类型</h2><p>&emsp;&emsp;因为NSUserDefaults是创建的plist类型的文件，所以它支持的数据类型也必须是plist文件能够存储的数据类型，分别是：<strong>NSNumber（NSInteger、float、double），NSString，NSDate，NSArray，NSDictionary，BOOL</strong>。需要注意的是，就算是存储的对象是“NSArray”类型的，那也要保证“NSArray”中存储的数据必须是plist文件支持的类型。如果需要存储plist不支持的数据类型，比如说一张图片或者一个自定义对象（下文会提到），可以先将其归档为“NSDate”类型，在存储到plist文件中。</p>\n<h2 id=\"NSUserDefaults用法\"><a href=\"#NSUserDefaults用法\" class=\"headerlink\" title=\"NSUserDefaults用法\"></a>NSUserDefaults用法</h2><p>&emsp;&emsp;NSUserDefaults是一个单例，我们可以在程序的任何地方获取到它的唯一实例化对象：</p>\n<pre>NSUserDefaults *userDefault = [NSUserDefaults standardUserDefaults];</pre>  \n&emsp;&emsp;存储一个数据：  \n<pre>[userDefault setObject:@\"测试\" forKey:@\"test\"];</pre>  \n&emsp;&emsp;由于NSUserDefaults是隔一段时间将数据写到本地，所以为了保险起见，建议加上下面的代码，确保数据及时的存储。  \n<pre>[userDefault synchronize];</pre>  \n&emsp;&emsp;取出一个数据也是非常的简单：  \n<pre>NSString *str = [userDefault objectForKey:@\"test\"];</pre>\n\n<h2 id=\"使用NSUserDefaults存储自定义对象\"><a href=\"#使用NSUserDefaults存储自定义对象\" class=\"headerlink\" title=\"使用NSUserDefaults存储自定义对象\"></a>使用NSUserDefaults存储自定义对象</h2><h3 id=\"1-将自定义类型转换为NSDate类型\"><a href=\"#1-将自定义类型转换为NSDate类型\" class=\"headerlink\" title=\"1.将自定义类型转换为NSDate类型\"></a>1.将自定义类型转换为NSDate类型</h3><p>&emsp;&emsp;其实不建议将数据这样存储，多数据复杂类型还是建议存到数据库中，如果非要这样存储的话，可以先将自定义类型归档为NSDate类型，因为plist文件是支持存储NSDate类型数据的，然后再通过NSUserDefaults进行存储。下面举个例子：<br>&emsp;&emsp;假如我们要把书籍的对象存储起来。首先要在“.h”文件中声明“NSCoding”协议，并在“.m”文件中实现“encodeWithCoder”和“initWithCoder”两个方法。<br>&emsp;&emsp;.h文件：</p>\n<pre>//\n//  Book.h\n//  Book\n//\n//  Created by Renhuachi on 16/3/22.\n//  Copyright © 2016年 software. All rights reserved.\n//\n\n＃import < Foundation/Foundation.h >\n\n@interface Book : NSObject <NSCoding>\n＃pragma mark - 属性\n@property (nonatomic,copy) NSString *authorName;\n@property (nonatomic,copy) NSString *bookName;\n\n@end</pre>  \n&emsp;&emsp;.m文件  \n<pre>//\n//  Book.m\n//  Book\n//\n//  Created by Renhuachi on 16/3/22.\n//  Copyright © 2016年 software. All rights reserved.\n//\n\n＃import \"Book.h\"\n\n@implementation Book\n\n- (id)initWithCoder:(NSCoder *)aDecoder {\n    if (self = [super init]) {\n        _authorName = [aDecoder decodeObjectForKey:@\"authorName\"];\n        _bookName = [aDecoder decodeObjectForKey:@\"bookName\"];\n    }\n    return self;\n}\n\n- (void)encodeWithCoder:(NSCoder *)aCoder {\n    [aCoder encodeObject:_authorName forKey:@\"authorName\"];\n    [aCoder encodeObject:_bookName forKey:@\"bookName\"];\n}\n@end</pre>\n\n<h3 id=\"2-利用NSUserDefaults存储自定义类\"><a href=\"#2-利用NSUserDefaults存储自定义类\" class=\"headerlink\" title=\"2.利用NSUserDefaults存储自定义类\"></a>2.利用NSUserDefaults存储自定义类</h3><p>&emsp;&emsp;首先创建一个Book类型的对象，并将其归档为NSDate类型，然后存储到NSUserDefaults中。  </p>\n<pre>Book *book = [[Book alloc]init];\nbook.authorName = @\"书名\";\nbook.bookName = @\"作者\";\n\nNSData *data = [NSKeyedArchiver archivedDataWithRootObject:book];\nNSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];\n[userDefaults setObject:data forKey:@\"book\"];</pre>  \n&emsp;&emsp;从NSUserDefaults中还原数据也很简单。  \n<pre>NSUserDefaults *user = [NSUserDefaults standardUserDefaults];\nNSdData *data = [user objectForKey:@\"book\"];  \nBook *book = [NSKeyedUnarchiver unarchiveObjectWithData:data];</pre>"},{"title":"WWDC-2017笔记—Vision","date":"2017-09-07T08:55:42.000Z","_content":"![Vision Logo](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Vision/Vision.jpg)  \n# Vision\nVision是iOS11发布的一个新的框架，可以用来对图片信息进行处理。其内部集成了Core ML，可以高效的返回图片中的信息。同时开发者也可以在Vision中集成自己的Core ML Model，所以其灵活性非常高。 \n## 应用场景 \n目前Vision可以支持的场景有：  \n**1. 人脸识别（给出人脸所在的矩形区域信息）**  \n**2. 人脸面部特征识别（给出眼睛、鼻子、嘴以及人脸中轴线的位置信息）**  \n**3. 文字识别（给出文字所在的矩形区域信息）**  \n**4. 二维码识别（识别二维码并返回二维码的信息）**  \n**5. 目标追踪（对于运动的目标，实时返回其位置信息）**  \n## 集成\nVision使用起来非常简单，只需三步就可将Vision集成到项目中：  \n### 1. 初始化VNDetctRequest\n根据使用场景的不同，可以选择初始化不同的Request，以人脸识别为例：  \n``\nVNDetectFaceRectanglesRequest * faceRequest = [[VNDetectFaceRectanglesRequest alloc] init];\n``  \n这里初始化了“VNDetectFaceRectanglesRequest”，表示希望返回人脸所在区域的信息。  \n### 2. 初始化VNImageRequestHandler  \n用于承接数据源，目前支持的数据源类型有：Data、URL、CGImage、CIImage、CVPixelBuffer。以CGImage为例：\n``\nVNImageRequestHandler *requestHandler = [[VNImageRequestHandler alloc] initWithCGImage:imageRef options:@{}];\n``  \n### 3. 发起请求  \n调用“handler”下的“performRequests”方法开始进行识别，“performRequests”的参数是数组类型，可以同时传递多个“request“给“handler”一起处理。\n``\n[requestHandler performRequests:@[faceRequest] error:&error];\n``  \n识别完成后通过“request.results”来拿到识别结果，\"results\"是数组类型，如果为空则表示当前图片中没有人脸的信息。  \n## Demo  \n利用Vision，我们可以做一些有趣的事情，比如为视频添加挂件，效果如下图：  \n![Vision video](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC学习笔记—Vision/Visionvideo.gif)   \n具体代码已经上传git：[视频挂件](https://github.com/ChiRenhua/VisionDemo)","source":"_posts/WWDC-2017笔记—Vision.md","raw":"---\ntitle: WWDC-2017笔记—Vision\ndate: 2017-09-07 16:55:42\ncategories:\n- iOS开发总结\ntags:\n- iOS\n- WWDC\n---\n![Vision Logo](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Vision/Vision.jpg)  \n# Vision\nVision是iOS11发布的一个新的框架，可以用来对图片信息进行处理。其内部集成了Core ML，可以高效的返回图片中的信息。同时开发者也可以在Vision中集成自己的Core ML Model，所以其灵活性非常高。 \n## 应用场景 \n目前Vision可以支持的场景有：  \n**1. 人脸识别（给出人脸所在的矩形区域信息）**  \n**2. 人脸面部特征识别（给出眼睛、鼻子、嘴以及人脸中轴线的位置信息）**  \n**3. 文字识别（给出文字所在的矩形区域信息）**  \n**4. 二维码识别（识别二维码并返回二维码的信息）**  \n**5. 目标追踪（对于运动的目标，实时返回其位置信息）**  \n## 集成\nVision使用起来非常简单，只需三步就可将Vision集成到项目中：  \n### 1. 初始化VNDetctRequest\n根据使用场景的不同，可以选择初始化不同的Request，以人脸识别为例：  \n``\nVNDetectFaceRectanglesRequest * faceRequest = [[VNDetectFaceRectanglesRequest alloc] init];\n``  \n这里初始化了“VNDetectFaceRectanglesRequest”，表示希望返回人脸所在区域的信息。  \n### 2. 初始化VNImageRequestHandler  \n用于承接数据源，目前支持的数据源类型有：Data、URL、CGImage、CIImage、CVPixelBuffer。以CGImage为例：\n``\nVNImageRequestHandler *requestHandler = [[VNImageRequestHandler alloc] initWithCGImage:imageRef options:@{}];\n``  \n### 3. 发起请求  \n调用“handler”下的“performRequests”方法开始进行识别，“performRequests”的参数是数组类型，可以同时传递多个“request“给“handler”一起处理。\n``\n[requestHandler performRequests:@[faceRequest] error:&error];\n``  \n识别完成后通过“request.results”来拿到识别结果，\"results\"是数组类型，如果为空则表示当前图片中没有人脸的信息。  \n## Demo  \n利用Vision，我们可以做一些有趣的事情，比如为视频添加挂件，效果如下图：  \n![Vision video](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC学习笔记—Vision/Visionvideo.gif)   \n具体代码已经上传git：[视频挂件](https://github.com/ChiRenhua/VisionDemo)","slug":"WWDC-2017笔记—Vision","published":1,"updated":"2017-09-20T09:15:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjat0x9ue000aclqdqxydyzm3","content":"<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Vision/Vision.jpg\" alt=\"Vision Logo\">  </p>\n<h1 id=\"Vision\"><a href=\"#Vision\" class=\"headerlink\" title=\"Vision\"></a>Vision</h1><p>Vision是iOS11发布的一个新的框架，可以用来对图片信息进行处理。其内部集成了Core ML，可以高效的返回图片中的信息。同时开发者也可以在Vision中集成自己的Core ML Model，所以其灵活性非常高。 </p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>目前Vision可以支持的场景有：<br><strong>1. 人脸识别（给出人脸所在的矩形区域信息）</strong><br><strong>2. 人脸面部特征识别（给出眼睛、鼻子、嘴以及人脸中轴线的位置信息）</strong><br><strong>3. 文字识别（给出文字所在的矩形区域信息）</strong><br><strong>4. 二维码识别（识别二维码并返回二维码的信息）</strong><br><strong>5. 目标追踪（对于运动的目标，实时返回其位置信息）</strong>  </p>\n<h2 id=\"集成\"><a href=\"#集成\" class=\"headerlink\" title=\"集成\"></a>集成</h2><p>Vision使用起来非常简单，只需三步就可将Vision集成到项目中：  </p>\n<h3 id=\"1-初始化VNDetctRequest\"><a href=\"#1-初始化VNDetctRequest\" class=\"headerlink\" title=\"1. 初始化VNDetctRequest\"></a>1. 初始化VNDetctRequest</h3><p>根据使用场景的不同，可以选择初始化不同的Request，以人脸识别为例：<br><code>VNDetectFaceRectanglesRequest * faceRequest = [[VNDetectFaceRectanglesRequest alloc] init];</code><br>这里初始化了“VNDetectFaceRectanglesRequest”，表示希望返回人脸所在区域的信息。  </p>\n<h3 id=\"2-初始化VNImageRequestHandler\"><a href=\"#2-初始化VNImageRequestHandler\" class=\"headerlink\" title=\"2. 初始化VNImageRequestHandler\"></a>2. 初始化VNImageRequestHandler</h3><p>用于承接数据源，目前支持的数据源类型有：Data、URL、CGImage、CIImage、CVPixelBuffer。以CGImage为例：<br><code>VNImageRequestHandler *requestHandler = [[VNImageRequestHandler alloc] initWithCGImage:imageRef options:@{}];</code>  </p>\n<h3 id=\"3-发起请求\"><a href=\"#3-发起请求\" class=\"headerlink\" title=\"3. 发起请求\"></a>3. 发起请求</h3><p>调用“handler”下的“performRequests”方法开始进行识别，“performRequests”的参数是数组类型，可以同时传递多个“request“给“handler”一起处理。<br><code>[requestHandler performRequests:@[faceRequest] error:&amp;error];</code><br>识别完成后通过“request.results”来拿到识别结果，”results”是数组类型，如果为空则表示当前图片中没有人脸的信息。  </p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p>利用Vision，我们可以做一些有趣的事情，比如为视频添加挂件，效果如下图：<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC学习笔记—Vision/Visionvideo.gif\" alt=\"Vision video\"><br>具体代码已经上传git：<a href=\"https://github.com/ChiRenhua/VisionDemo\" target=\"_blank\" rel=\"external\">视频挂件</a></p>\n","excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94Vision/Vision.jpg\" alt=\"Vision Logo\">  </p>\n<h1 id=\"Vision\"><a href=\"#Vision\" class=\"headerlink\" title=\"Vision\"></a>Vision</h1><p>Vision是iOS11发布的一个新的框架，可以用来对图片信息进行处理。其内部集成了Core ML，可以高效的返回图片中的信息。同时开发者也可以在Vision中集成自己的Core ML Model，所以其灵活性非常高。 </p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>目前Vision可以支持的场景有：<br><strong>1. 人脸识别（给出人脸所在的矩形区域信息）</strong><br><strong>2. 人脸面部特征识别（给出眼睛、鼻子、嘴以及人脸中轴线的位置信息）</strong><br><strong>3. 文字识别（给出文字所在的矩形区域信息）</strong><br><strong>4. 二维码识别（识别二维码并返回二维码的信息）</strong><br><strong>5. 目标追踪（对于运动的目标，实时返回其位置信息）</strong>  </p>\n<h2 id=\"集成\"><a href=\"#集成\" class=\"headerlink\" title=\"集成\"></a>集成</h2><p>Vision使用起来非常简单，只需三步就可将Vision集成到项目中：  </p>\n<h3 id=\"1-初始化VNDetctRequest\"><a href=\"#1-初始化VNDetctRequest\" class=\"headerlink\" title=\"1. 初始化VNDetctRequest\"></a>1. 初始化VNDetctRequest</h3><p>根据使用场景的不同，可以选择初始化不同的Request，以人脸识别为例：<br><code>VNDetectFaceRectanglesRequest * faceRequest = [[VNDetectFaceRectanglesRequest alloc] init];</code><br>这里初始化了“VNDetectFaceRectanglesRequest”，表示希望返回人脸所在区域的信息。  </p>\n<h3 id=\"2-初始化VNImageRequestHandler\"><a href=\"#2-初始化VNImageRequestHandler\" class=\"headerlink\" title=\"2. 初始化VNImageRequestHandler\"></a>2. 初始化VNImageRequestHandler</h3><p>用于承接数据源，目前支持的数据源类型有：Data、URL、CGImage、CIImage、CVPixelBuffer。以CGImage为例：<br><code>VNImageRequestHandler *requestHandler = [[VNImageRequestHandler alloc] initWithCGImage:imageRef options:@{}];</code>  </p>\n<h3 id=\"3-发起请求\"><a href=\"#3-发起请求\" class=\"headerlink\" title=\"3. 发起请求\"></a>3. 发起请求</h3><p>调用“handler”下的“performRequests”方法开始进行识别，“performRequests”的参数是数组类型，可以同时传递多个“request“给“handler”一起处理。<br><code>[requestHandler performRequests:@[faceRequest] error:&amp;error];</code><br>识别完成后通过“request.results”来拿到识别结果，”results”是数组类型，如果为空则表示当前图片中没有人脸的信息。  </p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p>利用Vision，我们可以做一些有趣的事情，比如为视频添加挂件，效果如下图：<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/2017%20WWDC学习笔记—Vision/Visionvideo.gif\" alt=\"Vision video\"><br>具体代码已经上传git：<a href=\"https://github.com/ChiRenhua/VisionDemo\">视频挂件</a></p>\n"},{"title":"Hexo常用命令整理","date":"2016-08-27T11:11:39.000Z","_content":"![Hexo logl](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Hexo常用命令整理/hexo.jpg)  \n\n## 安装\n安装  \n``npm install hexo -g``  \n升级  \n``npm update hexo -g``  \n初始化  \n``hexo init``\n## 发表文章\n新建文章  \n``hexo n \"我的博客\" == hexo new \"我的博客\"``  \n发表草稿  \n``hexo p == hexo publish``  \n生成静态文件  \n``hexo g == hexo generate``   \n启动服务预览  \n``hexo s == hexo server``   \n部署到远程  \n``hexo d == hexo deploy``\n## 清理缓存  \n清除缓存文件 (db.json) 和已生成的静态文件 (public)  \n``hexo clean``\n## 版本\n查看Hexo运行版本  \n``hexo version``\n\n\n","source":"_posts/hexo常用命令整理.md","raw":"---\ntitle: Hexo常用命令整理\ndate: 2016-08-27 19:11:39\n\ncategories:\n- 网站搭建\ntags:\n- 命令\n---\n![Hexo logl](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Hexo常用命令整理/hexo.jpg)  \n\n## 安装\n安装  \n``npm install hexo -g``  \n升级  \n``npm update hexo -g``  \n初始化  \n``hexo init``\n## 发表文章\n新建文章  \n``hexo n \"我的博客\" == hexo new \"我的博客\"``  \n发表草稿  \n``hexo p == hexo publish``  \n生成静态文件  \n``hexo g == hexo generate``   \n启动服务预览  \n``hexo s == hexo server``   \n部署到远程  \n``hexo d == hexo deploy``\n## 清理缓存  \n清除缓存文件 (db.json) 和已生成的静态文件 (public)  \n``hexo clean``\n## 版本\n查看Hexo运行版本  \n``hexo version``\n\n\n","slug":"hexo常用命令整理","published":1,"updated":"2016-08-27T14:27:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjat0x9ur000cclqdr9lxzd0n","content":"<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Hexo常用命令整理/hexo.jpg\" alt=\"Hexo logl\">  </p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>安装<br><code>npm install hexo -g</code><br>升级<br><code>npm update hexo -g</code><br>初始化<br><code>hexo init</code></p>\n<h2 id=\"发表文章\"><a href=\"#发表文章\" class=\"headerlink\" title=\"发表文章\"></a>发表文章</h2><p>新建文章<br><code>hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot;</code><br>发表草稿<br><code>hexo p == hexo publish</code><br>生成静态文件<br><code>hexo g == hexo generate</code><br>启动服务预览<br><code>hexo s == hexo server</code><br>部署到远程<br><code>hexo d == hexo deploy</code></p>\n<h2 id=\"清理缓存\"><a href=\"#清理缓存\" class=\"headerlink\" title=\"清理缓存\"></a>清理缓存</h2><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)<br><code>hexo clean</code></p>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><p>查看Hexo运行版本<br><code>hexo version</code></p>\n","excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/Hexo常用命令整理/hexo.jpg\" alt=\"Hexo logl\">  </p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>安装<br><code>npm install hexo -g</code><br>升级<br><code>npm update hexo -g</code><br>初始化<br><code>hexo init</code></p>\n<h2 id=\"发表文章\"><a href=\"#发表文章\" class=\"headerlink\" title=\"发表文章\"></a>发表文章</h2><p>新建文章<br><code>hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot;</code><br>发表草稿<br><code>hexo p == hexo publish</code><br>生成静态文件<br><code>hexo g == hexo generate</code><br>启动服务预览<br><code>hexo s == hexo server</code><br>部署到远程<br><code>hexo d == hexo deploy</code></p>\n<h2 id=\"清理缓存\"><a href=\"#清理缓存\" class=\"headerlink\" title=\"清理缓存\"></a>清理缓存</h2><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)<br><code>hexo clean</code></p>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><p>查看Hexo运行版本<br><code>hexo version</code></p>\n"},{"title":"iOS--使用UISearchController创建搜索框","date":"2016-08-29T08:40:27.000Z","_content":"&emsp;&emsp;在iOS8之前，我们一直利用UISearchBar和UISearchDisplayController来实现搜索框，但是在iOS8以后上述方法已经过时，改而实用UISearchController来替代，用起来比之前的方法要简单好多。  \n## 添加UISearchController变量 \n&emsp;&emsp;在开始之前我们要添加UISearchController变量，并未搜索前的数据和搜索结果创建两个数组：  \n\n<pre>@property(strong, nonatomic) UISearchController *searchController;\n@property(strong, nonatomic) NSMutableArray *bookArray;\n@property(strong, nonatomic) NSMutableArray *bookResult;</pre>\n\n## 初始化UISearchController\n&emsp;&emsp;初始化UISearchController并设置其属性和默认文字  \n\n<pre>- (void)showSearchBar {\n    _searchController = [[UISearchController alloc] initWithSearchResultsController:nil];\n    //搜索结果处理函数代理\n    _searchController.searchResultsUpdater = self;\n    //是否显示背景\n    _searchController.dimsBackgroundDuringPresentation = false;\n    [_searchController.searchBar sizeToFit];\n    //修改searchBar的默认文字\n    _searchController.searchBar.placeholder = @\"搜索\";\n    //修改“Cancle按钮的默认文字”\n    [_searchController.searchBar setValue:@\"取消\" forKey:@\"_cancelButtonText\"];\n    //将搜索框添加到tableHeaderView中\n    _CheckBookViewtableView.tableHeaderView = self.searchController.searchBar;\n}</pre>\n\n## 添加UISearchResultsUpdating协议  \n&emsp;&emsp;如果要对搜索结果进行处理，那我们要为UISearchController添加一个搜索结果处理的协议，并实现其下的方法：  \n&emsp;&emsp;添加协议：\n\n<pre>@interface CheckBookViewController ()< UITableViewDataSource,UITableViewDelegate,UISearchResultsUpdating ></pre>\n\n&emsp;&emsp;实现方法：\n\n<pre>- (void)updateSearchResultsForSearchController:(UISearchController *)searchController {\n    [searchResult removeAllObjects];\n    NSString *keyWord = [searchController .searchBar text];\n    [bookArray enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n        Book *book = obj;\n        if ([book.bookName.uppercaseString containsString:keyWord.uppercaseString]) {\n            [searchResult addObject:book];\n        }\n    }];\n    [_CheckBookViewtableView reloadData];\n}</pre>\n\n## UITableView代理方法下对搜索结果的处理\n&emsp;&emsp;因为搜索结果要复用界面的TableView，所以在TableView的代理方法下要进行判断当前是搜索的界面还是主界面：\n\n<pre>- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {\n    // 判断是否是搜索结果的tableView\n    if ([self.searchController isActive]) {\n        return searchResult.count;\n    }\n    return [bookArray count];\n}\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n    Book *books;\n    CheckBookViewcell = [tableView dequeueReusableCellWithIdentifier:@\"UIListTableViewCell\"];                                                        // 从缓存池中取出cell\n    if (!CheckBookViewcell) {                                                                                                                        // 判断是否能取出cell\n        CheckBookViewcell = [[ListTableViewCell alloc]initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:@\"UIListTableViewCell\"];            // 如果cell为空则创建一个新的cell并放入缓存池中\n    }else{                                                                                                                                           // 如果cell不为空（注意：以下操作很重要，不然会造成cell数据错乱）\n        [CheckBookViewcell removeCellView];                                                                                                          // 将之前cell界面上的view全部remove掉\n        [CheckBookViewcell initCellView];                                                                                                            // 重新初始化cell上的view\n    }\n    // 判断是否是搜索结果的tableView\n    if ([self.searchController isActive]) {\n        books = searchResult[indexPath.row];\n    }else {\n        if (viewcode) {\n            books = bookArray[indexPath.row];\n        }else {\n            books = bookArray[indexPath.row];\n        }\n    }\n    \n    [CheckBookViewcell setBookInfo:books];\n    return CheckBookViewcell;\n}\n- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {\n    Book *book;\n    if ([_searchController isActive]) {\n        book = searchResult[indexPath.row];\n    }else {\n        book = bookArray[indexPath.row];\n    }\n    BookDetialViewController *bookDetialVC = [[BookDetialViewController alloc]init:book];\n    [self.navigationController pushViewController:bookDetialVC animated:YES];\n    [tableView deselectRowAtIndexPath:indexPath animated:YES];                                                                                  // 取消选中的状态\n}</pre>\n\n## 最后注意!\n&emsp;&emsp;在离开界面时要销毁掉UISearchController，不然它会在其它界面一直存在：\n<pre>- (void)viewWillDisappear:(BOOL)animated {\n    [super viewWillDisappear:animated];\n    if (self.searchController.active) {\n        self.searchController.active = NO;\n        [self.searchController.searchBar removeFromSuperview];\n    }\n}</pre>\n","source":"_posts/iOS-使用UISearchController创建搜索框.md","raw":"---\ntitle: iOS--使用UISearchController创建搜索框\ndate: 2016-08-29 16:40:27  \ncategories: \n- iOS开发总结\ntags: \n- iOS\n---\n&emsp;&emsp;在iOS8之前，我们一直利用UISearchBar和UISearchDisplayController来实现搜索框，但是在iOS8以后上述方法已经过时，改而实用UISearchController来替代，用起来比之前的方法要简单好多。  \n## 添加UISearchController变量 \n&emsp;&emsp;在开始之前我们要添加UISearchController变量，并未搜索前的数据和搜索结果创建两个数组：  \n\n<pre>@property(strong, nonatomic) UISearchController *searchController;\n@property(strong, nonatomic) NSMutableArray *bookArray;\n@property(strong, nonatomic) NSMutableArray *bookResult;</pre>\n\n## 初始化UISearchController\n&emsp;&emsp;初始化UISearchController并设置其属性和默认文字  \n\n<pre>- (void)showSearchBar {\n    _searchController = [[UISearchController alloc] initWithSearchResultsController:nil];\n    //搜索结果处理函数代理\n    _searchController.searchResultsUpdater = self;\n    //是否显示背景\n    _searchController.dimsBackgroundDuringPresentation = false;\n    [_searchController.searchBar sizeToFit];\n    //修改searchBar的默认文字\n    _searchController.searchBar.placeholder = @\"搜索\";\n    //修改“Cancle按钮的默认文字”\n    [_searchController.searchBar setValue:@\"取消\" forKey:@\"_cancelButtonText\"];\n    //将搜索框添加到tableHeaderView中\n    _CheckBookViewtableView.tableHeaderView = self.searchController.searchBar;\n}</pre>\n\n## 添加UISearchResultsUpdating协议  \n&emsp;&emsp;如果要对搜索结果进行处理，那我们要为UISearchController添加一个搜索结果处理的协议，并实现其下的方法：  \n&emsp;&emsp;添加协议：\n\n<pre>@interface CheckBookViewController ()< UITableViewDataSource,UITableViewDelegate,UISearchResultsUpdating ></pre>\n\n&emsp;&emsp;实现方法：\n\n<pre>- (void)updateSearchResultsForSearchController:(UISearchController *)searchController {\n    [searchResult removeAllObjects];\n    NSString *keyWord = [searchController .searchBar text];\n    [bookArray enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n        Book *book = obj;\n        if ([book.bookName.uppercaseString containsString:keyWord.uppercaseString]) {\n            [searchResult addObject:book];\n        }\n    }];\n    [_CheckBookViewtableView reloadData];\n}</pre>\n\n## UITableView代理方法下对搜索结果的处理\n&emsp;&emsp;因为搜索结果要复用界面的TableView，所以在TableView的代理方法下要进行判断当前是搜索的界面还是主界面：\n\n<pre>- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {\n    // 判断是否是搜索结果的tableView\n    if ([self.searchController isActive]) {\n        return searchResult.count;\n    }\n    return [bookArray count];\n}\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n    Book *books;\n    CheckBookViewcell = [tableView dequeueReusableCellWithIdentifier:@\"UIListTableViewCell\"];                                                        // 从缓存池中取出cell\n    if (!CheckBookViewcell) {                                                                                                                        // 判断是否能取出cell\n        CheckBookViewcell = [[ListTableViewCell alloc]initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:@\"UIListTableViewCell\"];            // 如果cell为空则创建一个新的cell并放入缓存池中\n    }else{                                                                                                                                           // 如果cell不为空（注意：以下操作很重要，不然会造成cell数据错乱）\n        [CheckBookViewcell removeCellView];                                                                                                          // 将之前cell界面上的view全部remove掉\n        [CheckBookViewcell initCellView];                                                                                                            // 重新初始化cell上的view\n    }\n    // 判断是否是搜索结果的tableView\n    if ([self.searchController isActive]) {\n        books = searchResult[indexPath.row];\n    }else {\n        if (viewcode) {\n            books = bookArray[indexPath.row];\n        }else {\n            books = bookArray[indexPath.row];\n        }\n    }\n    \n    [CheckBookViewcell setBookInfo:books];\n    return CheckBookViewcell;\n}\n- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {\n    Book *book;\n    if ([_searchController isActive]) {\n        book = searchResult[indexPath.row];\n    }else {\n        book = bookArray[indexPath.row];\n    }\n    BookDetialViewController *bookDetialVC = [[BookDetialViewController alloc]init:book];\n    [self.navigationController pushViewController:bookDetialVC animated:YES];\n    [tableView deselectRowAtIndexPath:indexPath animated:YES];                                                                                  // 取消选中的状态\n}</pre>\n\n## 最后注意!\n&emsp;&emsp;在离开界面时要销毁掉UISearchController，不然它会在其它界面一直存在：\n<pre>- (void)viewWillDisappear:(BOOL)animated {\n    [super viewWillDisappear:animated];\n    if (self.searchController.active) {\n        self.searchController.active = NO;\n        [self.searchController.searchBar removeFromSuperview];\n    }\n}</pre>\n","slug":"iOS-使用UISearchController创建搜索框","published":1,"updated":"2016-08-29T09:35:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjat0x9y90019clqdrtazy94q","content":"<p>&emsp;&emsp;在iOS8之前，我们一直利用UISearchBar和UISearchDisplayController来实现搜索框，但是在iOS8以后上述方法已经过时，改而实用UISearchController来替代，用起来比之前的方法要简单好多。  </p>\n<h2 id=\"添加UISearchController变量\"><a href=\"#添加UISearchController变量\" class=\"headerlink\" title=\"添加UISearchController变量\"></a>添加UISearchController变量</h2><p>&emsp;&emsp;在开始之前我们要添加UISearchController变量，并未搜索前的数据和搜索结果创建两个数组：  </p>\n<p><pre>@property(strong, nonatomic) UISearchController <em>searchController;<br>@property(strong, nonatomic) NSMutableArray </em>bookArray;<br>@property(strong, nonatomic) NSMutableArray *bookResult;</pre></p>\n<h2 id=\"初始化UISearchController\"><a href=\"#初始化UISearchController\" class=\"headerlink\" title=\"初始化UISearchController\"></a>初始化UISearchController</h2><p>&emsp;&emsp;初始化UISearchController并设置其属性和默认文字  </p>\n<pre>- (void)showSearchBar {\n    _searchController = [[UISearchController alloc] initWithSearchResultsController:nil];\n    //搜索结果处理函数代理\n    _searchController.searchResultsUpdater = self;\n    //是否显示背景\n    _searchController.dimsBackgroundDuringPresentation = false;\n    [_searchController.searchBar sizeToFit];\n    //修改searchBar的默认文字\n    _searchController.searchBar.placeholder = @\"搜索\";\n    //修改“Cancle按钮的默认文字”\n    [_searchController.searchBar setValue:@\"取消\" forKey:@\"_cancelButtonText\"];\n    //将搜索框添加到tableHeaderView中\n    _CheckBookViewtableView.tableHeaderView = self.searchController.searchBar;\n}</pre>\n\n<h2 id=\"添加UISearchResultsUpdating协议\"><a href=\"#添加UISearchResultsUpdating协议\" class=\"headerlink\" title=\"添加UISearchResultsUpdating协议\"></a>添加UISearchResultsUpdating协议</h2><p>&emsp;&emsp;如果要对搜索结果进行处理，那我们要为UISearchController添加一个搜索结果处理的协议，并实现其下的方法：<br>&emsp;&emsp;添加协议：</p>\n<p><pre>@interface CheckBookViewController ()&lt; UITableViewDataSource,UITableViewDelegate,UISearchResultsUpdating &gt;</pre></p>\n<p>&emsp;&emsp;实现方法：</p>\n<pre>- (void)updateSearchResultsForSearchController:(UISearchController *)searchController {\n    [searchResult removeAllObjects];\n    NSString *keyWord = [searchController .searchBar text];\n    [bookArray enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n        Book *book = obj;\n        if ([book.bookName.uppercaseString containsString:keyWord.uppercaseString]) {\n            [searchResult addObject:book];\n        }\n    }];\n    [_CheckBookViewtableView reloadData];\n}</pre>\n\n<h2 id=\"UITableView代理方法下对搜索结果的处理\"><a href=\"#UITableView代理方法下对搜索结果的处理\" class=\"headerlink\" title=\"UITableView代理方法下对搜索结果的处理\"></a>UITableView代理方法下对搜索结果的处理</h2><p>&emsp;&emsp;因为搜索结果要复用界面的TableView，所以在TableView的代理方法下要进行判断当前是搜索的界面还是主界面：</p>\n<pre>- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {\n    // 判断是否是搜索结果的tableView\n    if ([self.searchController isActive]) {\n        return searchResult.count;\n    }\n    return [bookArray count];\n}\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n    Book *books;\n    CheckBookViewcell = [tableView dequeueReusableCellWithIdentifier:@\"UIListTableViewCell\"];                                                        // 从缓存池中取出cell\n    if (!CheckBookViewcell) {                                                                                                                        // 判断是否能取出cell\n        CheckBookViewcell = [[ListTableViewCell alloc]initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:@\"UIListTableViewCell\"];            // 如果cell为空则创建一个新的cell并放入缓存池中\n    }else{                                                                                                                                           // 如果cell不为空（注意：以下操作很重要，不然会造成cell数据错乱）\n        [CheckBookViewcell removeCellView];                                                                                                          // 将之前cell界面上的view全部remove掉\n        [CheckBookViewcell initCellView];                                                                                                            // 重新初始化cell上的view\n    }\n    // 判断是否是搜索结果的tableView\n    if ([self.searchController isActive]) {\n        books = searchResult[indexPath.row];\n    }else {\n        if (viewcode) {\n            books = bookArray[indexPath.row];\n        }else {\n            books = bookArray[indexPath.row];\n        }\n    }\n\n    [CheckBookViewcell setBookInfo:books];\n    return CheckBookViewcell;\n}\n- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {\n    Book *book;\n    if ([_searchController isActive]) {\n        book = searchResult[indexPath.row];\n    }else {\n        book = bookArray[indexPath.row];\n    }\n    BookDetialViewController *bookDetialVC = [[BookDetialViewController alloc]init:book];\n    [self.navigationController pushViewController:bookDetialVC animated:YES];\n    [tableView deselectRowAtIndexPath:indexPath animated:YES];                                                                                  // 取消选中的状态\n}</pre>\n\n<h2 id=\"最后注意\"><a href=\"#最后注意\" class=\"headerlink\" title=\"最后注意!\"></a>最后注意!</h2><p>&emsp;&emsp;在离开界面时要销毁掉UISearchController，不然它会在其它界面一直存在：</p>\n<pre>- (void)viewWillDisappear:(BOOL)animated {\n    [super viewWillDisappear:animated];\n    if (self.searchController.active) {\n        self.searchController.active = NO;\n        [self.searchController.searchBar removeFromSuperview];\n    }\n}</pre>\n","excerpt":"","more":"<p>&emsp;&emsp;在iOS8之前，我们一直利用UISearchBar和UISearchDisplayController来实现搜索框，但是在iOS8以后上述方法已经过时，改而实用UISearchController来替代，用起来比之前的方法要简单好多。  </p>\n<h2 id=\"添加UISearchController变量\"><a href=\"#添加UISearchController变量\" class=\"headerlink\" title=\"添加UISearchController变量\"></a>添加UISearchController变量</h2><p>&emsp;&emsp;在开始之前我们要添加UISearchController变量，并未搜索前的数据和搜索结果创建两个数组：  </p>\n<p><pre>@property(strong, nonatomic) UISearchController <em>searchController;<br>@property(strong, nonatomic) NSMutableArray </em>bookArray;<br>@property(strong, nonatomic) NSMutableArray *bookResult;</pre></p>\n<h2 id=\"初始化UISearchController\"><a href=\"#初始化UISearchController\" class=\"headerlink\" title=\"初始化UISearchController\"></a>初始化UISearchController</h2><p>&emsp;&emsp;初始化UISearchController并设置其属性和默认文字  </p>\n<pre>- (void)showSearchBar {\n    _searchController = [[UISearchController alloc] initWithSearchResultsController:nil];\n    //搜索结果处理函数代理\n    _searchController.searchResultsUpdater = self;\n    //是否显示背景\n    _searchController.dimsBackgroundDuringPresentation = false;\n    [_searchController.searchBar sizeToFit];\n    //修改searchBar的默认文字\n    _searchController.searchBar.placeholder = @\"搜索\";\n    //修改“Cancle按钮的默认文字”\n    [_searchController.searchBar setValue:@\"取消\" forKey:@\"_cancelButtonText\"];\n    //将搜索框添加到tableHeaderView中\n    _CheckBookViewtableView.tableHeaderView = self.searchController.searchBar;\n}</pre>\n\n<h2 id=\"添加UISearchResultsUpdating协议\"><a href=\"#添加UISearchResultsUpdating协议\" class=\"headerlink\" title=\"添加UISearchResultsUpdating协议\"></a>添加UISearchResultsUpdating协议</h2><p>&emsp;&emsp;如果要对搜索结果进行处理，那我们要为UISearchController添加一个搜索结果处理的协议，并实现其下的方法：<br>&emsp;&emsp;添加协议：</p>\n<p><pre>@interface CheckBookViewController ()&lt; UITableViewDataSource,UITableViewDelegate,UISearchResultsUpdating &gt;</pre></p>\n<p>&emsp;&emsp;实现方法：</p>\n<pre>- (void)updateSearchResultsForSearchController:(UISearchController *)searchController {\n    [searchResult removeAllObjects];\n    NSString *keyWord = [searchController .searchBar text];\n    [bookArray enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n        Book *book = obj;\n        if ([book.bookName.uppercaseString containsString:keyWord.uppercaseString]) {\n            [searchResult addObject:book];\n        }\n    }];\n    [_CheckBookViewtableView reloadData];\n}</pre>\n\n<h2 id=\"UITableView代理方法下对搜索结果的处理\"><a href=\"#UITableView代理方法下对搜索结果的处理\" class=\"headerlink\" title=\"UITableView代理方法下对搜索结果的处理\"></a>UITableView代理方法下对搜索结果的处理</h2><p>&emsp;&emsp;因为搜索结果要复用界面的TableView，所以在TableView的代理方法下要进行判断当前是搜索的界面还是主界面：</p>\n<pre>- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {\n    // 判断是否是搜索结果的tableView\n    if ([self.searchController isActive]) {\n        return searchResult.count;\n    }\n    return [bookArray count];\n}\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n    Book *books;\n    CheckBookViewcell = [tableView dequeueReusableCellWithIdentifier:@\"UIListTableViewCell\"];                                                        // 从缓存池中取出cell\n    if (!CheckBookViewcell) {                                                                                                                        // 判断是否能取出cell\n        CheckBookViewcell = [[ListTableViewCell alloc]initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:@\"UIListTableViewCell\"];            // 如果cell为空则创建一个新的cell并放入缓存池中\n    }else{                                                                                                                                           // 如果cell不为空（注意：以下操作很重要，不然会造成cell数据错乱）\n        [CheckBookViewcell removeCellView];                                                                                                          // 将之前cell界面上的view全部remove掉\n        [CheckBookViewcell initCellView];                                                                                                            // 重新初始化cell上的view\n    }\n    // 判断是否是搜索结果的tableView\n    if ([self.searchController isActive]) {\n        books = searchResult[indexPath.row];\n    }else {\n        if (viewcode) {\n            books = bookArray[indexPath.row];\n        }else {\n            books = bookArray[indexPath.row];\n        }\n    }\n\n    [CheckBookViewcell setBookInfo:books];\n    return CheckBookViewcell;\n}\n- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {\n    Book *book;\n    if ([_searchController isActive]) {\n        book = searchResult[indexPath.row];\n    }else {\n        book = bookArray[indexPath.row];\n    }\n    BookDetialViewController *bookDetialVC = [[BookDetialViewController alloc]init:book];\n    [self.navigationController pushViewController:bookDetialVC animated:YES];\n    [tableView deselectRowAtIndexPath:indexPath animated:YES];                                                                                  // 取消选中的状态\n}</pre>\n\n<h2 id=\"最后注意\"><a href=\"#最后注意\" class=\"headerlink\" title=\"最后注意!\"></a>最后注意!</h2><p>&emsp;&emsp;在离开界面时要销毁掉UISearchController，不然它会在其它界面一直存在：</p>\n<pre>- (void)viewWillDisappear:(BOOL)animated {\n    [super viewWillDisappear:animated];\n    if (self.searchController.active) {\n        self.searchController.active = NO;\n        [self.searchController.searchBar removeFromSuperview];\n    }\n}</pre>\n"},{"title":"iOS--离屏渲染带来的性能问题和解决办法","date":"2016-10-22T04:53:12.000Z","_content":"## 什么是离屏渲染 \n&emsp;&emsp;离屏渲染（Off-Screen Rendering）指的是在GPU在执行图层的合成时，会在当前屏幕的缓冲区外创建一个新的缓冲区去执行此操作，这样的话当GPU进行图层渲染时，都会先将图层移到屏幕外的缓冲区去执行合成操作，然后在移回当前屏幕的缓冲区进行渲染，由于这种转换会发生在渲染的每一帧，所以如果当前屏幕如果有大量的图层需要执行离屏渲染操作时，那就会造成严重的性能问题，产生卡顿。其实离屏渲染是为了优化而生，只不过错误的使用才会导致卡顿的产生。  \n## 什么操作会产生离屏渲染  \n&emsp;&emsp;以下操在使用不当时可能会触发离屏渲染：  \n\n&emsp;&emsp;1. shouldRasterize（光栅化）  \n&emsp;&emsp;2. masks（遮罩）  \n&emsp;&emsp;3. shadows（阴影）  \n&emsp;&emsp;4. edge antialiasing（抗锯齿）    \n&emsp;&emsp;5. group opacity（不透明）  \n\n&emsp;&emsp;以设置圆角为例，通常我们设置圆角的方法很简单：\n```\nview.layer.cornerRadius = 5;\n```\n\n\n&emsp;&emsp;只需要一行代码就可以轻松的设置圆角，效果如下图：  \n![image01](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%9501.png)\n&emsp;&emsp;但是如果我们在当前view上又覆盖多个view，那么如果覆盖的view超出了圆角的范围，那么圆角的设置就失效了，为了避免这种情况的发生，我们可以为其加上一个属性：\n```\nview.layer.masksToBounds = YES;\n```\n\n&emsp;&emsp;执行代码，发现所有的子view都已经被设置了圆角，效果如下图：  \n![image02](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%9502.png)\n\n\n&emsp;&emsp;图片层次图：\n![image03](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%9503.png)\n&emsp;&emsp;看起来很完美，但是这个时候已经出发了离屏渲染，如果这个view足够多的话，就会造成非常明显的卡顿现象。  \n## 如何避免触发离屏渲染  \n&emsp;&emsp;还是以设置圆角为例，目前来看优化的方式有两种：\n### 1.静态内容视图  \n&emsp;&emsp;对于静态的视图，由于其内部结构和内容不会发生改变，所以可以通过设置“Rasterization”属性的方式来优化性能。\n### 2.动态内容视图  \n&emsp;&emsp;对于动态的视图，现在主流的解决方案是在view的最外层盖上一个圆角的遮罩，来达到设置圆角的目的，如下图：\n![image04](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%9504.png)  \n&emsp;&emsp;这种方法简单粗暴，而且效果非常好，但是缺点就是对背景颜色有要求，因为是在view的最外层覆盖了一个圆角view，所以就要求圆角view的颜色必须和当前视图所在view的背景颜色一致，如果背景颜色是动态改变或者不是纯色背景，那就不适合这种方法。  \n&emsp;&emsp;下面给出一个生成圆角遮罩图的方法：  \n<pre>- (UIImage * ) drawRoundedCornerImageWithRadius:(CGFloat)radius Rectsize:(CGSize)rectSize BackgroundColor:(UIColor* ) backgroundColor {\n    UIGraphicsBeginImageContextWithOptions(rectSize, NO, [UIScreen mainScreen].scale);\n    CGContextRef currentContext = UIGraphicsGetCurrentContext();\n    UIBezierPath *bezierPath = [[UIBezierPath alloc]init];  \n    CGPoint hLeftUpPoint = CGPointMake(radius, 0);\n    CGPoint hRightUpPoint = CGPointMake(rectSize.width - radius, 0);\n    CGPoint hLeftDownPoint = CGPointMake(radius, rectSize.height);\n    CGPoint vLeftUpPoint = CGPointMake(0, radius);\n    CGPoint vRightDownPoint = CGPointMake(rectSize.width, rectSize.height - radius);\n    CGPoint centerLeftUp = CGPointMake(radius, radius);\n    CGPoint centerRightUp = CGPointMake(rectSize.width - radius, radius);\n    CGPoint centerLeftDown = CGPointMake(radius, rectSize.height - radius);\n    CGPoint centerRightDown = CGPointMake(rectSize.width - radius, rectSize.height - radius);  \n    [bezierPath moveToPoint:hLeftUpPoint];\n    [bezierPath addLineToPoint:hRightUpPoint];\n    [bezierPath addArcWithCenter:centerRightUp radius:radius startAngle:M_PI * 3 / 2 endAngle:M_PI * 2 clockwise:true];\n    [bezierPath addLineToPoint:vRightDownPoint];\n    [bezierPath addArcWithCenter:centerRightDown radius:radius startAngle:0 endAngle:M_PI / 2 clockwise:true];\n    [bezierPath addLineToPoint:hLeftDownPoint];\n    [bezierPath addArcWithCenter:centerLeftDown radius:radius startAngle:M_PI / 2 endAngle:M_PI clockwise:true];\n    [bezierPath addLineToPoint:vLeftUpPoint];\n    [bezierPath addArcWithCenter:centerLeftUp radius:radius startAngle:M_PI endAngle:M_PI * 3 / 2 clockwise:true];\n    [bezierPath addLineToPoint:hLeftUpPoint];\n    [bezierPath closePath];  \n    [bezierPath moveToPoint:CGPointZero];\n    [bezierPath addLineToPoint:CGPointMake(0, rectSize.height)];\n    [bezierPath addLineToPoint:CGPointMake(rectSize.width, rectSize.height)];\n    [bezierPath addLineToPoint:CGPointMake(rectSize.width, 0)];\n    [bezierPath moveToPoint:CGPointZero];\n    [bezierPath closePath];  \n    [backgroundColor setFill];\n    [bezierPath fill];  \n    CGContextDrawPath(currentContext, kCGPathFillStroke);\n    UIImage * antiRoundedCornerImage = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();  \n    return antiRoundedCornerImage;\n}</pre>  \n## 再优化  \n&emsp;&emsp;覆盖一个圆角view已经可以非常完美的应付绝大多数情况的离屏渲染，但是每个view在生成的时候都要去调用一遍生成圆角的方法去重新绘制一个圆角view，也是一种性能的浪费，所以可以在这个基础上对画好的圆角view做一个缓存，如果后续的view需要一样的圆角view那就不需要重新绘制，只需要去内存中取已经画好的圆角view就可以了。  \n## 参考文章  \n[离屏渲染优化详解：实例示范+性能测试](http://www.jianshu.com/p/ca51c9d3575b)\n","source":"_posts/iOS-离屏渲染带来的性能问题和解决办法.md","raw":"---\ntitle: iOS--离屏渲染带来的性能问题和解决办法\ndate: 2016-10-22 12:53:12  \ncategories:\n- iOS开发总结\ntags:\n- iOS\n---\n## 什么是离屏渲染 \n&emsp;&emsp;离屏渲染（Off-Screen Rendering）指的是在GPU在执行图层的合成时，会在当前屏幕的缓冲区外创建一个新的缓冲区去执行此操作，这样的话当GPU进行图层渲染时，都会先将图层移到屏幕外的缓冲区去执行合成操作，然后在移回当前屏幕的缓冲区进行渲染，由于这种转换会发生在渲染的每一帧，所以如果当前屏幕如果有大量的图层需要执行离屏渲染操作时，那就会造成严重的性能问题，产生卡顿。其实离屏渲染是为了优化而生，只不过错误的使用才会导致卡顿的产生。  \n## 什么操作会产生离屏渲染  \n&emsp;&emsp;以下操在使用不当时可能会触发离屏渲染：  \n\n&emsp;&emsp;1. shouldRasterize（光栅化）  \n&emsp;&emsp;2. masks（遮罩）  \n&emsp;&emsp;3. shadows（阴影）  \n&emsp;&emsp;4. edge antialiasing（抗锯齿）    \n&emsp;&emsp;5. group opacity（不透明）  \n\n&emsp;&emsp;以设置圆角为例，通常我们设置圆角的方法很简单：\n```\nview.layer.cornerRadius = 5;\n```\n\n\n&emsp;&emsp;只需要一行代码就可以轻松的设置圆角，效果如下图：  \n![image01](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%9501.png)\n&emsp;&emsp;但是如果我们在当前view上又覆盖多个view，那么如果覆盖的view超出了圆角的范围，那么圆角的设置就失效了，为了避免这种情况的发生，我们可以为其加上一个属性：\n```\nview.layer.masksToBounds = YES;\n```\n\n&emsp;&emsp;执行代码，发现所有的子view都已经被设置了圆角，效果如下图：  \n![image02](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%9502.png)\n\n\n&emsp;&emsp;图片层次图：\n![image03](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%9503.png)\n&emsp;&emsp;看起来很完美，但是这个时候已经出发了离屏渲染，如果这个view足够多的话，就会造成非常明显的卡顿现象。  \n## 如何避免触发离屏渲染  \n&emsp;&emsp;还是以设置圆角为例，目前来看优化的方式有两种：\n### 1.静态内容视图  \n&emsp;&emsp;对于静态的视图，由于其内部结构和内容不会发生改变，所以可以通过设置“Rasterization”属性的方式来优化性能。\n### 2.动态内容视图  \n&emsp;&emsp;对于动态的视图，现在主流的解决方案是在view的最外层盖上一个圆角的遮罩，来达到设置圆角的目的，如下图：\n![image04](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%9504.png)  \n&emsp;&emsp;这种方法简单粗暴，而且效果非常好，但是缺点就是对背景颜色有要求，因为是在view的最外层覆盖了一个圆角view，所以就要求圆角view的颜色必须和当前视图所在view的背景颜色一致，如果背景颜色是动态改变或者不是纯色背景，那就不适合这种方法。  \n&emsp;&emsp;下面给出一个生成圆角遮罩图的方法：  \n<pre>- (UIImage * ) drawRoundedCornerImageWithRadius:(CGFloat)radius Rectsize:(CGSize)rectSize BackgroundColor:(UIColor* ) backgroundColor {\n    UIGraphicsBeginImageContextWithOptions(rectSize, NO, [UIScreen mainScreen].scale);\n    CGContextRef currentContext = UIGraphicsGetCurrentContext();\n    UIBezierPath *bezierPath = [[UIBezierPath alloc]init];  \n    CGPoint hLeftUpPoint = CGPointMake(radius, 0);\n    CGPoint hRightUpPoint = CGPointMake(rectSize.width - radius, 0);\n    CGPoint hLeftDownPoint = CGPointMake(radius, rectSize.height);\n    CGPoint vLeftUpPoint = CGPointMake(0, radius);\n    CGPoint vRightDownPoint = CGPointMake(rectSize.width, rectSize.height - radius);\n    CGPoint centerLeftUp = CGPointMake(radius, radius);\n    CGPoint centerRightUp = CGPointMake(rectSize.width - radius, radius);\n    CGPoint centerLeftDown = CGPointMake(radius, rectSize.height - radius);\n    CGPoint centerRightDown = CGPointMake(rectSize.width - radius, rectSize.height - radius);  \n    [bezierPath moveToPoint:hLeftUpPoint];\n    [bezierPath addLineToPoint:hRightUpPoint];\n    [bezierPath addArcWithCenter:centerRightUp radius:radius startAngle:M_PI * 3 / 2 endAngle:M_PI * 2 clockwise:true];\n    [bezierPath addLineToPoint:vRightDownPoint];\n    [bezierPath addArcWithCenter:centerRightDown radius:radius startAngle:0 endAngle:M_PI / 2 clockwise:true];\n    [bezierPath addLineToPoint:hLeftDownPoint];\n    [bezierPath addArcWithCenter:centerLeftDown radius:radius startAngle:M_PI / 2 endAngle:M_PI clockwise:true];\n    [bezierPath addLineToPoint:vLeftUpPoint];\n    [bezierPath addArcWithCenter:centerLeftUp radius:radius startAngle:M_PI endAngle:M_PI * 3 / 2 clockwise:true];\n    [bezierPath addLineToPoint:hLeftUpPoint];\n    [bezierPath closePath];  \n    [bezierPath moveToPoint:CGPointZero];\n    [bezierPath addLineToPoint:CGPointMake(0, rectSize.height)];\n    [bezierPath addLineToPoint:CGPointMake(rectSize.width, rectSize.height)];\n    [bezierPath addLineToPoint:CGPointMake(rectSize.width, 0)];\n    [bezierPath moveToPoint:CGPointZero];\n    [bezierPath closePath];  \n    [backgroundColor setFill];\n    [bezierPath fill];  \n    CGContextDrawPath(currentContext, kCGPathFillStroke);\n    UIImage * antiRoundedCornerImage = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();  \n    return antiRoundedCornerImage;\n}</pre>  \n## 再优化  \n&emsp;&emsp;覆盖一个圆角view已经可以非常完美的应付绝大多数情况的离屏渲染，但是每个view在生成的时候都要去调用一遍生成圆角的方法去重新绘制一个圆角view，也是一种性能的浪费，所以可以在这个基础上对画好的圆角view做一个缓存，如果后续的view需要一样的圆角view那就不需要重新绘制，只需要去内存中取已经画好的圆角view就可以了。  \n## 参考文章  \n[离屏渲染优化详解：实例示范+性能测试](http://www.jianshu.com/p/ca51c9d3575b)\n","slug":"iOS-离屏渲染带来的性能问题和解决办法","published":1,"updated":"2016-10-22T08:20:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjat0x9yb001bclqdfamwfaxi","content":"<h2 id=\"什么是离屏渲染\"><a href=\"#什么是离屏渲染\" class=\"headerlink\" title=\"什么是离屏渲染\"></a>什么是离屏渲染</h2><p>&emsp;&emsp;离屏渲染（Off-Screen Rendering）指的是在GPU在执行图层的合成时，会在当前屏幕的缓冲区外创建一个新的缓冲区去执行此操作，这样的话当GPU进行图层渲染时，都会先将图层移到屏幕外的缓冲区去执行合成操作，然后在移回当前屏幕的缓冲区进行渲染，由于这种转换会发生在渲染的每一帧，所以如果当前屏幕如果有大量的图层需要执行离屏渲染操作时，那就会造成严重的性能问题，产生卡顿。其实离屏渲染是为了优化而生，只不过错误的使用才会导致卡顿的产生。  </p>\n<h2 id=\"什么操作会产生离屏渲染\"><a href=\"#什么操作会产生离屏渲染\" class=\"headerlink\" title=\"什么操作会产生离屏渲染\"></a>什么操作会产生离屏渲染</h2><p>&emsp;&emsp;以下操在使用不当时可能会触发离屏渲染：  </p>\n<p>&emsp;&emsp;1. shouldRasterize（光栅化）<br>&emsp;&emsp;2. masks（遮罩）<br>&emsp;&emsp;3. shadows（阴影）<br>&emsp;&emsp;4. edge antialiasing（抗锯齿）<br>&emsp;&emsp;5. group opacity（不透明）  </p>\n<p>&emsp;&emsp;以设置圆角为例，通常我们设置圆角的方法很简单：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.layer.cornerRadius = 5;</div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;只需要一行代码就可以轻松的设置圆角，效果如下图：<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%9501.png\" alt=\"image01\"><br>&emsp;&emsp;但是如果我们在当前view上又覆盖多个view，那么如果覆盖的view超出了圆角的范围，那么圆角的设置就失效了，为了避免这种情况的发生，我们可以为其加上一个属性：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.layer.masksToBounds = YES;</div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;执行代码，发现所有的子view都已经被设置了圆角，效果如下图：<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%9502.png\" alt=\"image02\"></p>\n<p>&emsp;&emsp;图片层次图：<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%9503.png\" alt=\"image03\"><br>&emsp;&emsp;看起来很完美，但是这个时候已经出发了离屏渲染，如果这个view足够多的话，就会造成非常明显的卡顿现象。  </p>\n<h2 id=\"如何避免触发离屏渲染\"><a href=\"#如何避免触发离屏渲染\" class=\"headerlink\" title=\"如何避免触发离屏渲染\"></a>如何避免触发离屏渲染</h2><p>&emsp;&emsp;还是以设置圆角为例，目前来看优化的方式有两种：</p>\n<h3 id=\"1-静态内容视图\"><a href=\"#1-静态内容视图\" class=\"headerlink\" title=\"1.静态内容视图\"></a>1.静态内容视图</h3><p>&emsp;&emsp;对于静态的视图，由于其内部结构和内容不会发生改变，所以可以通过设置“Rasterization”属性的方式来优化性能。</p>\n<h3 id=\"2-动态内容视图\"><a href=\"#2-动态内容视图\" class=\"headerlink\" title=\"2.动态内容视图\"></a>2.动态内容视图</h3><p>&emsp;&emsp;对于动态的视图，现在主流的解决方案是在view的最外层盖上一个圆角的遮罩，来达到设置圆角的目的，如下图：<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%9504.png\" alt=\"image04\"><br>&emsp;&emsp;这种方法简单粗暴，而且效果非常好，但是缺点就是对背景颜色有要求，因为是在view的最外层覆盖了一个圆角view，所以就要求圆角view的颜色必须和当前视图所在view的背景颜色一致，如果背景颜色是动态改变或者不是纯色背景，那就不适合这种方法。<br>&emsp;&emsp;下面给出一个生成圆角遮罩图的方法：  </p>\n<p><pre>- (UIImage <em> ) drawRoundedCornerImageWithRadius:(CGFloat)radius Rectsize:(CGSize)rectSize BackgroundColor:(UIColor</em> ) backgroundColor {<br>    UIGraphicsBeginImageContextWithOptions(rectSize, NO, [UIScreen mainScreen].scale);<br>    CGContextRef currentContext = UIGraphicsGetCurrentContext();<br>    UIBezierPath <em>bezierPath = [[UIBezierPath alloc]init];<br>    CGPoint hLeftUpPoint = CGPointMake(radius, 0);<br>    CGPoint hRightUpPoint = CGPointMake(rectSize.width - radius, 0);<br>    CGPoint hLeftDownPoint = CGPointMake(radius, rectSize.height);<br>    CGPoint vLeftUpPoint = CGPointMake(0, radius);<br>    CGPoint vRightDownPoint = CGPointMake(rectSize.width, rectSize.height - radius);<br>    CGPoint centerLeftUp = CGPointMake(radius, radius);<br>    CGPoint centerRightUp = CGPointMake(rectSize.width - radius, radius);<br>    CGPoint centerLeftDown = CGPointMake(radius, rectSize.height - radius);<br>    CGPoint centerRightDown = CGPointMake(rectSize.width - radius, rectSize.height - radius);<br>    [bezierPath moveToPoint:hLeftUpPoint];<br>    [bezierPath addLineToPoint:hRightUpPoint];<br>    [bezierPath addArcWithCenter:centerRightUp radius:radius startAngle:M_PI </em> 3 / 2 endAngle:M_PI <em> 2 clockwise:true];<br>    [bezierPath addLineToPoint:vRightDownPoint];<br>    [bezierPath addArcWithCenter:centerRightDown radius:radius startAngle:0 endAngle:M_PI / 2 clockwise:true];<br>    [bezierPath addLineToPoint:hLeftDownPoint];<br>    [bezierPath addArcWithCenter:centerLeftDown radius:radius startAngle:M_PI / 2 endAngle:M_PI clockwise:true];<br>    [bezierPath addLineToPoint:vLeftUpPoint];<br>    [bezierPath addArcWithCenter:centerLeftUp radius:radius startAngle:M_PI endAngle:M_PI </em> 3 / 2 clockwise:true];<br>    [bezierPath addLineToPoint:hLeftUpPoint];<br>    [bezierPath closePath];<br>    [bezierPath moveToPoint:CGPointZero];<br>    [bezierPath addLineToPoint:CGPointMake(0, rectSize.height)];<br>    [bezierPath addLineToPoint:CGPointMake(rectSize.width, rectSize.height)];<br>    [bezierPath addLineToPoint:CGPointMake(rectSize.width, 0)];<br>    [bezierPath moveToPoint:CGPointZero];<br>    [bezierPath closePath];<br>    [backgroundColor setFill];<br>    [bezierPath fill];<br>    CGContextDrawPath(currentContext, kCGPathFillStroke);<br>    UIImage * antiRoundedCornerImage = UIGraphicsGetImageFromCurrentImageContext();<br>    UIGraphicsEndImageContext();<br>    return antiRoundedCornerImage;<br>}</pre>  </p>\n<h2 id=\"再优化\"><a href=\"#再优化\" class=\"headerlink\" title=\"再优化\"></a>再优化</h2><p>&emsp;&emsp;覆盖一个圆角view已经可以非常完美的应付绝大多数情况的离屏渲染，但是每个view在生成的时候都要去调用一遍生成圆角的方法去重新绘制一个圆角view，也是一种性能的浪费，所以可以在这个基础上对画好的圆角view做一个缓存，如果后续的view需要一样的圆角view那就不需要重新绘制，只需要去内存中取已经画好的圆角view就可以了。  </p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"http://www.jianshu.com/p/ca51c9d3575b\" target=\"_blank\" rel=\"external\">离屏渲染优化详解：实例示范+性能测试</a></p>\n","excerpt":"","more":"<h2 id=\"什么是离屏渲染\"><a href=\"#什么是离屏渲染\" class=\"headerlink\" title=\"什么是离屏渲染\"></a>什么是离屏渲染</h2><p>&emsp;&emsp;离屏渲染（Off-Screen Rendering）指的是在GPU在执行图层的合成时，会在当前屏幕的缓冲区外创建一个新的缓冲区去执行此操作，这样的话当GPU进行图层渲染时，都会先将图层移到屏幕外的缓冲区去执行合成操作，然后在移回当前屏幕的缓冲区进行渲染，由于这种转换会发生在渲染的每一帧，所以如果当前屏幕如果有大量的图层需要执行离屏渲染操作时，那就会造成严重的性能问题，产生卡顿。其实离屏渲染是为了优化而生，只不过错误的使用才会导致卡顿的产生。  </p>\n<h2 id=\"什么操作会产生离屏渲染\"><a href=\"#什么操作会产生离屏渲染\" class=\"headerlink\" title=\"什么操作会产生离屏渲染\"></a>什么操作会产生离屏渲染</h2><p>&emsp;&emsp;以下操在使用不当时可能会触发离屏渲染：  </p>\n<p>&emsp;&emsp;1. shouldRasterize（光栅化）<br>&emsp;&emsp;2. masks（遮罩）<br>&emsp;&emsp;3. shadows（阴影）<br>&emsp;&emsp;4. edge antialiasing（抗锯齿）<br>&emsp;&emsp;5. group opacity（不透明）  </p>\n<p>&emsp;&emsp;以设置圆角为例，通常我们设置圆角的方法很简单：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.layer.cornerRadius = 5;</div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;只需要一行代码就可以轻松的设置圆角，效果如下图：<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%9501.png\" alt=\"image01\"><br>&emsp;&emsp;但是如果我们在当前view上又覆盖多个view，那么如果覆盖的view超出了圆角的范围，那么圆角的设置就失效了，为了避免这种情况的发生，我们可以为其加上一个属性：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.layer.masksToBounds = YES;</div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;执行代码，发现所有的子view都已经被设置了圆角，效果如下图：<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%9502.png\" alt=\"image02\"></p>\n<p>&emsp;&emsp;图片层次图：<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%9503.png\" alt=\"image03\"><br>&emsp;&emsp;看起来很完美，但是这个时候已经出发了离屏渲染，如果这个view足够多的话，就会造成非常明显的卡顿现象。  </p>\n<h2 id=\"如何避免触发离屏渲染\"><a href=\"#如何避免触发离屏渲染\" class=\"headerlink\" title=\"如何避免触发离屏渲染\"></a>如何避免触发离屏渲染</h2><p>&emsp;&emsp;还是以设置圆角为例，目前来看优化的方式有两种：</p>\n<h3 id=\"1-静态内容视图\"><a href=\"#1-静态内容视图\" class=\"headerlink\" title=\"1.静态内容视图\"></a>1.静态内容视图</h3><p>&emsp;&emsp;对于静态的视图，由于其内部结构和内容不会发生改变，所以可以通过设置“Rasterization”属性的方式来优化性能。</p>\n<h3 id=\"2-动态内容视图\"><a href=\"#2-动态内容视图\" class=\"headerlink\" title=\"2.动态内容视图\"></a>2.动态内容视图</h3><p>&emsp;&emsp;对于动态的视图，现在主流的解决方案是在view的最外层盖上一个圆角的遮罩，来达到设置圆角的目的，如下图：<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/iOS--%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%9504.png\" alt=\"image04\"><br>&emsp;&emsp;这种方法简单粗暴，而且效果非常好，但是缺点就是对背景颜色有要求，因为是在view的最外层覆盖了一个圆角view，所以就要求圆角view的颜色必须和当前视图所在view的背景颜色一致，如果背景颜色是动态改变或者不是纯色背景，那就不适合这种方法。<br>&emsp;&emsp;下面给出一个生成圆角遮罩图的方法：  </p>\n<p><pre>- (UIImage <em> ) drawRoundedCornerImageWithRadius:(CGFloat)radius Rectsize:(CGSize)rectSize BackgroundColor:(UIColor</em> ) backgroundColor {<br>    UIGraphicsBeginImageContextWithOptions(rectSize, NO, [UIScreen mainScreen].scale);<br>    CGContextRef currentContext = UIGraphicsGetCurrentContext();<br>    UIBezierPath <em>bezierPath = [[UIBezierPath alloc]init];<br>    CGPoint hLeftUpPoint = CGPointMake(radius, 0);<br>    CGPoint hRightUpPoint = CGPointMake(rectSize.width - radius, 0);<br>    CGPoint hLeftDownPoint = CGPointMake(radius, rectSize.height);<br>    CGPoint vLeftUpPoint = CGPointMake(0, radius);<br>    CGPoint vRightDownPoint = CGPointMake(rectSize.width, rectSize.height - radius);<br>    CGPoint centerLeftUp = CGPointMake(radius, radius);<br>    CGPoint centerRightUp = CGPointMake(rectSize.width - radius, radius);<br>    CGPoint centerLeftDown = CGPointMake(radius, rectSize.height - radius);<br>    CGPoint centerRightDown = CGPointMake(rectSize.width - radius, rectSize.height - radius);<br>    [bezierPath moveToPoint:hLeftUpPoint];<br>    [bezierPath addLineToPoint:hRightUpPoint];<br>    [bezierPath addArcWithCenter:centerRightUp radius:radius startAngle:M_PI </em> 3 / 2 endAngle:M_PI <em> 2 clockwise:true];<br>    [bezierPath addLineToPoint:vRightDownPoint];<br>    [bezierPath addArcWithCenter:centerRightDown radius:radius startAngle:0 endAngle:M_PI / 2 clockwise:true];<br>    [bezierPath addLineToPoint:hLeftDownPoint];<br>    [bezierPath addArcWithCenter:centerLeftDown radius:radius startAngle:M_PI / 2 endAngle:M_PI clockwise:true];<br>    [bezierPath addLineToPoint:vLeftUpPoint];<br>    [bezierPath addArcWithCenter:centerLeftUp radius:radius startAngle:M_PI endAngle:M_PI </em> 3 / 2 clockwise:true];<br>    [bezierPath addLineToPoint:hLeftUpPoint];<br>    [bezierPath closePath];<br>    [bezierPath moveToPoint:CGPointZero];<br>    [bezierPath addLineToPoint:CGPointMake(0, rectSize.height)];<br>    [bezierPath addLineToPoint:CGPointMake(rectSize.width, rectSize.height)];<br>    [bezierPath addLineToPoint:CGPointMake(rectSize.width, 0)];<br>    [bezierPath moveToPoint:CGPointZero];<br>    [bezierPath closePath];<br>    [backgroundColor setFill];<br>    [bezierPath fill];<br>    CGContextDrawPath(currentContext, kCGPathFillStroke);<br>    UIImage * antiRoundedCornerImage = UIGraphicsGetImageFromCurrentImageContext();<br>    UIGraphicsEndImageContext();<br>    return antiRoundedCornerImage;<br>}</pre>  </p>\n<h2 id=\"再优化\"><a href=\"#再优化\" class=\"headerlink\" title=\"再优化\"></a>再优化</h2><p>&emsp;&emsp;覆盖一个圆角view已经可以非常完美的应付绝大多数情况的离屏渲染，但是每个view在生成的时候都要去调用一遍生成圆角的方法去重新绘制一个圆角view，也是一种性能的浪费，所以可以在这个基础上对画好的圆角view做一个缓存，如果后续的view需要一样的圆角view那就不需要重新绘制，只需要去内存中取已经画好的圆角view就可以了。  </p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"http://www.jianshu.com/p/ca51c9d3575b\">离屏渲染优化详解：实例示范+性能测试</a></p>\n"},{"title":"iOS--自定义转场动画","date":"2017-04-22T07:25:17.000Z","_content":"![TranslateAnimateLogo](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%20/iOS_TranslationAnimate.jpg)  \n## 概述  \n&emsp;&emsp;在iOS7中，苹果爸爸为开发者提供了一套全新的API去实现转场动画，开发者可以通过更灵活的方式去设计动画效果。同时，iOS7还支持用手势切换VC，比如你在某个应用中push了一个新的页面，那么你可以通过在屏幕左侧向右滑动来执行返回操作。\n## API  \n&emsp;&emsp;实现动画的主要API：  \n&emsp;&emsp;1. @protocol UIViewControllerContextTransitioning  \n&emsp;&emsp;2. @protocol UIViewControllerAnimatedTransitioning  \n&emsp;&emsp;3. @protocol UIViewControllerTransitioningDelegate  \n### UIViewControllerContextTransitioning  \n&emsp;&emsp;这个接口在切换VC过程中为我们提供了上下文，通过它我们可以获取到执行切换时，两个VC的详细信息。在实现跳转动画的方法中，系统会为我们提供这个上下文，所以开发者并不需要去实现这个接口。  \n### UIViewControllerAnimatedTransitioning  \n&emsp;&emsp;这个接口是在VC切换过程中起着非常重要的角色，因为它负责处理切换过程中的事件，也就是说我们要实现的动画效果等，都是在这里实现的。这里我们需要实现下面的两个方法。  \n&emsp;&emsp;``-(NSTimeInterval)transitionDuration:(id < UIViewControllerContextTransitioning >)transitionContext;``  \n&emsp;&emsp;返回切换过程所需要的时间。  \n&emsp;&emsp;``-(void)animateTransition:(id < UIViewControllerContextTransitioning >)transitionContext;``  \n&emsp;&emsp;切换时会调用此方法，动画效果都在这个方法里完成。  \n### UIViewControllerTransitioningDelegate\n&emsp;&emsp;对于想要执行自定义动画的VC需要实现这个接口，共有四个方法。  \n&emsp;&emsp;``-(id< UIViewControllerAnimatedTransitioning >)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source;``  \n&emsp;&emsp;跳转新页面的动画。  \n&emsp;&emsp;``-(id< UIViewControllerAnimatedTransitioning >)animationControllerForDismissedController:(UIViewController *)dismissed;``  \n&emsp;&emsp;当前页面消失的动画。  \n&emsp;&emsp;``-(id< UIViewControllerInteractiveTransitioning >)interactionControllerForPresentation:(id < UIViewControllerAnimatedTransitioning >)animator;``  \n&emsp;&emsp;手势控制页面跳转的动画。  \n&emsp;&emsp;``-(id< UIViewControllerInteractiveTransitioning >)interactionControllerForDismissal:(id < UIViewControllerAnimatedTransitioning >)animator;``  \n&emsp;&emsp;手势控制页面消失的动画。  \n## Demo  \n### 第一部分  \n&emsp;&emsp;我们先来尝试着实现如下图效果的页面切换。  \n![translateAnimate](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%20/Untitled.gif)  \n&emsp;&emsp;首先我们新建一个处理动画效果的类，这个类要实现“UIViewControllerAnimatedTransitioning”接口。  \nTranslationAnimateManager.h    \n\n``` objc\ntypedef NS_ENUM(NSUInteger, TransitionType) {\n    TransitionTypePresent,\n    TransitionTypeDismiss\n};\n\n@interface TranslationAnimateManager : NSObject <UIViewControllerAnimatedTransitioning>\n\n//根据定义的枚举初始化的两个方法\n+ (instancetype)transitionWithTransitionType:(TransitionType)type;\n- (instancetype)initWithTransitionType:(TransitionType)type;\n\n@end   \n\n```  \nTranslationAnimateManager.m    \n\n``` objc\n@interface TranslationAnimateManager ()\n\n@property (nonatomic, assign) TransitionType type;\n\n@end\n\n@implementation TranslationAnimateManager\n\n+ (instancetype)transitionWithTransitionType:(TransitionType)type {\n    static id sharedInstance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        sharedInstance = [[self alloc] initWithTransitionType:type];\n    });\n    return sharedInstance;\n}\n\n- (instancetype)initWithTransitionType:(TransitionType)type {\n    if (self = [super init]) {\n        self.type = type;\n    }\n    return self;\n}\n\n- (NSTimeInterval)transitionDuration:(id<UIViewControllerContextTransitioning>)transitionContext {\n    return 0.5;\n}\n\n- (void)animateTransition:(id<UIViewControllerContextTransitioning>)transitionContext {\n    switch (self.type) {\n        case TransitionTypePresent:\n            [self presentAnimation:transitionContext];\n            break;\n            \n        case TransitionTypeDismiss:\n            [self dismissAnimation:transitionContext];\n            break;\n    }\n}\n\n//实现present动画逻辑代码\n- (void)presentAnimation:(id<UIViewControllerContextTransitioning>)transitionContext{\n    UIViewController *fromVC = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];\n    UIViewController *toVC = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];\n    \n    UIView *toView = toVC.view;\n    UIView *fromView = fromVC.view;\n    UIView *containerView = [transitionContext containerView];\n    \n    UIView *toViewSnapshot = [UIView new];\n    toViewSnapshot.contentImage =  toView.snapshotImage;\n    toViewSnapshot.frame = containerView.bounds;\n    \n    CATransform3D scale = CATransform3DIdentity;\n    toViewSnapshot.layer.transform = CATransform3DScale(scale, 0.9, 0.9, 1);//\n    [containerView addSubview:toViewSnapshot];\n    [containerView sendSubviewToBack:toViewSnapshot];\n    CGRect upSnapshotRegion = CGRectMake(0, 0, fromView.frame.size.width, fromView.frame.size.height  * 0.5);\n    UIView *upHandView = [UIView new];\n    upHandView.contentImage = fromView.snapshotImage;\n    upHandView.layer.contentsRect = CGRectMake(0, 0, 1, 0.5);\n    upHandView.frame = upSnapshotRegion;\n    [containerView addSubview:upHandView];\n    \n    CGRect downSnapshotRegion = CGRectMake(0, fromView.frame.size.height * 0.5, fromView.frame.size.width, fromView.frame.size.height * 0.5);\n    UIView *downHandView = [UIView new];\n    downHandView.contentImage = upHandView.contentImage;\n    downHandView.layer.contentsRect = CGRectMake(0, 0.5, 1, 0.5);\n    downHandView.frame = downSnapshotRegion;\n    [containerView addSubview:downHandView];\n    \n    fromView.hidden = YES;\n    [UIView animateWithDuration:0.5\n                          delay:0.0\n                        options:UIViewAnimationOptionCurveEaseOut\n                     animations:^{\n                         upHandView.frame = CGRectOffset(upHandView.frame, 0, - upHandView.frame.size.height);\n                         downHandView.frame = CGRectOffset(downHandView.frame, 0, downHandView.frame.size.height);\n                         toViewSnapshot.center = toView.center;\n                         toViewSnapshot.frame = toView.frame;\n                     } completion:^(BOOL finished) {\n                         fromView.hidden = NO;\n                         if ([transitionContext transitionWasCancelled]) {\n                             [containerView addSubview:fromView];\n                             [self removeOtherViews:fromView];\n                         } else {\n                             [containerView addSubview:toView];\n                             [self removeOtherViews:toView];\n                         }\n                         [transitionContext completeTransition:![transitionContext transitionWasCancelled]];\n                     }];\n}\n//实现dismiss动画逻辑代码\n- (void)dismissAnimation:(id<UIViewControllerContextTransitioning>)transitionContext{\n    UIViewController *fromVC = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];\n    UIViewController *toVC = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];\n    UIView *toView = toVC.view;\n    UIView *fromView = fromVC.view;\n    UIView *containerView = [transitionContext containerView];\n    [containerView addSubview:fromView];\n    toView.frame = [transitionContext finalFrameForViewController:toVC];\n    toView.frame = CGRectOffset(toView.frame, toView.frame.size.width, 0);\n    [containerView addSubview:toView];\n    CGRect upSnapshotRegion = CGRectMake(0, 0, fromView.frame.size.width, fromView.frame.size.height * 0.5);\n    UIView *upHandView = [UIView new];\n    upHandView.contentImage = toView.snapshotImage;\n    upHandView.layer.contentsRect = CGRectMake(0, 0, 1, 0.5);\n    upHandView.frame = upSnapshotRegion;\n    upHandView.frame = CGRectOffset(upHandView.frame, 0, - upHandView.frame.size.height);\n    [containerView addSubview:upHandView];\n    CGRect downSnapshotRegion = CGRectMake(0, fromView.frame.size.height * 0.5, fromView.frame.size.width, fromView.frame.size.height * 0.5);\n    UIView *downHandView = [UIView new];\n    downHandView.contentImage = upHandView.contentImage;\n    downHandView.layer.contentsRect = CGRectMake(0, 0.5, 1, 0.5);\n    downHandView.frame = downSnapshotRegion;\n    downHandView.frame = CGRectOffset(downHandView.frame, 0, downHandView.frame.size.height);\n    [containerView addSubview:downHandView];\n    [UIView animateWithDuration:0.5\n                          delay:0.0\n                        options:UIViewAnimationOptionCurveEaseOut\n                     animations:^{\n                         upHandView.frame = CGRectOffset(upHandView.frame, 0, upHandView.frame.size.height);\n                         downHandView.frame = CGRectOffset(downHandView.frame, 0, - downHandView.frame.size.height);\n                         CATransform3D scale = CATransform3DIdentity;\n                         fromView.layer.transform = CATransform3DScale(scale, 0.9, 0.9, 1);//\n                     } completion:^(BOOL finished) {\n                         if ([transitionContext transitionWasCancelled]) {\n                             [self removeOtherViews:fromView];\n                         } else {\n                             [self removeOtherViews:toView];\n                             toView.frame = containerView.bounds;\n                         }\n                         [transitionContext completeTransition:![transitionContext transitionWasCancelled]];\n                     }];\n}\n\n- (void)removeOtherViews:(UIView*)viewToKeep {\n    UIView *containerView = viewToKeep.superview;\n    for (UIView *view in containerView.subviews) {\n        if (view != viewToKeep) {\n            [view removeFromSuperview];\n        }\n    }\n}\n\n@end\n```\n&emsp;&emsp;然后我们再新建一个初始VC，就叫“FromViewController”。这个页面只需要负责点击按钮跳转即可，省下什么都不用做。    \n\n``` objc\n@interface FromViewController ()\n@property (nonatomic, strong) ToViewController *toVC;\n@end\n\n@implementation FromViewController\n\n\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.view.backgroundColor = [UIColor brownColor];\n    \n    UIButton *button = [[UIButton alloc] initWithFrame:CGRectMake(self.view.bounds.size.width / 2 - 50, self.view.bounds.size.height / 2 - 15, 100, 30)];\n    [button setTitle:@\"点我跳转\" forState:UIControlStateNormal];\n    [button setBackgroundColor:[UIColor blackColor]];\n    [button addTarget:self action:@selector(buttonClick) forControlEvents:UIControlEventTouchUpInside];\n    button.layer.cornerRadius = 15;\n    [self.view addSubview:button];\n}\n\n- (void)buttonClick {\n    self.toVC = [[ToViewController alloc] init];\n    [self presentViewController:self.toVC animated:YES completion:nil];\n}\n```\n&emsp;&emsp;接下来我们再创建一个新的页面叫做“ToViewController”，是跳转后的界面，因为要实现自定的跳转动画，所以这个页面要实现“UIViewControllerTransitioningDelegate”接口。  \n\n```objc\n@interface ToViewController ()<UIViewControllerTransitioningDelegate>\n\n@end\n\n@implementation ToViewController\n\n- (id)init {\n    if (self = [super init]) {\n    }\n    return self;\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.transitioningDelegate = self;\n    self.modalPresentationStyle = UIModalPresentationCustom;\n    self.view.backgroundColor = [UIColor grayColor];\n    \n    UIButton *button = [[UIButton alloc] initWithFrame:CGRectMake(self.view.bounds.size.width / 2 - 50, self.view.bounds.size.height / 2 - 15, 100, 30)];\n    [button setTitle:@\"点我回退\" forState:UIControlStateNormal];\n    [button setBackgroundColor:[UIColor blackColor]];\n    [button addTarget:self action:@selector(buttonClick) forControlEvents:UIControlEventTouchUpInside];\n    button.layer.cornerRadius = 15;\n    [self.view addSubview:button];\n}\n\n- (void)buttonClick {\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n\n- (id <UIViewControllerAnimatedTransitioning>)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source {\n    return [TranslationAnimateManager transitionWithTransitionType:TransitionTypePresent];\n}\n\n- (id<UIViewControllerAnimatedTransitioning>)animationControllerForDismissedController:(UIViewController *)dismissed{\n    //这里我们初始化dismissType\n    return [[TranslationAnimateManager alloc ]initWithTransitionType:TransitionTypeDismiss];\n}\n```  \n&emsp;&emsp;至此，我们就完成了第一部分自定义跳转动画，赶快运行起来试试吧～  \n### 第二部分\n&emsp;&emsp;现在我们点击按钮可以让页面按照我们写好的动画跳转到下一个页面，但是还有一个手势控制我们没有实现，利用手势控制我们可以实现更加友好的界面操作。  \n&emsp;&emsp;我们再创建一个类，继承自“UIPercentDrivenInteractiveTransition”，用来监听我们的手势操作。  \n\n``` obj\n@interface SwipeInteractiveTransition ()\n\n@property (nonatomic, assign) BOOL shouldComplete;\n@property (nonatomic, strong) UIViewController *presentingVC;\n@property (nonatomic, strong) UIViewController *targetVC;\n\n@end\n\n@implementation SwipeInteractiveTransition\n\n+ (instancetype)sharedInstance {\n    static id sharedInstance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        sharedInstance = [[self alloc] init];\n    });\n    return sharedInstance;\n}\n\n-(void)wireToViewController:(UIViewController *)viewController\n{\n    self.presentingVC = viewController;\n    [self prepareGestureRecognizerInView:viewController.view];\n}\n\n- (void)writeTargetViewController:(UIViewController *)viewController {\n    self.targetVC = viewController;\n}\n\n- (void)prepareGestureRecognizerInView:(UIView*)view {\n    UIPanGestureRecognizer *gesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(handleGesture:)];\n    [view addGestureRecognizer:gesture];\n}\n\n-(CGFloat)completionSpeed\n{\n    return 1 - self.percentComplete;\n}\n\n- (void)handleGesture:(UIPanGestureRecognizer *)gestureRecognizer {\n    CGPoint translation = [gestureRecognizer translationInView:gestureRecognizer.view.superview];\n    switch (gestureRecognizer.state) {\n        case UIGestureRecognizerStateBegan: {\n            self.interacting = YES;\n            self.targetVC = [[ToViewController alloc] init];\n            [self.presentingVC presentViewController:self.targetVC animated:YES completion:nil];\n        }\n            break;\n        case UIGestureRecognizerStateChanged: {\n            NSInteger y =  translation.y;\n            CGFloat fraction = y / 200.0;\n            fraction = fminf(fmaxf(fraction, 0.0), 1.0);\n            self.shouldComplete = (fraction > 0.1);\n            \n            [self updateInteractiveTransition:fraction];\n            break;\n        }\n        case UIGestureRecognizerStateEnded:\n        case UIGestureRecognizerStateCancelled: {\n            self.interacting = NO;\n            if (!self.shouldComplete || gestureRecognizer.state == UIGestureRecognizerStateCancelled) {\n                [self cancelInteractiveTransition];\n            } else {\n                [self finishInteractiveTransition];\n            }\n            break;\n        }\n        default:\n            break;\n    }\n}\n\n@end\n```  \n&emsp;&emsp;然后在“FromViewController”中，我们添加如下代码注册手势监听：  \n\n``` objc\nself.toVC = [[ToViewController alloc] init];\nSwipeInteractiveTransition *swipeInteractiveTransition = [SwipeInteractiveTransition sharedInstance];\n[swipeInteractiveTransition wireToViewController:self];\n[swipeInteractiveTransition writeTargetViewController:self.toVC];\n```  \n&emsp;&emsp;在“ToViewController”中，我们要实现下面的方法：  \n\n``` objc\n-(id<UIViewControllerInteractiveTransitioning>)interactionControllerForPresentation:(id<UIViewControllerAnimatedTransitioning>)animator {\n    return [SwipeInteractiveTransition sharedInstance].interacting ? [SwipeInteractiveTransition sharedInstance] : nil;\n}\n```  \n&emsp;&emsp;如果没有手势触发或者手势触发失败，这个方法会返回空，此时系统会自动调用``- (id <UIViewControllerAnimatedTransitioning>)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source``这个方法去执行跳转动画。  \n&emsp;&emsp;我们看下完成后的效果。  \n![translateAnimate2](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%20/Untitled2.gif)  \n&emsp;&emsp;看着还是很nice的。其实苹果为我们提供的动画接口还是很强大的，如果利用好了可以做出很多酷炫的效果和新颖的交互。\n\n\n","source":"_posts/iOS-自定义转场动画.md","raw":"---\ntitle: iOS--自定义转场动画\ndate: 2017-04-22 15:25:17\ncategories:\n- iOS开发总结\ntags:\n- iOS\n---\n![TranslateAnimateLogo](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%20/iOS_TranslationAnimate.jpg)  \n## 概述  \n&emsp;&emsp;在iOS7中，苹果爸爸为开发者提供了一套全新的API去实现转场动画，开发者可以通过更灵活的方式去设计动画效果。同时，iOS7还支持用手势切换VC，比如你在某个应用中push了一个新的页面，那么你可以通过在屏幕左侧向右滑动来执行返回操作。\n## API  \n&emsp;&emsp;实现动画的主要API：  \n&emsp;&emsp;1. @protocol UIViewControllerContextTransitioning  \n&emsp;&emsp;2. @protocol UIViewControllerAnimatedTransitioning  \n&emsp;&emsp;3. @protocol UIViewControllerTransitioningDelegate  \n### UIViewControllerContextTransitioning  \n&emsp;&emsp;这个接口在切换VC过程中为我们提供了上下文，通过它我们可以获取到执行切换时，两个VC的详细信息。在实现跳转动画的方法中，系统会为我们提供这个上下文，所以开发者并不需要去实现这个接口。  \n### UIViewControllerAnimatedTransitioning  \n&emsp;&emsp;这个接口是在VC切换过程中起着非常重要的角色，因为它负责处理切换过程中的事件，也就是说我们要实现的动画效果等，都是在这里实现的。这里我们需要实现下面的两个方法。  \n&emsp;&emsp;``-(NSTimeInterval)transitionDuration:(id < UIViewControllerContextTransitioning >)transitionContext;``  \n&emsp;&emsp;返回切换过程所需要的时间。  \n&emsp;&emsp;``-(void)animateTransition:(id < UIViewControllerContextTransitioning >)transitionContext;``  \n&emsp;&emsp;切换时会调用此方法，动画效果都在这个方法里完成。  \n### UIViewControllerTransitioningDelegate\n&emsp;&emsp;对于想要执行自定义动画的VC需要实现这个接口，共有四个方法。  \n&emsp;&emsp;``-(id< UIViewControllerAnimatedTransitioning >)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source;``  \n&emsp;&emsp;跳转新页面的动画。  \n&emsp;&emsp;``-(id< UIViewControllerAnimatedTransitioning >)animationControllerForDismissedController:(UIViewController *)dismissed;``  \n&emsp;&emsp;当前页面消失的动画。  \n&emsp;&emsp;``-(id< UIViewControllerInteractiveTransitioning >)interactionControllerForPresentation:(id < UIViewControllerAnimatedTransitioning >)animator;``  \n&emsp;&emsp;手势控制页面跳转的动画。  \n&emsp;&emsp;``-(id< UIViewControllerInteractiveTransitioning >)interactionControllerForDismissal:(id < UIViewControllerAnimatedTransitioning >)animator;``  \n&emsp;&emsp;手势控制页面消失的动画。  \n## Demo  \n### 第一部分  \n&emsp;&emsp;我们先来尝试着实现如下图效果的页面切换。  \n![translateAnimate](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%20/Untitled.gif)  \n&emsp;&emsp;首先我们新建一个处理动画效果的类，这个类要实现“UIViewControllerAnimatedTransitioning”接口。  \nTranslationAnimateManager.h    \n\n``` objc\ntypedef NS_ENUM(NSUInteger, TransitionType) {\n    TransitionTypePresent,\n    TransitionTypeDismiss\n};\n\n@interface TranslationAnimateManager : NSObject <UIViewControllerAnimatedTransitioning>\n\n//根据定义的枚举初始化的两个方法\n+ (instancetype)transitionWithTransitionType:(TransitionType)type;\n- (instancetype)initWithTransitionType:(TransitionType)type;\n\n@end   \n\n```  \nTranslationAnimateManager.m    \n\n``` objc\n@interface TranslationAnimateManager ()\n\n@property (nonatomic, assign) TransitionType type;\n\n@end\n\n@implementation TranslationAnimateManager\n\n+ (instancetype)transitionWithTransitionType:(TransitionType)type {\n    static id sharedInstance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        sharedInstance = [[self alloc] initWithTransitionType:type];\n    });\n    return sharedInstance;\n}\n\n- (instancetype)initWithTransitionType:(TransitionType)type {\n    if (self = [super init]) {\n        self.type = type;\n    }\n    return self;\n}\n\n- (NSTimeInterval)transitionDuration:(id<UIViewControllerContextTransitioning>)transitionContext {\n    return 0.5;\n}\n\n- (void)animateTransition:(id<UIViewControllerContextTransitioning>)transitionContext {\n    switch (self.type) {\n        case TransitionTypePresent:\n            [self presentAnimation:transitionContext];\n            break;\n            \n        case TransitionTypeDismiss:\n            [self dismissAnimation:transitionContext];\n            break;\n    }\n}\n\n//实现present动画逻辑代码\n- (void)presentAnimation:(id<UIViewControllerContextTransitioning>)transitionContext{\n    UIViewController *fromVC = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];\n    UIViewController *toVC = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];\n    \n    UIView *toView = toVC.view;\n    UIView *fromView = fromVC.view;\n    UIView *containerView = [transitionContext containerView];\n    \n    UIView *toViewSnapshot = [UIView new];\n    toViewSnapshot.contentImage =  toView.snapshotImage;\n    toViewSnapshot.frame = containerView.bounds;\n    \n    CATransform3D scale = CATransform3DIdentity;\n    toViewSnapshot.layer.transform = CATransform3DScale(scale, 0.9, 0.9, 1);//\n    [containerView addSubview:toViewSnapshot];\n    [containerView sendSubviewToBack:toViewSnapshot];\n    CGRect upSnapshotRegion = CGRectMake(0, 0, fromView.frame.size.width, fromView.frame.size.height  * 0.5);\n    UIView *upHandView = [UIView new];\n    upHandView.contentImage = fromView.snapshotImage;\n    upHandView.layer.contentsRect = CGRectMake(0, 0, 1, 0.5);\n    upHandView.frame = upSnapshotRegion;\n    [containerView addSubview:upHandView];\n    \n    CGRect downSnapshotRegion = CGRectMake(0, fromView.frame.size.height * 0.5, fromView.frame.size.width, fromView.frame.size.height * 0.5);\n    UIView *downHandView = [UIView new];\n    downHandView.contentImage = upHandView.contentImage;\n    downHandView.layer.contentsRect = CGRectMake(0, 0.5, 1, 0.5);\n    downHandView.frame = downSnapshotRegion;\n    [containerView addSubview:downHandView];\n    \n    fromView.hidden = YES;\n    [UIView animateWithDuration:0.5\n                          delay:0.0\n                        options:UIViewAnimationOptionCurveEaseOut\n                     animations:^{\n                         upHandView.frame = CGRectOffset(upHandView.frame, 0, - upHandView.frame.size.height);\n                         downHandView.frame = CGRectOffset(downHandView.frame, 0, downHandView.frame.size.height);\n                         toViewSnapshot.center = toView.center;\n                         toViewSnapshot.frame = toView.frame;\n                     } completion:^(BOOL finished) {\n                         fromView.hidden = NO;\n                         if ([transitionContext transitionWasCancelled]) {\n                             [containerView addSubview:fromView];\n                             [self removeOtherViews:fromView];\n                         } else {\n                             [containerView addSubview:toView];\n                             [self removeOtherViews:toView];\n                         }\n                         [transitionContext completeTransition:![transitionContext transitionWasCancelled]];\n                     }];\n}\n//实现dismiss动画逻辑代码\n- (void)dismissAnimation:(id<UIViewControllerContextTransitioning>)transitionContext{\n    UIViewController *fromVC = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];\n    UIViewController *toVC = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];\n    UIView *toView = toVC.view;\n    UIView *fromView = fromVC.view;\n    UIView *containerView = [transitionContext containerView];\n    [containerView addSubview:fromView];\n    toView.frame = [transitionContext finalFrameForViewController:toVC];\n    toView.frame = CGRectOffset(toView.frame, toView.frame.size.width, 0);\n    [containerView addSubview:toView];\n    CGRect upSnapshotRegion = CGRectMake(0, 0, fromView.frame.size.width, fromView.frame.size.height * 0.5);\n    UIView *upHandView = [UIView new];\n    upHandView.contentImage = toView.snapshotImage;\n    upHandView.layer.contentsRect = CGRectMake(0, 0, 1, 0.5);\n    upHandView.frame = upSnapshotRegion;\n    upHandView.frame = CGRectOffset(upHandView.frame, 0, - upHandView.frame.size.height);\n    [containerView addSubview:upHandView];\n    CGRect downSnapshotRegion = CGRectMake(0, fromView.frame.size.height * 0.5, fromView.frame.size.width, fromView.frame.size.height * 0.5);\n    UIView *downHandView = [UIView new];\n    downHandView.contentImage = upHandView.contentImage;\n    downHandView.layer.contentsRect = CGRectMake(0, 0.5, 1, 0.5);\n    downHandView.frame = downSnapshotRegion;\n    downHandView.frame = CGRectOffset(downHandView.frame, 0, downHandView.frame.size.height);\n    [containerView addSubview:downHandView];\n    [UIView animateWithDuration:0.5\n                          delay:0.0\n                        options:UIViewAnimationOptionCurveEaseOut\n                     animations:^{\n                         upHandView.frame = CGRectOffset(upHandView.frame, 0, upHandView.frame.size.height);\n                         downHandView.frame = CGRectOffset(downHandView.frame, 0, - downHandView.frame.size.height);\n                         CATransform3D scale = CATransform3DIdentity;\n                         fromView.layer.transform = CATransform3DScale(scale, 0.9, 0.9, 1);//\n                     } completion:^(BOOL finished) {\n                         if ([transitionContext transitionWasCancelled]) {\n                             [self removeOtherViews:fromView];\n                         } else {\n                             [self removeOtherViews:toView];\n                             toView.frame = containerView.bounds;\n                         }\n                         [transitionContext completeTransition:![transitionContext transitionWasCancelled]];\n                     }];\n}\n\n- (void)removeOtherViews:(UIView*)viewToKeep {\n    UIView *containerView = viewToKeep.superview;\n    for (UIView *view in containerView.subviews) {\n        if (view != viewToKeep) {\n            [view removeFromSuperview];\n        }\n    }\n}\n\n@end\n```\n&emsp;&emsp;然后我们再新建一个初始VC，就叫“FromViewController”。这个页面只需要负责点击按钮跳转即可，省下什么都不用做。    \n\n``` objc\n@interface FromViewController ()\n@property (nonatomic, strong) ToViewController *toVC;\n@end\n\n@implementation FromViewController\n\n\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.view.backgroundColor = [UIColor brownColor];\n    \n    UIButton *button = [[UIButton alloc] initWithFrame:CGRectMake(self.view.bounds.size.width / 2 - 50, self.view.bounds.size.height / 2 - 15, 100, 30)];\n    [button setTitle:@\"点我跳转\" forState:UIControlStateNormal];\n    [button setBackgroundColor:[UIColor blackColor]];\n    [button addTarget:self action:@selector(buttonClick) forControlEvents:UIControlEventTouchUpInside];\n    button.layer.cornerRadius = 15;\n    [self.view addSubview:button];\n}\n\n- (void)buttonClick {\n    self.toVC = [[ToViewController alloc] init];\n    [self presentViewController:self.toVC animated:YES completion:nil];\n}\n```\n&emsp;&emsp;接下来我们再创建一个新的页面叫做“ToViewController”，是跳转后的界面，因为要实现自定的跳转动画，所以这个页面要实现“UIViewControllerTransitioningDelegate”接口。  \n\n```objc\n@interface ToViewController ()<UIViewControllerTransitioningDelegate>\n\n@end\n\n@implementation ToViewController\n\n- (id)init {\n    if (self = [super init]) {\n    }\n    return self;\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.transitioningDelegate = self;\n    self.modalPresentationStyle = UIModalPresentationCustom;\n    self.view.backgroundColor = [UIColor grayColor];\n    \n    UIButton *button = [[UIButton alloc] initWithFrame:CGRectMake(self.view.bounds.size.width / 2 - 50, self.view.bounds.size.height / 2 - 15, 100, 30)];\n    [button setTitle:@\"点我回退\" forState:UIControlStateNormal];\n    [button setBackgroundColor:[UIColor blackColor]];\n    [button addTarget:self action:@selector(buttonClick) forControlEvents:UIControlEventTouchUpInside];\n    button.layer.cornerRadius = 15;\n    [self.view addSubview:button];\n}\n\n- (void)buttonClick {\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n\n- (id <UIViewControllerAnimatedTransitioning>)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source {\n    return [TranslationAnimateManager transitionWithTransitionType:TransitionTypePresent];\n}\n\n- (id<UIViewControllerAnimatedTransitioning>)animationControllerForDismissedController:(UIViewController *)dismissed{\n    //这里我们初始化dismissType\n    return [[TranslationAnimateManager alloc ]initWithTransitionType:TransitionTypeDismiss];\n}\n```  \n&emsp;&emsp;至此，我们就完成了第一部分自定义跳转动画，赶快运行起来试试吧～  \n### 第二部分\n&emsp;&emsp;现在我们点击按钮可以让页面按照我们写好的动画跳转到下一个页面，但是还有一个手势控制我们没有实现，利用手势控制我们可以实现更加友好的界面操作。  \n&emsp;&emsp;我们再创建一个类，继承自“UIPercentDrivenInteractiveTransition”，用来监听我们的手势操作。  \n\n``` obj\n@interface SwipeInteractiveTransition ()\n\n@property (nonatomic, assign) BOOL shouldComplete;\n@property (nonatomic, strong) UIViewController *presentingVC;\n@property (nonatomic, strong) UIViewController *targetVC;\n\n@end\n\n@implementation SwipeInteractiveTransition\n\n+ (instancetype)sharedInstance {\n    static id sharedInstance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        sharedInstance = [[self alloc] init];\n    });\n    return sharedInstance;\n}\n\n-(void)wireToViewController:(UIViewController *)viewController\n{\n    self.presentingVC = viewController;\n    [self prepareGestureRecognizerInView:viewController.view];\n}\n\n- (void)writeTargetViewController:(UIViewController *)viewController {\n    self.targetVC = viewController;\n}\n\n- (void)prepareGestureRecognizerInView:(UIView*)view {\n    UIPanGestureRecognizer *gesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(handleGesture:)];\n    [view addGestureRecognizer:gesture];\n}\n\n-(CGFloat)completionSpeed\n{\n    return 1 - self.percentComplete;\n}\n\n- (void)handleGesture:(UIPanGestureRecognizer *)gestureRecognizer {\n    CGPoint translation = [gestureRecognizer translationInView:gestureRecognizer.view.superview];\n    switch (gestureRecognizer.state) {\n        case UIGestureRecognizerStateBegan: {\n            self.interacting = YES;\n            self.targetVC = [[ToViewController alloc] init];\n            [self.presentingVC presentViewController:self.targetVC animated:YES completion:nil];\n        }\n            break;\n        case UIGestureRecognizerStateChanged: {\n            NSInteger y =  translation.y;\n            CGFloat fraction = y / 200.0;\n            fraction = fminf(fmaxf(fraction, 0.0), 1.0);\n            self.shouldComplete = (fraction > 0.1);\n            \n            [self updateInteractiveTransition:fraction];\n            break;\n        }\n        case UIGestureRecognizerStateEnded:\n        case UIGestureRecognizerStateCancelled: {\n            self.interacting = NO;\n            if (!self.shouldComplete || gestureRecognizer.state == UIGestureRecognizerStateCancelled) {\n                [self cancelInteractiveTransition];\n            } else {\n                [self finishInteractiveTransition];\n            }\n            break;\n        }\n        default:\n            break;\n    }\n}\n\n@end\n```  \n&emsp;&emsp;然后在“FromViewController”中，我们添加如下代码注册手势监听：  \n\n``` objc\nself.toVC = [[ToViewController alloc] init];\nSwipeInteractiveTransition *swipeInteractiveTransition = [SwipeInteractiveTransition sharedInstance];\n[swipeInteractiveTransition wireToViewController:self];\n[swipeInteractiveTransition writeTargetViewController:self.toVC];\n```  \n&emsp;&emsp;在“ToViewController”中，我们要实现下面的方法：  \n\n``` objc\n-(id<UIViewControllerInteractiveTransitioning>)interactionControllerForPresentation:(id<UIViewControllerAnimatedTransitioning>)animator {\n    return [SwipeInteractiveTransition sharedInstance].interacting ? [SwipeInteractiveTransition sharedInstance] : nil;\n}\n```  \n&emsp;&emsp;如果没有手势触发或者手势触发失败，这个方法会返回空，此时系统会自动调用``- (id <UIViewControllerAnimatedTransitioning>)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source``这个方法去执行跳转动画。  \n&emsp;&emsp;我们看下完成后的效果。  \n![translateAnimate2](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%20/Untitled2.gif)  \n&emsp;&emsp;看着还是很nice的。其实苹果为我们提供的动画接口还是很强大的，如果利用好了可以做出很多酷炫的效果和新颖的交互。\n\n\n","slug":"iOS-自定义转场动画","published":1,"updated":"2017-05-15T13:05:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjat0x9ys001eclqdskez8jcd","content":"<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%20/iOS_TranslationAnimate.jpg\" alt=\"TranslateAnimateLogo\">  </p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>&emsp;&emsp;在iOS7中，苹果爸爸为开发者提供了一套全新的API去实现转场动画，开发者可以通过更灵活的方式去设计动画效果。同时，iOS7还支持用手势切换VC，比如你在某个应用中push了一个新的页面，那么你可以通过在屏幕左侧向右滑动来执行返回操作。</p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>&emsp;&emsp;实现动画的主要API：<br>&emsp;&emsp;1. @protocol UIViewControllerContextTransitioning<br>&emsp;&emsp;2. @protocol UIViewControllerAnimatedTransitioning<br>&emsp;&emsp;3. @protocol UIViewControllerTransitioningDelegate  </p>\n<h3 id=\"UIViewControllerContextTransitioning\"><a href=\"#UIViewControllerContextTransitioning\" class=\"headerlink\" title=\"UIViewControllerContextTransitioning\"></a>UIViewControllerContextTransitioning</h3><p>&emsp;&emsp;这个接口在切换VC过程中为我们提供了上下文，通过它我们可以获取到执行切换时，两个VC的详细信息。在实现跳转动画的方法中，系统会为我们提供这个上下文，所以开发者并不需要去实现这个接口。  </p>\n<h3 id=\"UIViewControllerAnimatedTransitioning\"><a href=\"#UIViewControllerAnimatedTransitioning\" class=\"headerlink\" title=\"UIViewControllerAnimatedTransitioning\"></a>UIViewControllerAnimatedTransitioning</h3><p>&emsp;&emsp;这个接口是在VC切换过程中起着非常重要的角色，因为它负责处理切换过程中的事件，也就是说我们要实现的动画效果等，都是在这里实现的。这里我们需要实现下面的两个方法。<br>&emsp;&emsp;<code>-(NSTimeInterval)transitionDuration:(id &lt; UIViewControllerContextTransitioning &gt;)transitionContext;</code><br>&emsp;&emsp;返回切换过程所需要的时间。<br>&emsp;&emsp;<code>-(void)animateTransition:(id &lt; UIViewControllerContextTransitioning &gt;)transitionContext;</code><br>&emsp;&emsp;切换时会调用此方法，动画效果都在这个方法里完成。  </p>\n<h3 id=\"UIViewControllerTransitioningDelegate\"><a href=\"#UIViewControllerTransitioningDelegate\" class=\"headerlink\" title=\"UIViewControllerTransitioningDelegate\"></a>UIViewControllerTransitioningDelegate</h3><p>&emsp;&emsp;对于想要执行自定义动画的VC需要实现这个接口，共有四个方法。<br>&emsp;&emsp;<code>-(id&lt; UIViewControllerAnimatedTransitioning &gt;)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source;</code><br>&emsp;&emsp;跳转新页面的动画。<br>&emsp;&emsp;<code>-(id&lt; UIViewControllerAnimatedTransitioning &gt;)animationControllerForDismissedController:(UIViewController *)dismissed;</code><br>&emsp;&emsp;当前页面消失的动画。<br>&emsp;&emsp;<code>-(id&lt; UIViewControllerInteractiveTransitioning &gt;)interactionControllerForPresentation:(id &lt; UIViewControllerAnimatedTransitioning &gt;)animator;</code><br>&emsp;&emsp;手势控制页面跳转的动画。<br>&emsp;&emsp;<code>-(id&lt; UIViewControllerInteractiveTransitioning &gt;)interactionControllerForDismissal:(id &lt; UIViewControllerAnimatedTransitioning &gt;)animator;</code><br>&emsp;&emsp;手势控制页面消失的动画。  </p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><h3 id=\"第一部分\"><a href=\"#第一部分\" class=\"headerlink\" title=\"第一部分\"></a>第一部分</h3><p>&emsp;&emsp;我们先来尝试着实现如下图效果的页面切换。<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%20/Untitled.gif\" alt=\"translateAnimate\"><br>&emsp;&emsp;首先我们新建一个处理动画效果的类，这个类要实现“UIViewControllerAnimatedTransitioning”接口。<br>TranslationAnimateManager.h    </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSUInteger</span>, TransitionType) &#123;</div><div class=\"line\">    TransitionTypePresent,</div><div class=\"line\">    TransitionTypeDismiss</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">TranslationAnimateManager</span> : <span class=\"title\">NSObject</span> &lt;<span class=\"title\">UIViewControllerAnimatedTransitioning</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据定义的枚举初始化的两个方法</span></div><div class=\"line\">+ (<span class=\"keyword\">instancetype</span>)transitionWithTransitionType:(TransitionType)type;</div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithTransitionType:(TransitionType)type;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span>   </div><div class=\"line\"></div><div class=\"line\">```  </div><div class=\"line\">TranslationAnimateManager.m    </div><div class=\"line\"></div><div class=\"line\">``` objc</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">TranslationAnimateManager</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) TransitionType type;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">TranslationAnimateManager</span></span></div><div class=\"line\"></div><div class=\"line\">+ (<span class=\"keyword\">instancetype</span>)transitionWithTransitionType:(TransitionType)type &#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">id</span> sharedInstance = <span class=\"literal\">nil</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</div><div class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class=\"line\">        sharedInstance = [[<span class=\"keyword\">self</span> alloc] initWithTransitionType:type];</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> sharedInstance;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithTransitionType:(TransitionType)type &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init]) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.type = type;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSTimeInterval</span>)transitionDuration:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIViewControllerContextTransitioning</span>&gt;)transitionContext &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0.5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)animateTransition:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIViewControllerContextTransitioning</span>&gt;)transitionContext &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">self</span>.type) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> TransitionTypePresent:</div><div class=\"line\">            [<span class=\"keyword\">self</span> presentAnimation:transitionContext];</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">case</span> TransitionTypeDismiss:</div><div class=\"line\">            [<span class=\"keyword\">self</span> dismissAnimation:transitionContext];</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//实现present动画逻辑代码</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)presentAnimation:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIViewControllerContextTransitioning</span>&gt;)transitionContext&#123;</div><div class=\"line\">    <span class=\"built_in\">UIViewController</span> *fromVC = [transitionContext viewControllerForKey:<span class=\"built_in\">UITransitionContextFromViewControllerKey</span>];</div><div class=\"line\">    <span class=\"built_in\">UIViewController</span> *toVC = [transitionContext viewControllerForKey:<span class=\"built_in\">UITransitionContextToViewControllerKey</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIView</span> *toView = toVC.view;</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *fromView = fromVC.view;</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *containerView = [transitionContext containerView];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIView</span> *toViewSnapshot = [<span class=\"built_in\">UIView</span> new];</div><div class=\"line\">    toViewSnapshot.contentImage =  toView.snapshotImage;</div><div class=\"line\">    toViewSnapshot.frame = containerView.bounds;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CATransform3D</span> scale = <span class=\"built_in\">CATransform3DIdentity</span>;</div><div class=\"line\">    toViewSnapshot.layer.transform = <span class=\"built_in\">CATransform3DScale</span>(scale, <span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>, <span class=\"number\">1</span>);<span class=\"comment\">//</span></div><div class=\"line\">    [containerView addSubview:toViewSnapshot];</div><div class=\"line\">    [containerView sendSubviewToBack:toViewSnapshot];</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> upSnapshotRegion = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, fromView.frame.size.width, fromView.frame.size.height  * <span class=\"number\">0.5</span>);</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *upHandView = [<span class=\"built_in\">UIView</span> new];</div><div class=\"line\">    upHandView.contentImage = fromView.snapshotImage;</div><div class=\"line\">    upHandView.layer.contentsRect = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0.5</span>);</div><div class=\"line\">    upHandView.frame = upSnapshotRegion;</div><div class=\"line\">    [containerView addSubview:upHandView];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGRect</span> downSnapshotRegion = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, fromView.frame.size.height * <span class=\"number\">0.5</span>, fromView.frame.size.width, fromView.frame.size.height * <span class=\"number\">0.5</span>);</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *downHandView = [<span class=\"built_in\">UIView</span> new];</div><div class=\"line\">    downHandView.contentImage = upHandView.contentImage;</div><div class=\"line\">    downHandView.layer.contentsRect = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0.5</span>, <span class=\"number\">1</span>, <span class=\"number\">0.5</span>);</div><div class=\"line\">    downHandView.frame = downSnapshotRegion;</div><div class=\"line\">    [containerView addSubview:downHandView];</div><div class=\"line\">    </div><div class=\"line\">    fromView.hidden = <span class=\"literal\">YES</span>;</div><div class=\"line\">    [<span class=\"built_in\">UIView</span> animateWithDuration:<span class=\"number\">0.5</span></div><div class=\"line\">                          delay:<span class=\"number\">0.0</span></div><div class=\"line\">                        options:<span class=\"built_in\">UIViewAnimationOptionCurveEaseOut</span></div><div class=\"line\">                     animations:^&#123;</div><div class=\"line\">                         upHandView.frame = <span class=\"built_in\">CGRectOffset</span>(upHandView.frame, <span class=\"number\">0</span>, - upHandView.frame.size.height);</div><div class=\"line\">                         downHandView.frame = <span class=\"built_in\">CGRectOffset</span>(downHandView.frame, <span class=\"number\">0</span>, downHandView.frame.size.height);</div><div class=\"line\">                         toViewSnapshot.center = toView.center;</div><div class=\"line\">                         toViewSnapshot.frame = toView.frame;</div><div class=\"line\">                     &#125; completion:^(<span class=\"built_in\">BOOL</span> finished) &#123;</div><div class=\"line\">                         fromView.hidden = <span class=\"literal\">NO</span>;</div><div class=\"line\">                         <span class=\"keyword\">if</span> ([transitionContext transitionWasCancelled]) &#123;</div><div class=\"line\">                             [containerView addSubview:fromView];</div><div class=\"line\">                             [<span class=\"keyword\">self</span> removeOtherViews:fromView];</div><div class=\"line\">                         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                             [containerView addSubview:toView];</div><div class=\"line\">                             [<span class=\"keyword\">self</span> removeOtherViews:toView];</div><div class=\"line\">                         &#125;</div><div class=\"line\">                         [transitionContext completeTransition:![transitionContext transitionWasCancelled]];</div><div class=\"line\">                     &#125;];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//实现dismiss动画逻辑代码</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)dismissAnimation:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIViewControllerContextTransitioning</span>&gt;)transitionContext&#123;</div><div class=\"line\">    <span class=\"built_in\">UIViewController</span> *fromVC = [transitionContext viewControllerForKey:<span class=\"built_in\">UITransitionContextFromViewControllerKey</span>];</div><div class=\"line\">    <span class=\"built_in\">UIViewController</span> *toVC = [transitionContext viewControllerForKey:<span class=\"built_in\">UITransitionContextToViewControllerKey</span>];</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *toView = toVC.view;</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *fromView = fromVC.view;</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *containerView = [transitionContext containerView];</div><div class=\"line\">    [containerView addSubview:fromView];</div><div class=\"line\">    toView.frame = [transitionContext finalFrameForViewController:toVC];</div><div class=\"line\">    toView.frame = <span class=\"built_in\">CGRectOffset</span>(toView.frame, toView.frame.size.width, <span class=\"number\">0</span>);</div><div class=\"line\">    [containerView addSubview:toView];</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> upSnapshotRegion = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, fromView.frame.size.width, fromView.frame.size.height * <span class=\"number\">0.5</span>);</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *upHandView = [<span class=\"built_in\">UIView</span> new];</div><div class=\"line\">    upHandView.contentImage = toView.snapshotImage;</div><div class=\"line\">    upHandView.layer.contentsRect = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0.5</span>);</div><div class=\"line\">    upHandView.frame = upSnapshotRegion;</div><div class=\"line\">    upHandView.frame = <span class=\"built_in\">CGRectOffset</span>(upHandView.frame, <span class=\"number\">0</span>, - upHandView.frame.size.height);</div><div class=\"line\">    [containerView addSubview:upHandView];</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> downSnapshotRegion = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, fromView.frame.size.height * <span class=\"number\">0.5</span>, fromView.frame.size.width, fromView.frame.size.height * <span class=\"number\">0.5</span>);</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *downHandView = [<span class=\"built_in\">UIView</span> new];</div><div class=\"line\">    downHandView.contentImage = upHandView.contentImage;</div><div class=\"line\">    downHandView.layer.contentsRect = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0.5</span>, <span class=\"number\">1</span>, <span class=\"number\">0.5</span>);</div><div class=\"line\">    downHandView.frame = downSnapshotRegion;</div><div class=\"line\">    downHandView.frame = <span class=\"built_in\">CGRectOffset</span>(downHandView.frame, <span class=\"number\">0</span>, downHandView.frame.size.height);</div><div class=\"line\">    [containerView addSubview:downHandView];</div><div class=\"line\">    [<span class=\"built_in\">UIView</span> animateWithDuration:<span class=\"number\">0.5</span></div><div class=\"line\">                          delay:<span class=\"number\">0.0</span></div><div class=\"line\">                        options:<span class=\"built_in\">UIViewAnimationOptionCurveEaseOut</span></div><div class=\"line\">                     animations:^&#123;</div><div class=\"line\">                         upHandView.frame = <span class=\"built_in\">CGRectOffset</span>(upHandView.frame, <span class=\"number\">0</span>, upHandView.frame.size.height);</div><div class=\"line\">                         downHandView.frame = <span class=\"built_in\">CGRectOffset</span>(downHandView.frame, <span class=\"number\">0</span>, - downHandView.frame.size.height);</div><div class=\"line\">                         <span class=\"built_in\">CATransform3D</span> scale = <span class=\"built_in\">CATransform3DIdentity</span>;</div><div class=\"line\">                         fromView.layer.transform = <span class=\"built_in\">CATransform3DScale</span>(scale, <span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>, <span class=\"number\">1</span>);<span class=\"comment\">//</span></div><div class=\"line\">                     &#125; completion:^(<span class=\"built_in\">BOOL</span> finished) &#123;</div><div class=\"line\">                         <span class=\"keyword\">if</span> ([transitionContext transitionWasCancelled]) &#123;</div><div class=\"line\">                             [<span class=\"keyword\">self</span> removeOtherViews:fromView];</div><div class=\"line\">                         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                             [<span class=\"keyword\">self</span> removeOtherViews:toView];</div><div class=\"line\">                             toView.frame = containerView.bounds;</div><div class=\"line\">                         &#125;</div><div class=\"line\">                         [transitionContext completeTransition:![transitionContext transitionWasCancelled]];</div><div class=\"line\">                     &#125;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)removeOtherViews:(<span class=\"built_in\">UIView</span>*)viewToKeep &#123;</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *containerView = viewToKeep.superview;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span> *view <span class=\"keyword\">in</span> containerView.subviews) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view != viewToKeep) &#123;</div><div class=\"line\">            [view removeFromSuperview];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;然后我们再新建一个初始VC，就叫“FromViewController”。这个页面只需要负责点击按钮跳转即可，省下什么都不用做。    </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">FromViewController</span> ()</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) ToViewController *toVC;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">FromViewController</span></span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    <span class=\"keyword\">self</span>.view.backgroundColor = [<span class=\"built_in\">UIColor</span> brownColor];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIButton</span> *button = [[<span class=\"built_in\">UIButton</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"keyword\">self</span>.view.bounds.size.width / <span class=\"number\">2</span> - <span class=\"number\">50</span>, <span class=\"keyword\">self</span>.view.bounds.size.height / <span class=\"number\">2</span> - <span class=\"number\">15</span>, <span class=\"number\">100</span>, <span class=\"number\">30</span>)];</div><div class=\"line\">    [button setTitle:<span class=\"string\">@\"点我跳转\"</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [button setBackgroundColor:[<span class=\"built_in\">UIColor</span> blackColor]];</div><div class=\"line\">    [button addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(buttonClick) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</div><div class=\"line\">    button.layer.cornerRadius = <span class=\"number\">15</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:button];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)buttonClick &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.toVC = [[ToViewController alloc] init];</div><div class=\"line\">    [<span class=\"keyword\">self</span> presentViewController:<span class=\"keyword\">self</span>.toVC animated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;接下来我们再创建一个新的页面叫做“ToViewController”，是跳转后的界面，因为要实现自定的跳转动画，所以这个页面要实现“UIViewControllerTransitioningDelegate”接口。  </p>\n<pre><code class=\"objc\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ToViewController</span> ()&lt;<span class=\"title\">UIViewControllerTransitioningDelegate</span>&gt;</span>\n\n<span class=\"keyword\">@end</span>\n\n<span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ToViewController</span></span>\n\n- (<span class=\"keyword\">id</span>)init {\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init]) {\n    }\n    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;\n}\n\n- (<span class=\"keyword\">void</span>)viewDidLoad {\n    [<span class=\"keyword\">super</span> viewDidLoad];\n    <span class=\"keyword\">self</span>.transitioningDelegate = <span class=\"keyword\">self</span>;\n    <span class=\"keyword\">self</span>.modalPresentationStyle = <span class=\"built_in\">UIModalPresentationCustom</span>;\n    <span class=\"keyword\">self</span>.view.backgroundColor = [<span class=\"built_in\">UIColor</span> grayColor];\n\n    <span class=\"built_in\">UIButton</span> *button = [[<span class=\"built_in\">UIButton</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"keyword\">self</span>.view.bounds.size.width / <span class=\"number\">2</span> - <span class=\"number\">50</span>, <span class=\"keyword\">self</span>.view.bounds.size.height / <span class=\"number\">2</span> - <span class=\"number\">15</span>, <span class=\"number\">100</span>, <span class=\"number\">30</span>)];\n    [button setTitle:<span class=\"string\">@\"点我回退\"</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];\n    [button setBackgroundColor:[<span class=\"built_in\">UIColor</span> blackColor]];\n    [button addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(buttonClick) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];\n    button.layer.cornerRadius = <span class=\"number\">15</span>;\n    [<span class=\"keyword\">self</span>.view addSubview:button];\n}\n\n- (<span class=\"keyword\">void</span>)buttonClick {\n    [<span class=\"keyword\">self</span> dismissViewControllerAnimated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];\n}\n\n- (<span class=\"keyword\">id</span> &lt;<span class=\"built_in\">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForPresentedController:(<span class=\"built_in\">UIViewController</span> *)presented presentingController:(<span class=\"built_in\">UIViewController</span> *)presenting sourceController:(<span class=\"built_in\">UIViewController</span> *)source {\n    <span class=\"keyword\">return</span> [TranslationAnimateManager transitionWithTransitionType:TransitionTypePresent];\n}\n\n- (<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForDismissedController:(<span class=\"built_in\">UIViewController</span> *)dismissed{\n    <span class=\"comment\">//这里我们初始化dismissType</span>\n    <span class=\"keyword\">return</span> [[TranslationAnimateManager alloc ]initWithTransitionType:TransitionTypeDismiss];\n}\n</code></pre>\n<p>&emsp;&emsp;至此，我们就完成了第一部分自定义跳转动画，赶快运行起来试试吧～  </p>\n<h3 id=\"第二部分\"><a href=\"#第二部分\" class=\"headerlink\" title=\"第二部分\"></a>第二部分</h3><p>&emsp;&emsp;现在我们点击按钮可以让页面按照我们写好的动画跳转到下一个页面，但是还有一个手势控制我们没有实现，利用手势控制我们可以实现更加友好的界面操作。<br>&emsp;&emsp;我们再创建一个类，继承自“UIPercentDrivenInteractiveTransition”，用来监听我们的手势操作。  </p>\n<pre><code class=\"obj\">@interface SwipeInteractiveTransition ()\n\n@property (nonatomic, assign) BOOL shouldComplete;\n@property (nonatomic, strong) UIViewController *presentingVC;\n@property (nonatomic, strong) UIViewController *targetVC;\n\n@end\n\n@implementation SwipeInteractiveTransition\n\n+ (instancetype)sharedInstance {\n    static id sharedInstance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&amp;onceToken, ^{\n        sharedInstance = [[self alloc] init];\n    });\n    return sharedInstance;\n}\n\n-(void)wireToViewController:(UIViewController *)viewController\n{\n    self.presentingVC = viewController;\n    [self prepareGestureRecognizerInView:viewController.view];\n}\n\n- (void)writeTargetViewController:(UIViewController *)viewController {\n    self.targetVC = viewController;\n}\n\n- (void)prepareGestureRecognizerInView:(UIView*)view {\n    UIPanGestureRecognizer *gesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(handleGesture:)];\n    [view addGestureRecognizer:gesture];\n}\n\n-(CGFloat)completionSpeed\n{\n    return 1 - self.percentComplete;\n}\n\n- (void)handleGesture:(UIPanGestureRecognizer *)gestureRecognizer {\n    CGPoint translation = [gestureRecognizer translationInView:gestureRecognizer.view.superview];\n    switch (gestureRecognizer.state) {\n        case UIGestureRecognizerStateBegan: {\n            self.interacting = YES;\n            self.targetVC = [[ToViewController alloc] init];\n            [self.presentingVC presentViewController:self.targetVC animated:YES completion:nil];\n        }\n            break;\n        case UIGestureRecognizerStateChanged: {\n            NSInteger y =  translation.y;\n            CGFloat fraction = y / 200.0;\n            fraction = fminf(fmaxf(fraction, 0.0), 1.0);\n            self.shouldComplete = (fraction &gt; 0.1);\n\n            [self updateInteractiveTransition:fraction];\n            break;\n        }\n        case UIGestureRecognizerStateEnded:\n        case UIGestureRecognizerStateCancelled: {\n            self.interacting = NO;\n            if (!self.shouldComplete || gestureRecognizer.state == UIGestureRecognizerStateCancelled) {\n                [self cancelInteractiveTransition];\n            } else {\n                [self finishInteractiveTransition];\n            }\n            break;\n        }\n        default:\n            break;\n    }\n}\n\n@end\n</code></pre>\n<p>&emsp;&emsp;然后在“FromViewController”中，我们添加如下代码注册手势监听：  </p>\n<pre><code class=\"objc\"><span class=\"keyword\">self</span>.toVC = [[ToViewController alloc] init];\nSwipeInteractiveTransition *swipeInteractiveTransition = [SwipeInteractiveTransition sharedInstance];\n[swipeInteractiveTransition wireToViewController:<span class=\"keyword\">self</span>];\n[swipeInteractiveTransition writeTargetViewController:<span class=\"keyword\">self</span>.toVC];\n</code></pre>\n<p>&emsp;&emsp;在“ToViewController”中，我们要实现下面的方法：  </p>\n<pre><code class=\"objc\">-(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIViewControllerInteractiveTransitioning</span>&gt;)interactionControllerForPresentation:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIViewControllerAnimatedTransitioning</span>&gt;)animator {\n    <span class=\"keyword\">return</span> [SwipeInteractiveTransition sharedInstance].interacting ? [SwipeInteractiveTransition sharedInstance] : <span class=\"literal\">nil</span>;\n}\n</code></pre>\n<p>&emsp;&emsp;如果没有手势触发或者手势触发失败，这个方法会返回空，此时系统会自动调用<code>- (id &lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source</code>这个方法去执行跳转动画。<br>&emsp;&emsp;我们看下完成后的效果。<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%20/Untitled2.gif\" alt=\"translateAnimate2\"><br>&emsp;&emsp;看着还是很nice的。其实苹果为我们提供的动画接口还是很强大的，如果利用好了可以做出很多酷炫的效果和新颖的交互。</p>\n","excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%20/iOS_TranslationAnimate.jpg\" alt=\"TranslateAnimateLogo\">  </p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>&emsp;&emsp;在iOS7中，苹果爸爸为开发者提供了一套全新的API去实现转场动画，开发者可以通过更灵活的方式去设计动画效果。同时，iOS7还支持用手势切换VC，比如你在某个应用中push了一个新的页面，那么你可以通过在屏幕左侧向右滑动来执行返回操作。</p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>&emsp;&emsp;实现动画的主要API：<br>&emsp;&emsp;1. @protocol UIViewControllerContextTransitioning<br>&emsp;&emsp;2. @protocol UIViewControllerAnimatedTransitioning<br>&emsp;&emsp;3. @protocol UIViewControllerTransitioningDelegate  </p>\n<h3 id=\"UIViewControllerContextTransitioning\"><a href=\"#UIViewControllerContextTransitioning\" class=\"headerlink\" title=\"UIViewControllerContextTransitioning\"></a>UIViewControllerContextTransitioning</h3><p>&emsp;&emsp;这个接口在切换VC过程中为我们提供了上下文，通过它我们可以获取到执行切换时，两个VC的详细信息。在实现跳转动画的方法中，系统会为我们提供这个上下文，所以开发者并不需要去实现这个接口。  </p>\n<h3 id=\"UIViewControllerAnimatedTransitioning\"><a href=\"#UIViewControllerAnimatedTransitioning\" class=\"headerlink\" title=\"UIViewControllerAnimatedTransitioning\"></a>UIViewControllerAnimatedTransitioning</h3><p>&emsp;&emsp;这个接口是在VC切换过程中起着非常重要的角色，因为它负责处理切换过程中的事件，也就是说我们要实现的动画效果等，都是在这里实现的。这里我们需要实现下面的两个方法。<br>&emsp;&emsp;<code>-(NSTimeInterval)transitionDuration:(id &lt; UIViewControllerContextTransitioning &gt;)transitionContext;</code><br>&emsp;&emsp;返回切换过程所需要的时间。<br>&emsp;&emsp;<code>-(void)animateTransition:(id &lt; UIViewControllerContextTransitioning &gt;)transitionContext;</code><br>&emsp;&emsp;切换时会调用此方法，动画效果都在这个方法里完成。  </p>\n<h3 id=\"UIViewControllerTransitioningDelegate\"><a href=\"#UIViewControllerTransitioningDelegate\" class=\"headerlink\" title=\"UIViewControllerTransitioningDelegate\"></a>UIViewControllerTransitioningDelegate</h3><p>&emsp;&emsp;对于想要执行自定义动画的VC需要实现这个接口，共有四个方法。<br>&emsp;&emsp;<code>-(id&lt; UIViewControllerAnimatedTransitioning &gt;)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source;</code><br>&emsp;&emsp;跳转新页面的动画。<br>&emsp;&emsp;<code>-(id&lt; UIViewControllerAnimatedTransitioning &gt;)animationControllerForDismissedController:(UIViewController *)dismissed;</code><br>&emsp;&emsp;当前页面消失的动画。<br>&emsp;&emsp;<code>-(id&lt; UIViewControllerInteractiveTransitioning &gt;)interactionControllerForPresentation:(id &lt; UIViewControllerAnimatedTransitioning &gt;)animator;</code><br>&emsp;&emsp;手势控制页面跳转的动画。<br>&emsp;&emsp;<code>-(id&lt; UIViewControllerInteractiveTransitioning &gt;)interactionControllerForDismissal:(id &lt; UIViewControllerAnimatedTransitioning &gt;)animator;</code><br>&emsp;&emsp;手势控制页面消失的动画。  </p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><h3 id=\"第一部分\"><a href=\"#第一部分\" class=\"headerlink\" title=\"第一部分\"></a>第一部分</h3><p>&emsp;&emsp;我们先来尝试着实现如下图效果的页面切换。<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%20/Untitled.gif\" alt=\"translateAnimate\"><br>&emsp;&emsp;首先我们新建一个处理动画效果的类，这个类要实现“UIViewControllerAnimatedTransitioning”接口。<br>TranslationAnimateManager.h    </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSUInteger</span>, TransitionType) &#123;</div><div class=\"line\">    TransitionTypePresent,</div><div class=\"line\">    TransitionTypeDismiss</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">TranslationAnimateManager</span> : <span class=\"title\">NSObject</span> &lt;<span class=\"title\">UIViewControllerAnimatedTransitioning</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据定义的枚举初始化的两个方法</span></div><div class=\"line\">+ (<span class=\"keyword\">instancetype</span>)transitionWithTransitionType:(TransitionType)type;</div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithTransitionType:(TransitionType)type;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span>   </div><div class=\"line\"></div><div class=\"line\">```  </div><div class=\"line\">TranslationAnimateManager.m    </div><div class=\"line\"></div><div class=\"line\">``` objc</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">TranslationAnimateManager</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) TransitionType type;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">TranslationAnimateManager</span></span></div><div class=\"line\"></div><div class=\"line\">+ (<span class=\"keyword\">instancetype</span>)transitionWithTransitionType:(TransitionType)type &#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">id</span> sharedInstance = <span class=\"literal\">nil</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</div><div class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class=\"line\">        sharedInstance = [[<span class=\"keyword\">self</span> alloc] initWithTransitionType:type];</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> sharedInstance;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithTransitionType:(TransitionType)type &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init]) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.type = type;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSTimeInterval</span>)transitionDuration:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIViewControllerContextTransitioning</span>&gt;)transitionContext &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0.5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)animateTransition:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIViewControllerContextTransitioning</span>&gt;)transitionContext &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">self</span>.type) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> TransitionTypePresent:</div><div class=\"line\">            [<span class=\"keyword\">self</span> presentAnimation:transitionContext];</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">case</span> TransitionTypeDismiss:</div><div class=\"line\">            [<span class=\"keyword\">self</span> dismissAnimation:transitionContext];</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//实现present动画逻辑代码</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)presentAnimation:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIViewControllerContextTransitioning</span>&gt;)transitionContext&#123;</div><div class=\"line\">    <span class=\"built_in\">UIViewController</span> *fromVC = [transitionContext viewControllerForKey:<span class=\"built_in\">UITransitionContextFromViewControllerKey</span>];</div><div class=\"line\">    <span class=\"built_in\">UIViewController</span> *toVC = [transitionContext viewControllerForKey:<span class=\"built_in\">UITransitionContextToViewControllerKey</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIView</span> *toView = toVC.view;</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *fromView = fromVC.view;</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *containerView = [transitionContext containerView];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIView</span> *toViewSnapshot = [<span class=\"built_in\">UIView</span> new];</div><div class=\"line\">    toViewSnapshot.contentImage =  toView.snapshotImage;</div><div class=\"line\">    toViewSnapshot.frame = containerView.bounds;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CATransform3D</span> scale = <span class=\"built_in\">CATransform3DIdentity</span>;</div><div class=\"line\">    toViewSnapshot.layer.transform = <span class=\"built_in\">CATransform3DScale</span>(scale, <span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>, <span class=\"number\">1</span>);<span class=\"comment\">//</span></div><div class=\"line\">    [containerView addSubview:toViewSnapshot];</div><div class=\"line\">    [containerView sendSubviewToBack:toViewSnapshot];</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> upSnapshotRegion = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, fromView.frame.size.width, fromView.frame.size.height  * <span class=\"number\">0.5</span>);</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *upHandView = [<span class=\"built_in\">UIView</span> new];</div><div class=\"line\">    upHandView.contentImage = fromView.snapshotImage;</div><div class=\"line\">    upHandView.layer.contentsRect = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0.5</span>);</div><div class=\"line\">    upHandView.frame = upSnapshotRegion;</div><div class=\"line\">    [containerView addSubview:upHandView];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGRect</span> downSnapshotRegion = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, fromView.frame.size.height * <span class=\"number\">0.5</span>, fromView.frame.size.width, fromView.frame.size.height * <span class=\"number\">0.5</span>);</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *downHandView = [<span class=\"built_in\">UIView</span> new];</div><div class=\"line\">    downHandView.contentImage = upHandView.contentImage;</div><div class=\"line\">    downHandView.layer.contentsRect = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0.5</span>, <span class=\"number\">1</span>, <span class=\"number\">0.5</span>);</div><div class=\"line\">    downHandView.frame = downSnapshotRegion;</div><div class=\"line\">    [containerView addSubview:downHandView];</div><div class=\"line\">    </div><div class=\"line\">    fromView.hidden = <span class=\"literal\">YES</span>;</div><div class=\"line\">    [<span class=\"built_in\">UIView</span> animateWithDuration:<span class=\"number\">0.5</span></div><div class=\"line\">                          delay:<span class=\"number\">0.0</span></div><div class=\"line\">                        options:<span class=\"built_in\">UIViewAnimationOptionCurveEaseOut</span></div><div class=\"line\">                     animations:^&#123;</div><div class=\"line\">                         upHandView.frame = <span class=\"built_in\">CGRectOffset</span>(upHandView.frame, <span class=\"number\">0</span>, - upHandView.frame.size.height);</div><div class=\"line\">                         downHandView.frame = <span class=\"built_in\">CGRectOffset</span>(downHandView.frame, <span class=\"number\">0</span>, downHandView.frame.size.height);</div><div class=\"line\">                         toViewSnapshot.center = toView.center;</div><div class=\"line\">                         toViewSnapshot.frame = toView.frame;</div><div class=\"line\">                     &#125; completion:^(<span class=\"built_in\">BOOL</span> finished) &#123;</div><div class=\"line\">                         fromView.hidden = <span class=\"literal\">NO</span>;</div><div class=\"line\">                         <span class=\"keyword\">if</span> ([transitionContext transitionWasCancelled]) &#123;</div><div class=\"line\">                             [containerView addSubview:fromView];</div><div class=\"line\">                             [<span class=\"keyword\">self</span> removeOtherViews:fromView];</div><div class=\"line\">                         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                             [containerView addSubview:toView];</div><div class=\"line\">                             [<span class=\"keyword\">self</span> removeOtherViews:toView];</div><div class=\"line\">                         &#125;</div><div class=\"line\">                         [transitionContext completeTransition:![transitionContext transitionWasCancelled]];</div><div class=\"line\">                     &#125;];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//实现dismiss动画逻辑代码</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)dismissAnimation:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIViewControllerContextTransitioning</span>&gt;)transitionContext&#123;</div><div class=\"line\">    <span class=\"built_in\">UIViewController</span> *fromVC = [transitionContext viewControllerForKey:<span class=\"built_in\">UITransitionContextFromViewControllerKey</span>];</div><div class=\"line\">    <span class=\"built_in\">UIViewController</span> *toVC = [transitionContext viewControllerForKey:<span class=\"built_in\">UITransitionContextToViewControllerKey</span>];</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *toView = toVC.view;</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *fromView = fromVC.view;</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *containerView = [transitionContext containerView];</div><div class=\"line\">    [containerView addSubview:fromView];</div><div class=\"line\">    toView.frame = [transitionContext finalFrameForViewController:toVC];</div><div class=\"line\">    toView.frame = <span class=\"built_in\">CGRectOffset</span>(toView.frame, toView.frame.size.width, <span class=\"number\">0</span>);</div><div class=\"line\">    [containerView addSubview:toView];</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> upSnapshotRegion = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, fromView.frame.size.width, fromView.frame.size.height * <span class=\"number\">0.5</span>);</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *upHandView = [<span class=\"built_in\">UIView</span> new];</div><div class=\"line\">    upHandView.contentImage = toView.snapshotImage;</div><div class=\"line\">    upHandView.layer.contentsRect = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0.5</span>);</div><div class=\"line\">    upHandView.frame = upSnapshotRegion;</div><div class=\"line\">    upHandView.frame = <span class=\"built_in\">CGRectOffset</span>(upHandView.frame, <span class=\"number\">0</span>, - upHandView.frame.size.height);</div><div class=\"line\">    [containerView addSubview:upHandView];</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> downSnapshotRegion = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, fromView.frame.size.height * <span class=\"number\">0.5</span>, fromView.frame.size.width, fromView.frame.size.height * <span class=\"number\">0.5</span>);</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *downHandView = [<span class=\"built_in\">UIView</span> new];</div><div class=\"line\">    downHandView.contentImage = upHandView.contentImage;</div><div class=\"line\">    downHandView.layer.contentsRect = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0.5</span>, <span class=\"number\">1</span>, <span class=\"number\">0.5</span>);</div><div class=\"line\">    downHandView.frame = downSnapshotRegion;</div><div class=\"line\">    downHandView.frame = <span class=\"built_in\">CGRectOffset</span>(downHandView.frame, <span class=\"number\">0</span>, downHandView.frame.size.height);</div><div class=\"line\">    [containerView addSubview:downHandView];</div><div class=\"line\">    [<span class=\"built_in\">UIView</span> animateWithDuration:<span class=\"number\">0.5</span></div><div class=\"line\">                          delay:<span class=\"number\">0.0</span></div><div class=\"line\">                        options:<span class=\"built_in\">UIViewAnimationOptionCurveEaseOut</span></div><div class=\"line\">                     animations:^&#123;</div><div class=\"line\">                         upHandView.frame = <span class=\"built_in\">CGRectOffset</span>(upHandView.frame, <span class=\"number\">0</span>, upHandView.frame.size.height);</div><div class=\"line\">                         downHandView.frame = <span class=\"built_in\">CGRectOffset</span>(downHandView.frame, <span class=\"number\">0</span>, - downHandView.frame.size.height);</div><div class=\"line\">                         <span class=\"built_in\">CATransform3D</span> scale = <span class=\"built_in\">CATransform3DIdentity</span>;</div><div class=\"line\">                         fromView.layer.transform = <span class=\"built_in\">CATransform3DScale</span>(scale, <span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>, <span class=\"number\">1</span>);<span class=\"comment\">//</span></div><div class=\"line\">                     &#125; completion:^(<span class=\"built_in\">BOOL</span> finished) &#123;</div><div class=\"line\">                         <span class=\"keyword\">if</span> ([transitionContext transitionWasCancelled]) &#123;</div><div class=\"line\">                             [<span class=\"keyword\">self</span> removeOtherViews:fromView];</div><div class=\"line\">                         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                             [<span class=\"keyword\">self</span> removeOtherViews:toView];</div><div class=\"line\">                             toView.frame = containerView.bounds;</div><div class=\"line\">                         &#125;</div><div class=\"line\">                         [transitionContext completeTransition:![transitionContext transitionWasCancelled]];</div><div class=\"line\">                     &#125;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)removeOtherViews:(<span class=\"built_in\">UIView</span>*)viewToKeep &#123;</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *containerView = viewToKeep.superview;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span> *view <span class=\"keyword\">in</span> containerView.subviews) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view != viewToKeep) &#123;</div><div class=\"line\">            [view removeFromSuperview];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;然后我们再新建一个初始VC，就叫“FromViewController”。这个页面只需要负责点击按钮跳转即可，省下什么都不用做。    </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">FromViewController</span> ()</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) ToViewController *toVC;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">FromViewController</span></span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    <span class=\"keyword\">self</span>.view.backgroundColor = [<span class=\"built_in\">UIColor</span> brownColor];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIButton</span> *button = [[<span class=\"built_in\">UIButton</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"keyword\">self</span>.view.bounds.size.width / <span class=\"number\">2</span> - <span class=\"number\">50</span>, <span class=\"keyword\">self</span>.view.bounds.size.height / <span class=\"number\">2</span> - <span class=\"number\">15</span>, <span class=\"number\">100</span>, <span class=\"number\">30</span>)];</div><div class=\"line\">    [button setTitle:<span class=\"string\">@\"点我跳转\"</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [button setBackgroundColor:[<span class=\"built_in\">UIColor</span> blackColor]];</div><div class=\"line\">    [button addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(buttonClick) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</div><div class=\"line\">    button.layer.cornerRadius = <span class=\"number\">15</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:button];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)buttonClick &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.toVC = [[ToViewController alloc] init];</div><div class=\"line\">    [<span class=\"keyword\">self</span> presentViewController:<span class=\"keyword\">self</span>.toVC animated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;接下来我们再创建一个新的页面叫做“ToViewController”，是跳转后的界面，因为要实现自定的跳转动画，所以这个页面要实现“UIViewControllerTransitioningDelegate”接口。  </p>\n<pre><code class=\"objc\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ToViewController</span> ()&lt;<span class=\"title\">UIViewControllerTransitioningDelegate</span>&gt;</span>\n\n<span class=\"keyword\">@end</span>\n\n<span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ToViewController</span></span>\n\n- (<span class=\"keyword\">id</span>)init {\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init]) {\n    }\n    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;\n}\n\n- (<span class=\"keyword\">void</span>)viewDidLoad {\n    [<span class=\"keyword\">super</span> viewDidLoad];\n    <span class=\"keyword\">self</span>.transitioningDelegate = <span class=\"keyword\">self</span>;\n    <span class=\"keyword\">self</span>.modalPresentationStyle = <span class=\"built_in\">UIModalPresentationCustom</span>;\n    <span class=\"keyword\">self</span>.view.backgroundColor = [<span class=\"built_in\">UIColor</span> grayColor];\n\n    <span class=\"built_in\">UIButton</span> *button = [[<span class=\"built_in\">UIButton</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"keyword\">self</span>.view.bounds.size.width / <span class=\"number\">2</span> - <span class=\"number\">50</span>, <span class=\"keyword\">self</span>.view.bounds.size.height / <span class=\"number\">2</span> - <span class=\"number\">15</span>, <span class=\"number\">100</span>, <span class=\"number\">30</span>)];\n    [button setTitle:<span class=\"string\">@\"点我回退\"</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];\n    [button setBackgroundColor:[<span class=\"built_in\">UIColor</span> blackColor]];\n    [button addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(buttonClick) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];\n    button.layer.cornerRadius = <span class=\"number\">15</span>;\n    [<span class=\"keyword\">self</span>.view addSubview:button];\n}\n\n- (<span class=\"keyword\">void</span>)buttonClick {\n    [<span class=\"keyword\">self</span> dismissViewControllerAnimated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];\n}\n\n- (<span class=\"keyword\">id</span> &lt;<span class=\"built_in\">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForPresentedController:(<span class=\"built_in\">UIViewController</span> *)presented presentingController:(<span class=\"built_in\">UIViewController</span> *)presenting sourceController:(<span class=\"built_in\">UIViewController</span> *)source {\n    <span class=\"keyword\">return</span> [TranslationAnimateManager transitionWithTransitionType:TransitionTypePresent];\n}\n\n- (<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForDismissedController:(<span class=\"built_in\">UIViewController</span> *)dismissed{\n    <span class=\"comment\">//这里我们初始化dismissType</span>\n    <span class=\"keyword\">return</span> [[TranslationAnimateManager alloc ]initWithTransitionType:TransitionTypeDismiss];\n}\n</code></pre>\n<p>&emsp;&emsp;至此，我们就完成了第一部分自定义跳转动画，赶快运行起来试试吧～  </p>\n<h3 id=\"第二部分\"><a href=\"#第二部分\" class=\"headerlink\" title=\"第二部分\"></a>第二部分</h3><p>&emsp;&emsp;现在我们点击按钮可以让页面按照我们写好的动画跳转到下一个页面，但是还有一个手势控制我们没有实现，利用手势控制我们可以实现更加友好的界面操作。<br>&emsp;&emsp;我们再创建一个类，继承自“UIPercentDrivenInteractiveTransition”，用来监听我们的手势操作。  </p>\n<pre><code class=\"obj\">@interface SwipeInteractiveTransition ()\n\n@property (nonatomic, assign) BOOL shouldComplete;\n@property (nonatomic, strong) UIViewController *presentingVC;\n@property (nonatomic, strong) UIViewController *targetVC;\n\n@end\n\n@implementation SwipeInteractiveTransition\n\n+ (instancetype)sharedInstance {\n    static id sharedInstance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&amp;onceToken, ^{\n        sharedInstance = [[self alloc] init];\n    });\n    return sharedInstance;\n}\n\n-(void)wireToViewController:(UIViewController *)viewController\n{\n    self.presentingVC = viewController;\n    [self prepareGestureRecognizerInView:viewController.view];\n}\n\n- (void)writeTargetViewController:(UIViewController *)viewController {\n    self.targetVC = viewController;\n}\n\n- (void)prepareGestureRecognizerInView:(UIView*)view {\n    UIPanGestureRecognizer *gesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(handleGesture:)];\n    [view addGestureRecognizer:gesture];\n}\n\n-(CGFloat)completionSpeed\n{\n    return 1 - self.percentComplete;\n}\n\n- (void)handleGesture:(UIPanGestureRecognizer *)gestureRecognizer {\n    CGPoint translation = [gestureRecognizer translationInView:gestureRecognizer.view.superview];\n    switch (gestureRecognizer.state) {\n        case UIGestureRecognizerStateBegan: {\n            self.interacting = YES;\n            self.targetVC = [[ToViewController alloc] init];\n            [self.presentingVC presentViewController:self.targetVC animated:YES completion:nil];\n        }\n            break;\n        case UIGestureRecognizerStateChanged: {\n            NSInteger y =  translation.y;\n            CGFloat fraction = y / 200.0;\n            fraction = fminf(fmaxf(fraction, 0.0), 1.0);\n            self.shouldComplete = (fraction &gt; 0.1);\n\n            [self updateInteractiveTransition:fraction];\n            break;\n        }\n        case UIGestureRecognizerStateEnded:\n        case UIGestureRecognizerStateCancelled: {\n            self.interacting = NO;\n            if (!self.shouldComplete || gestureRecognizer.state == UIGestureRecognizerStateCancelled) {\n                [self cancelInteractiveTransition];\n            } else {\n                [self finishInteractiveTransition];\n            }\n            break;\n        }\n        default:\n            break;\n    }\n}\n\n@end\n</code></pre>\n<p>&emsp;&emsp;然后在“FromViewController”中，我们添加如下代码注册手势监听：  </p>\n<pre><code class=\"objc\"><span class=\"keyword\">self</span>.toVC = [[ToViewController alloc] init];\nSwipeInteractiveTransition *swipeInteractiveTransition = [SwipeInteractiveTransition sharedInstance];\n[swipeInteractiveTransition wireToViewController:<span class=\"keyword\">self</span>];\n[swipeInteractiveTransition writeTargetViewController:<span class=\"keyword\">self</span>.toVC];\n</code></pre>\n<p>&emsp;&emsp;在“ToViewController”中，我们要实现下面的方法：  </p>\n<pre><code class=\"objc\">-(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIViewControllerInteractiveTransitioning</span>&gt;)interactionControllerForPresentation:(<span class=\"keyword\">id</span>&lt;<span class=\"built_in\">UIViewControllerAnimatedTransitioning</span>&gt;)animator {\n    <span class=\"keyword\">return</span> [SwipeInteractiveTransition sharedInstance].interacting ? [SwipeInteractiveTransition sharedInstance] : <span class=\"literal\">nil</span>;\n}\n</code></pre>\n<p>&emsp;&emsp;如果没有手势触发或者手势触发失败，这个方法会返回空，此时系统会自动调用<code>- (id &lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source</code>这个方法去执行跳转动画。<br>&emsp;&emsp;我们看下完成后的效果。<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/iOS--%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%20/Untitled2.gif\" alt=\"translateAnimate2\"><br>&emsp;&emsp;看着还是很nice的。其实苹果为我们提供的动画接口还是很强大的，如果利用好了可以做出很多酷炫的效果和新颖的交互。</p>\n"},{"title":"安装CocoaPods过程以及踩过的坑","date":"2016-08-27T12:18:29.000Z","_content":"![cocoaPods logo](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/安装CocoaPods过程以及踩过的坑/cocoapods-stickers.jpg)  \n## 为什么要用到CocoaPods\n&emsp;&emsp;以往在写iOS程序的时候，遇到好的第三方开源库都是将开源库下载下来，拷贝到项目中，然后再去使用，而且遇到开源库更新，我们还要重新执行一边操作。如果开源库数量很多，这个操作就显得非常麻烦了。  \n&emsp;&emsp;现在有了CocoaPods，这些问题就都迎刃而解了，CocoaPods可以帮助我们下载，管理第三方的开源库，包括更新、系统依赖和编译参数等都能帮助我们处理。简直不能再方便，设置完CocoaPods后，以后我们只需要专心的敲代码就好了。  \n## CocoaPods的原理\n&emsp;&emsp;CocoaPods是将所有的依赖库放到另一个名为Pods的项目中，然后让主项目依赖Pods项目，这样，源码管理工作都从主项目移到了Pods项目中。Pods项目最终会编译成一个名为libPods.a的文件，主项目只需要依赖这个.a文件即可。\n## 安装CocoaPods\n&emsp;&emsp;现在Mac上似乎已经自带了Ruby，如果没有的话可以通过“[如何在Mac OS X上安装 Ruby运行环境](http://www.cnblogs.com/daguo/p/4097263.html)”这篇文章来安装。安装完ruby后，打开Terminal终端，输入以下命令：  \n&emsp;&emsp;``$ sudo gem install cocoapods``（注意：在执行这条命令前请保证你的gem为最新版）  \n&emsp;&emsp;然后执行安装操作，输入命令：  \n&emsp;&emsp;``$ pod setup``  \n&emsp;&emsp;此时Terminal终端会停留在“Setting up CocoaPods master repo”这个状态一段时间，因为这个时候是在下载安装开源库的文件，安装时间的长短由你的网速等决定。注意，在这里是一个很大的坑，我在这里折腾了一整天，最后才弄好。为了节省大家时间我直接说我的解决办法。\n&emsp;&emsp;如果你也是用了很多办法都下不来安装文件，或者下载一会儿就报错要重下的话，那么可以参考下这个办法：  \n&emsp;&emsp;1. 访问 [https://github.com/CocoaPods/Specs](https://github.com/CocoaPods/Specs)，然后将Specs项目fork到自己的github账户上。  \n&emsp;&emsp;2. 下载GitHub Desktop, 然后clone Specs项目。  \n&emsp;&emsp;3. 将clone的Specs项目的文件夹改名为master，然后拖到/Users/用户名/.cocoapods/repos目录下。  \n&emsp;&emsp;4. 运行pod setup  \n&emsp;&emsp;pod setup的本质就是将[https://github.com/CocoaPods/Specs](https://github.com/CocoaPods/Specs)上的Specs项目clone到/Users/用户名/.cocoapods/repos目录下。若此目录下已有Specs项目，则会将项目更新到最新的状态。由于Specs很大，容易导致pod setup失败。这时就需要我们手动安装Specs。若直接从github上下载zip文件，由于缺少git文件，会导致cocoa pods不使用。若用git clone，由于文件过大，容易导致失败。但是使用GitHub Desktop软件，则会提高clone的成功率，并且会给出clone的进度，但是我也是下了三遍最后才clone下来。\n## 使用CocoaPods\n&emsp;&emsp;废了好大劲安装完毕后，就是如何使用了，举个栗子：假如说我们要在项目中导入非常火的“AFNetworking”类库，我们先要确定AFNetworking是否支持CocoaPods，所以我们先利用CocoaPods的搜索功能搜索下，在Terminal终端上输入以下命令：  \n&emsp;&emsp;``$ pod search AFNetworking``  \n&emsp;&emsp;如果出现错误：“[!] Unable to find a pod with name, author, summary, or description matching AFNetworking”，可以通过执行下面的命令来解决：  \n&emsp;&emsp;``rm ~/Library/Caches/CocoaPods/search_index.json``  \n&emsp;&emsp;如果执行成功，会出现“AFNetworking”的相关信息，如下图。  \n![searchResult](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/安装CocoaPods过程以及踩过的坑/searchResult.png)\n&emsp;&emsp;这说明“AFNetworking”是支持CocoaPods的。接下来我们就可以将“AFNetworking”导入到我们的项目中去。  \n&emsp;&emsp;首先，我们通过Terminal终端进入到们已经创建好的项目目录下，执行下面的命令：  \n&emsp;&emsp;``$ vim Podfile``  \n&emsp;&emsp;这个命令的作用是在项目目录下生成一个名为“Podfile”的文件，这个文件的作用就是用来告诉CocoaPods需要下什么类库，然后我们在Podfile文件中添加以下文字：（注意：不要用文本编辑器进行编辑！）  \n<pre>&emsp;&emsp;platform :ios, '9.0'  \n&emsp;&emsp;&emsp;&emsp;target 'MyApp' do  \n&emsp;&emsp;&emsp;&emsp;pod 'AFNetworking', '~> 3.1'  \n&emsp;&emsp;end</pre>  \n&emsp;&emsp;然后保存退出，这时候在项目的目录里就会出现一个名为Podfile的文件，然后我们执行以下命令来将“AFNetworking”下载到项目中。（注意：下面的命令需要在项目目录中执行。）  \n&emsp;&emsp;``$ pod install``  \n&emsp;&emsp;执行成功后，项目中会多出来一个.xcworkspace类型的文件，如下图：  \n![project](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/安装CocoaPods过程以及踩过的坑/project.png)  \n&emsp;&emsp;以后需要用它来打开工程才会配置类库的相关文件。  \n&emsp;&emsp;以上就是CocoaPods的安装和使用方法介绍，如果想要了解更多的使用方法，可以参考[官方文档](https://github.com/CocoaPods/CocoaPods/wiki)。\n","source":"_posts/安装CocoaPods过程以及踩过的坑.md","raw":"---\ntitle: 安装CocoaPods过程以及踩过的坑\ndate: 2016-08-27 20:18:29\n\ncategories:\n- Xcode工具\ntags:\n- 类库管理\n- 工具\n- Xcode\n---\n![cocoaPods logo](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/安装CocoaPods过程以及踩过的坑/cocoapods-stickers.jpg)  \n## 为什么要用到CocoaPods\n&emsp;&emsp;以往在写iOS程序的时候，遇到好的第三方开源库都是将开源库下载下来，拷贝到项目中，然后再去使用，而且遇到开源库更新，我们还要重新执行一边操作。如果开源库数量很多，这个操作就显得非常麻烦了。  \n&emsp;&emsp;现在有了CocoaPods，这些问题就都迎刃而解了，CocoaPods可以帮助我们下载，管理第三方的开源库，包括更新、系统依赖和编译参数等都能帮助我们处理。简直不能再方便，设置完CocoaPods后，以后我们只需要专心的敲代码就好了。  \n## CocoaPods的原理\n&emsp;&emsp;CocoaPods是将所有的依赖库放到另一个名为Pods的项目中，然后让主项目依赖Pods项目，这样，源码管理工作都从主项目移到了Pods项目中。Pods项目最终会编译成一个名为libPods.a的文件，主项目只需要依赖这个.a文件即可。\n## 安装CocoaPods\n&emsp;&emsp;现在Mac上似乎已经自带了Ruby，如果没有的话可以通过“[如何在Mac OS X上安装 Ruby运行环境](http://www.cnblogs.com/daguo/p/4097263.html)”这篇文章来安装。安装完ruby后，打开Terminal终端，输入以下命令：  \n&emsp;&emsp;``$ sudo gem install cocoapods``（注意：在执行这条命令前请保证你的gem为最新版）  \n&emsp;&emsp;然后执行安装操作，输入命令：  \n&emsp;&emsp;``$ pod setup``  \n&emsp;&emsp;此时Terminal终端会停留在“Setting up CocoaPods master repo”这个状态一段时间，因为这个时候是在下载安装开源库的文件，安装时间的长短由你的网速等决定。注意，在这里是一个很大的坑，我在这里折腾了一整天，最后才弄好。为了节省大家时间我直接说我的解决办法。\n&emsp;&emsp;如果你也是用了很多办法都下不来安装文件，或者下载一会儿就报错要重下的话，那么可以参考下这个办法：  \n&emsp;&emsp;1. 访问 [https://github.com/CocoaPods/Specs](https://github.com/CocoaPods/Specs)，然后将Specs项目fork到自己的github账户上。  \n&emsp;&emsp;2. 下载GitHub Desktop, 然后clone Specs项目。  \n&emsp;&emsp;3. 将clone的Specs项目的文件夹改名为master，然后拖到/Users/用户名/.cocoapods/repos目录下。  \n&emsp;&emsp;4. 运行pod setup  \n&emsp;&emsp;pod setup的本质就是将[https://github.com/CocoaPods/Specs](https://github.com/CocoaPods/Specs)上的Specs项目clone到/Users/用户名/.cocoapods/repos目录下。若此目录下已有Specs项目，则会将项目更新到最新的状态。由于Specs很大，容易导致pod setup失败。这时就需要我们手动安装Specs。若直接从github上下载zip文件，由于缺少git文件，会导致cocoa pods不使用。若用git clone，由于文件过大，容易导致失败。但是使用GitHub Desktop软件，则会提高clone的成功率，并且会给出clone的进度，但是我也是下了三遍最后才clone下来。\n## 使用CocoaPods\n&emsp;&emsp;废了好大劲安装完毕后，就是如何使用了，举个栗子：假如说我们要在项目中导入非常火的“AFNetworking”类库，我们先要确定AFNetworking是否支持CocoaPods，所以我们先利用CocoaPods的搜索功能搜索下，在Terminal终端上输入以下命令：  \n&emsp;&emsp;``$ pod search AFNetworking``  \n&emsp;&emsp;如果出现错误：“[!] Unable to find a pod with name, author, summary, or description matching AFNetworking”，可以通过执行下面的命令来解决：  \n&emsp;&emsp;``rm ~/Library/Caches/CocoaPods/search_index.json``  \n&emsp;&emsp;如果执行成功，会出现“AFNetworking”的相关信息，如下图。  \n![searchResult](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/安装CocoaPods过程以及踩过的坑/searchResult.png)\n&emsp;&emsp;这说明“AFNetworking”是支持CocoaPods的。接下来我们就可以将“AFNetworking”导入到我们的项目中去。  \n&emsp;&emsp;首先，我们通过Terminal终端进入到们已经创建好的项目目录下，执行下面的命令：  \n&emsp;&emsp;``$ vim Podfile``  \n&emsp;&emsp;这个命令的作用是在项目目录下生成一个名为“Podfile”的文件，这个文件的作用就是用来告诉CocoaPods需要下什么类库，然后我们在Podfile文件中添加以下文字：（注意：不要用文本编辑器进行编辑！）  \n<pre>&emsp;&emsp;platform :ios, '9.0'  \n&emsp;&emsp;&emsp;&emsp;target 'MyApp' do  \n&emsp;&emsp;&emsp;&emsp;pod 'AFNetworking', '~> 3.1'  \n&emsp;&emsp;end</pre>  \n&emsp;&emsp;然后保存退出，这时候在项目的目录里就会出现一个名为Podfile的文件，然后我们执行以下命令来将“AFNetworking”下载到项目中。（注意：下面的命令需要在项目目录中执行。）  \n&emsp;&emsp;``$ pod install``  \n&emsp;&emsp;执行成功后，项目中会多出来一个.xcworkspace类型的文件，如下图：  \n![project](https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/安装CocoaPods过程以及踩过的坑/project.png)  \n&emsp;&emsp;以后需要用它来打开工程才会配置类库的相关文件。  \n&emsp;&emsp;以上就是CocoaPods的安装和使用方法介绍，如果想要了解更多的使用方法，可以参考[官方文档](https://github.com/CocoaPods/CocoaPods/wiki)。\n","slug":"安装CocoaPods过程以及踩过的坑","published":1,"updated":"2016-08-27T14:26:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjat0x9yv001iclqdejaoag9o","content":"<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/安装CocoaPods过程以及踩过的坑/cocoapods-stickers.jpg\" alt=\"cocoaPods logo\">  </p>\n<h2 id=\"为什么要用到CocoaPods\"><a href=\"#为什么要用到CocoaPods\" class=\"headerlink\" title=\"为什么要用到CocoaPods\"></a>为什么要用到CocoaPods</h2><p>&emsp;&emsp;以往在写iOS程序的时候，遇到好的第三方开源库都是将开源库下载下来，拷贝到项目中，然后再去使用，而且遇到开源库更新，我们还要重新执行一边操作。如果开源库数量很多，这个操作就显得非常麻烦了。<br>&emsp;&emsp;现在有了CocoaPods，这些问题就都迎刃而解了，CocoaPods可以帮助我们下载，管理第三方的开源库，包括更新、系统依赖和编译参数等都能帮助我们处理。简直不能再方便，设置完CocoaPods后，以后我们只需要专心的敲代码就好了。  </p>\n<h2 id=\"CocoaPods的原理\"><a href=\"#CocoaPods的原理\" class=\"headerlink\" title=\"CocoaPods的原理\"></a>CocoaPods的原理</h2><p>&emsp;&emsp;CocoaPods是将所有的依赖库放到另一个名为Pods的项目中，然后让主项目依赖Pods项目，这样，源码管理工作都从主项目移到了Pods项目中。Pods项目最终会编译成一个名为libPods.a的文件，主项目只需要依赖这个.a文件即可。</p>\n<h2 id=\"安装CocoaPods\"><a href=\"#安装CocoaPods\" class=\"headerlink\" title=\"安装CocoaPods\"></a>安装CocoaPods</h2><p>&emsp;&emsp;现在Mac上似乎已经自带了Ruby，如果没有的话可以通过“<a href=\"http://www.cnblogs.com/daguo/p/4097263.html\" target=\"_blank\" rel=\"external\">如何在Mac OS X上安装 Ruby运行环境</a>”这篇文章来安装。安装完ruby后，打开Terminal终端，输入以下命令：<br>&emsp;&emsp;<code>$ sudo gem install cocoapods</code>（注意：在执行这条命令前请保证你的gem为最新版）<br>&emsp;&emsp;然后执行安装操作，输入命令：<br>&emsp;&emsp;<code>$ pod setup</code><br>&emsp;&emsp;此时Terminal终端会停留在“Setting up CocoaPods master repo”这个状态一段时间，因为这个时候是在下载安装开源库的文件，安装时间的长短由你的网速等决定。注意，在这里是一个很大的坑，我在这里折腾了一整天，最后才弄好。为了节省大家时间我直接说我的解决办法。<br>&emsp;&emsp;如果你也是用了很多办法都下不来安装文件，或者下载一会儿就报错要重下的话，那么可以参考下这个办法：<br>&emsp;&emsp;1. 访问 <a href=\"https://github.com/CocoaPods/Specs\" target=\"_blank\" rel=\"external\">https://github.com/CocoaPods/Specs</a>，然后将Specs项目fork到自己的github账户上。<br>&emsp;&emsp;2. 下载GitHub Desktop, 然后clone Specs项目。<br>&emsp;&emsp;3. 将clone的Specs项目的文件夹改名为master，然后拖到/Users/用户名/.cocoapods/repos目录下。<br>&emsp;&emsp;4. 运行pod setup<br>&emsp;&emsp;pod setup的本质就是将<a href=\"https://github.com/CocoaPods/Specs\" target=\"_blank\" rel=\"external\">https://github.com/CocoaPods/Specs</a>上的Specs项目clone到/Users/用户名/.cocoapods/repos目录下。若此目录下已有Specs项目，则会将项目更新到最新的状态。由于Specs很大，容易导致pod setup失败。这时就需要我们手动安装Specs。若直接从github上下载zip文件，由于缺少git文件，会导致cocoa pods不使用。若用git clone，由于文件过大，容易导致失败。但是使用GitHub Desktop软件，则会提高clone的成功率，并且会给出clone的进度，但是我也是下了三遍最后才clone下来。</p>\n<h2 id=\"使用CocoaPods\"><a href=\"#使用CocoaPods\" class=\"headerlink\" title=\"使用CocoaPods\"></a>使用CocoaPods</h2><p>&emsp;&emsp;废了好大劲安装完毕后，就是如何使用了，举个栗子：假如说我们要在项目中导入非常火的“AFNetworking”类库，我们先要确定AFNetworking是否支持CocoaPods，所以我们先利用CocoaPods的搜索功能搜索下，在Terminal终端上输入以下命令：<br>&emsp;&emsp;<code>$ pod search AFNetworking</code><br>&emsp;&emsp;如果出现错误：“[!] Unable to find a pod with name, author, summary, or description matching AFNetworking”，可以通过执行下面的命令来解决：<br>&emsp;&emsp;<code>rm ~/Library/Caches/CocoaPods/search_index.json</code><br>&emsp;&emsp;如果执行成功，会出现“AFNetworking”的相关信息，如下图。<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/安装CocoaPods过程以及踩过的坑/searchResult.png\" alt=\"searchResult\"><br>&emsp;&emsp;这说明“AFNetworking”是支持CocoaPods的。接下来我们就可以将“AFNetworking”导入到我们的项目中去。<br>&emsp;&emsp;首先，我们通过Terminal终端进入到们已经创建好的项目目录下，执行下面的命令：<br>&emsp;&emsp;<code>$ vim Podfile</code><br>&emsp;&emsp;这个命令的作用是在项目目录下生成一个名为“Podfile”的文件，这个文件的作用就是用来告诉CocoaPods需要下什么类库，然后我们在Podfile文件中添加以下文字：（注意：不要用文本编辑器进行编辑！）  </p>\n<p><pre>&emsp;&emsp;platform :ios, ‘9.0’<br>&emsp;&emsp;&emsp;&emsp;target ‘MyApp’ do<br>&emsp;&emsp;&emsp;&emsp;pod ‘AFNetworking’, ‘~&gt; 3.1’<br>&emsp;&emsp;end</pre><br>&emsp;&emsp;然后保存退出，这时候在项目的目录里就会出现一个名为Podfile的文件，然后我们执行以下命令来将“AFNetworking”下载到项目中。（注意：下面的命令需要在项目目录中执行。）<br>&emsp;&emsp;<code>$ pod install</code><br>&emsp;&emsp;执行成功后，项目中会多出来一个.xcworkspace类型的文件，如下图：<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/安装CocoaPods过程以及踩过的坑/project.png\" alt=\"project\"><br>&emsp;&emsp;以后需要用它来打开工程才会配置类库的相关文件。<br>&emsp;&emsp;以上就是CocoaPods的安装和使用方法介绍，如果想要了解更多的使用方法，可以参考<a href=\"https://github.com/CocoaPods/CocoaPods/wiki\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n","excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/安装CocoaPods过程以及踩过的坑/cocoapods-stickers.jpg\" alt=\"cocoaPods logo\">  </p>\n<h2 id=\"为什么要用到CocoaPods\"><a href=\"#为什么要用到CocoaPods\" class=\"headerlink\" title=\"为什么要用到CocoaPods\"></a>为什么要用到CocoaPods</h2><p>&emsp;&emsp;以往在写iOS程序的时候，遇到好的第三方开源库都是将开源库下载下来，拷贝到项目中，然后再去使用，而且遇到开源库更新，我们还要重新执行一边操作。如果开源库数量很多，这个操作就显得非常麻烦了。<br>&emsp;&emsp;现在有了CocoaPods，这些问题就都迎刃而解了，CocoaPods可以帮助我们下载，管理第三方的开源库，包括更新、系统依赖和编译参数等都能帮助我们处理。简直不能再方便，设置完CocoaPods后，以后我们只需要专心的敲代码就好了。  </p>\n<h2 id=\"CocoaPods的原理\"><a href=\"#CocoaPods的原理\" class=\"headerlink\" title=\"CocoaPods的原理\"></a>CocoaPods的原理</h2><p>&emsp;&emsp;CocoaPods是将所有的依赖库放到另一个名为Pods的项目中，然后让主项目依赖Pods项目，这样，源码管理工作都从主项目移到了Pods项目中。Pods项目最终会编译成一个名为libPods.a的文件，主项目只需要依赖这个.a文件即可。</p>\n<h2 id=\"安装CocoaPods\"><a href=\"#安装CocoaPods\" class=\"headerlink\" title=\"安装CocoaPods\"></a>安装CocoaPods</h2><p>&emsp;&emsp;现在Mac上似乎已经自带了Ruby，如果没有的话可以通过“<a href=\"http://www.cnblogs.com/daguo/p/4097263.html\">如何在Mac OS X上安装 Ruby运行环境</a>”这篇文章来安装。安装完ruby后，打开Terminal终端，输入以下命令：<br>&emsp;&emsp;<code>$ sudo gem install cocoapods</code>（注意：在执行这条命令前请保证你的gem为最新版）<br>&emsp;&emsp;然后执行安装操作，输入命令：<br>&emsp;&emsp;<code>$ pod setup</code><br>&emsp;&emsp;此时Terminal终端会停留在“Setting up CocoaPods master repo”这个状态一段时间，因为这个时候是在下载安装开源库的文件，安装时间的长短由你的网速等决定。注意，在这里是一个很大的坑，我在这里折腾了一整天，最后才弄好。为了节省大家时间我直接说我的解决办法。<br>&emsp;&emsp;如果你也是用了很多办法都下不来安装文件，或者下载一会儿就报错要重下的话，那么可以参考下这个办法：<br>&emsp;&emsp;1. 访问 <a href=\"https://github.com/CocoaPods/Specs\">https://github.com/CocoaPods/Specs</a>，然后将Specs项目fork到自己的github账户上。<br>&emsp;&emsp;2. 下载GitHub Desktop, 然后clone Specs项目。<br>&emsp;&emsp;3. 将clone的Specs项目的文件夹改名为master，然后拖到/Users/用户名/.cocoapods/repos目录下。<br>&emsp;&emsp;4. 运行pod setup<br>&emsp;&emsp;pod setup的本质就是将<a href=\"https://github.com/CocoaPods/Specs\">https://github.com/CocoaPods/Specs</a>上的Specs项目clone到/Users/用户名/.cocoapods/repos目录下。若此目录下已有Specs项目，则会将项目更新到最新的状态。由于Specs很大，容易导致pod setup失败。这时就需要我们手动安装Specs。若直接从github上下载zip文件，由于缺少git文件，会导致cocoa pods不使用。若用git clone，由于文件过大，容易导致失败。但是使用GitHub Desktop软件，则会提高clone的成功率，并且会给出clone的进度，但是我也是下了三遍最后才clone下来。</p>\n<h2 id=\"使用CocoaPods\"><a href=\"#使用CocoaPods\" class=\"headerlink\" title=\"使用CocoaPods\"></a>使用CocoaPods</h2><p>&emsp;&emsp;废了好大劲安装完毕后，就是如何使用了，举个栗子：假如说我们要在项目中导入非常火的“AFNetworking”类库，我们先要确定AFNetworking是否支持CocoaPods，所以我们先利用CocoaPods的搜索功能搜索下，在Terminal终端上输入以下命令：<br>&emsp;&emsp;<code>$ pod search AFNetworking</code><br>&emsp;&emsp;如果出现错误：“[!] Unable to find a pod with name, author, summary, or description matching AFNetworking”，可以通过执行下面的命令来解决：<br>&emsp;&emsp;<code>rm ~/Library/Caches/CocoaPods/search_index.json</code><br>&emsp;&emsp;如果执行成功，会出现“AFNetworking”的相关信息，如下图。<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/安装CocoaPods过程以及踩过的坑/searchResult.png\" alt=\"searchResult\"><br>&emsp;&emsp;这说明“AFNetworking”是支持CocoaPods的。接下来我们就可以将“AFNetworking”导入到我们的项目中去。<br>&emsp;&emsp;首先，我们通过Terminal终端进入到们已经创建好的项目目录下，执行下面的命令：<br>&emsp;&emsp;<code>$ vim Podfile</code><br>&emsp;&emsp;这个命令的作用是在项目目录下生成一个名为“Podfile”的文件，这个文件的作用就是用来告诉CocoaPods需要下什么类库，然后我们在Podfile文件中添加以下文字：（注意：不要用文本编辑器进行编辑！）  </p>\n<p><pre>&emsp;&emsp;platform :ios, ‘9.0’<br>&emsp;&emsp;&emsp;&emsp;target ‘MyApp’ do<br>&emsp;&emsp;&emsp;&emsp;pod ‘AFNetworking’, ‘~&gt; 3.1’<br>&emsp;&emsp;end</pre><br>&emsp;&emsp;然后保存退出，这时候在项目的目录里就会出现一个名为Podfile的文件，然后我们执行以下命令来将“AFNetworking”下载到项目中。（注意：下面的命令需要在项目目录中执行。）<br>&emsp;&emsp;<code>$ pod install</code><br>&emsp;&emsp;执行成功后，项目中会多出来一个.xcworkspace类型的文件，如下图：<br><img src=\"https://raw.githubusercontent.com/ChiRenhua/Resource/master/WebImage/安装CocoaPods过程以及踩过的坑/project.png\" alt=\"project\"><br>&emsp;&emsp;以后需要用它来打开工程才会配置类库的相关文件。<br>&emsp;&emsp;以上就是CocoaPods的安装和使用方法介绍，如果想要了解更多的使用方法，可以参考<a href=\"https://github.com/CocoaPods/CocoaPods/wiki\">官方文档</a>。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjat0x9tc0001clqdiwgvgxna","category_id":"cjat0x9ua0004clqddsv9aoss","_id":"cjat0x9uq000bclqdzqav6ocj"},{"post_id":"cjat0x9ue000aclqdqxydyzm3","category_id":"cjat0x9ud0009clqdtuseazoi","_id":"cjat0x9ut000fclqddw0281qb"},{"post_id":"cjat0x9tg0002clqdf3n02fa4","category_id":"cjat0x9ud0009clqdtuseazoi","_id":"cjat0x9uv000iclqdzs83nyan"},{"post_id":"cjat0x9ua0005clqdb8aljw2b","category_id":"cjat0x9ua0004clqddsv9aoss","_id":"cjat0x9uv000kclqd5eq6vqms"},{"post_id":"cjat0x9ub0006clqdrcsfdkh3","category_id":"cjat0x9uu000gclqdtvwq0qy0","_id":"cjat0x9uw000pclqdfinta2jc"},{"post_id":"cjat0x9ud0008clqd23f53m5u","category_id":"cjat0x9ud0009clqdtuseazoi","_id":"cjat0x9uy000tclqdzd8ulurq"},{"post_id":"cjat0x9ur000cclqdr9lxzd0n","category_id":"cjat0x9uw000qclqdjlo2bcef","_id":"cjat0x9uy000wclqd2s93q17l"},{"post_id":"cjat0x9y90019clqdrtazy94q","category_id":"cjat0x9ud0009clqdtuseazoi","_id":"cjat0x9yv001hclqderj9mggx"},{"post_id":"cjat0x9yb001bclqdfamwfaxi","category_id":"cjat0x9ud0009clqdtuseazoi","_id":"cjat0x9yx001kclqdhqu1l44a"},{"post_id":"cjat0x9ys001eclqdskez8jcd","category_id":"cjat0x9ud0009clqdtuseazoi","_id":"cjat0x9yy001mclqdv9g9a64m"},{"post_id":"cjat0x9yv001iclqdejaoag9o","category_id":"cjat0x9ua0004clqddsv9aoss","_id":"cjat0x9yy001nclqdqhqxn8sy"}],"PostTag":[{"post_id":"cjat0x9tc0001clqdiwgvgxna","tag_id":"cjat0x9u80003clqd7a0k12u9","_id":"cjat0x9uv000jclqdfhddbr8p"},{"post_id":"cjat0x9tc0001clqdiwgvgxna","tag_id":"cjat0x9uc0007clqdujq3aw6f","_id":"cjat0x9uv000lclqd8phtdplj"},{"post_id":"cjat0x9tc0001clqdiwgvgxna","tag_id":"cjat0x9ur000dclqd8y22j7qz","_id":"cjat0x9uw000oclqdzt68x6y7"},{"post_id":"cjat0x9tg0002clqdf3n02fa4","tag_id":"cjat0x9uu000hclqdxpij7zkx","_id":"cjat0x9uy000sclqdj5mayqzv"},{"post_id":"cjat0x9tg0002clqdf3n02fa4","tag_id":"cjat0x9uv000nclqdmeiweoe3","_id":"cjat0x9uy000uclqdrbp19do7"},{"post_id":"cjat0x9ua0005clqdb8aljw2b","tag_id":"cjat0x9u80003clqd7a0k12u9","_id":"cjat0x9uz000zclqd9l8v8uu5"},{"post_id":"cjat0x9ua0005clqdb8aljw2b","tag_id":"cjat0x9uc0007clqdujq3aw6f","_id":"cjat0x9uz0010clqdhqt54ztt"},{"post_id":"cjat0x9ua0005clqdb8aljw2b","tag_id":"cjat0x9uy000xclqdbf2arc86","_id":"cjat0x9v00012clqdenpbd7vx"},{"post_id":"cjat0x9ud0008clqd23f53m5u","tag_id":"cjat0x9uu000hclqdxpij7zkx","_id":"cjat0x9v00013clqdi3ffp24p"},{"post_id":"cjat0x9ue000aclqdqxydyzm3","tag_id":"cjat0x9uu000hclqdxpij7zkx","_id":"cjat0x9v10016clqdjilejw1u"},{"post_id":"cjat0x9ue000aclqdqxydyzm3","tag_id":"cjat0x9uv000nclqdmeiweoe3","_id":"cjat0x9v10017clqdtmuo3w77"},{"post_id":"cjat0x9ur000cclqdr9lxzd0n","tag_id":"cjat0x9v00015clqdcjw5uezx","_id":"cjat0x9v20018clqdiujpt489"},{"post_id":"cjat0x9y90019clqdrtazy94q","tag_id":"cjat0x9uu000hclqdxpij7zkx","_id":"cjat0x9ys001dclqdk5gcdx9l"},{"post_id":"cjat0x9yb001bclqdfamwfaxi","tag_id":"cjat0x9uu000hclqdxpij7zkx","_id":"cjat0x9yv001gclqdvc3b7fub"},{"post_id":"cjat0x9ys001eclqdskez8jcd","tag_id":"cjat0x9uu000hclqdxpij7zkx","_id":"cjat0x9yw001jclqdqqedvg2f"},{"post_id":"cjat0x9yv001iclqdejaoag9o","tag_id":"cjat0x9yx001lclqdrnd8kn0f","_id":"cjat0x9yz001oclqdqg1dt6fa"},{"post_id":"cjat0x9yv001iclqdejaoag9o","tag_id":"cjat0x9u80003clqd7a0k12u9","_id":"cjat0x9yz001pclqdjbtrgbl7"},{"post_id":"cjat0x9yv001iclqdejaoag9o","tag_id":"cjat0x9uc0007clqdujq3aw6f","_id":"cjat0x9yz001qclqdo2a5urs2"}],"Tag":[{"name":"工具","_id":"cjat0x9u80003clqd7a0k12u9"},{"name":"Xcode","_id":"cjat0x9uc0007clqdujq3aw6f"},{"name":"Instruments","_id":"cjat0x9ur000dclqd8y22j7qz"},{"name":"iOS","_id":"cjat0x9uu000hclqdxpij7zkx"},{"name":"WWDC","_id":"cjat0x9uv000nclqdmeiweoe3"},{"name":"iOS7","_id":"cjat0x9uy000xclqdbf2arc86"},{"name":"命令","_id":"cjat0x9v00015clqdcjw5uezx"},{"name":"类库管理","_id":"cjat0x9yx001lclqdrnd8kn0f"}]}}